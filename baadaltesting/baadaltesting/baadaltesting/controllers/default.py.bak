# -*- coding: utf-8 -*-

import sys
def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/manage_users (requires membership in 
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form=auth64())

def index():
    if auth.is_logged_in():
           user_id=auth._get_user_id()
           print user_id
           new_db=mdb.connect("127.0.0.1","root","baadal","test_baadal")
           cursor=new_db.cursor()
    	   cursor.execute("select email from user where id= %s",user_id)
           user_email_id=cursor.fetchone()
           print user_email_id
           redirect(URL(r=request, f='page',vars=dict(user_email_id=user_email_id)))
    return dict(request=request)
     
def unit_testing():
    print "inside unit testing"
    import commands
    email_id=request.vars['user_email_id']
    print type(email_id)
    new_list=request.vars
    print request.vars
    name=request.vars['name']
    print name 
    if name == None :
                print "inside name checking "
        	new_list=request.vars
        	ip_addr = [v for k,v in new_list.iteritems() if 'testcase' in k] 
                pat='10.208.'
                for ip_address in ip_addr:
                    if type(ip_address)==type(str()):
                       if pat in ip_address:
                          break
                    if type(ip_address)==type(list()):
                       for new_ip in ip_address:
                           if pat in new_ip:
                              ip_address=new_ip
                              break    
    else :
		print "else part of name checking"
                ip_address=name[1]          
    print "ip address of the testing system is : "
    print ip_address
    form = FORM(  TABLE
        (  TR(INPUT(_name='testcases54', _type='checkbox', _value="54"),'All'),
           TR(INPUT(_name='testcases1', _type='checkbox', _value="1"),'Login'),
           TR(INPUT(_name='testcases2', _type='checkbox', _value="2"),'Configure System: Add Host'),
           TR(INPUT(_name='testcases3', _type='checkbox', _value="3"),'Configure System: Add Template'),
           TR(INPUT(_name='testcases4', _type='checkbox', _value="4"),'Configure System: Add Datastore'),
           TR(INPUT(_name='testcases5', _type='checkbox', _value="5"),'Configure System:Add Security Domain'),
           TR(INPUT(_name='testcases6', _type='checkbox', _value="6"),'Request VM'),
           TR(INPUT(_name='testcases7', _type='checkbox', _value="7"),'My VMs'),
           TR(INPUT(_name='testcases8', _type='checkbox', _value="8"),'My Pending Tasks'),
           TR(INPUT(_name='testcases9', _type='checkbox', _value="9"),'My Completed Tasks'),
           TR(INPUT(_name='testcases10', _type='checkbox', _value="10"),'My Failed Taskss'),
           TR(INPUT(_name='testcases11', _type='checkbox', _value="11"),'Pending Faculty-Level VM Approvals(Install VM)'),
           TR(INPUT(_name='testcases12', _type='checkbox', _value="12"),'Pending Faculty-Level VM Approvals(Clone VM)'),
           TR(INPUT(_name='testcases13', _type='checkbox', _value="13"),'Pending Faculty-Level VM Approvals(Attach Disk)'), 
           TR(INPUT(_name='testcases14', _type='checkbox', _value="14"),'Pending Org-Level VM Approvals(Install VM)'),
           TR(INPUT(_name='testcases15', _type='checkbox', _value="15"),'Pending Org-Level VM Approvals(Clone VM)'),
           TR(INPUT(_name='testcases16', _type='checkbox', _value="16"),'Pending Org-Level VM Approvals(Attach Disk)'), 
           TR(INPUT(_name='testcases17', _type='checkbox', _value="17"),'List All Org-Level VMs',),
           TR(INPUT(_name='testcases18', _type='checkbox', _value="18"),'All VMs'),
           TR(INPUT(_name='testcases19', _type='checkbox', _value="19"),'Host and VMs',),
           TR(INPUT(_name='testcases20', _type='checkbox', _value="20"),'Pending Tasks'),
           TR(INPUT(_name='testcases21', _type='checkbox', _value="21"),'Completed Tasks'),
           TR(INPUT(_name='testcases22', _type='checkbox', _value="22"),'Failed Tasks'),
           TR(INPUT(_name='testcases23', _type='checkbox', _value="23"),'Take VM snapshot    (Running )'),
           TR(INPUT(_name='testcases24', _type='checkbox', _value="24"),'Pause VM    (Running )'),
           TR(INPUT(_name='testcases25', _type='checkbox', _value="25"),'Add User to VM   (Running )'),
           TR(INPUT(_name='testcases26', _type='checkbox', _value="26"),'Gracefully shut down VM    (Running )'),
           TR(INPUT(_name='testcases27', _type='checkbox', _value="27"),'Forcefully power off VM   (Running )'),
           TR(INPUT(_name='testcases28', _type='checkbox', _value="28"),'Migrate VM(Running)'),
           TR(INPUT(_name='testcases29', _type='checkbox', _value="29"),'Delete VM    (Running)'),
           TR(INPUT(_name='testcases30', _type='checkbox', _value="30"),'Take VM snapshot   (Paused )'),
           TR(INPUT(_name='testcases32', _type='checkbox', _value="31"),'Migrate VM(Paused)'),
           TR(INPUT(_name='testcases32', _type='checkbox', _value="32"),'Unpause VM   (Paused )'),
           TR(INPUT(_name='testcases33', _type='checkbox', _value="33"),'Add User to VM  (Paused )'), 
	   TR(INPUT(_name='testcases34', _type='checkbox', _value="34"),'Delete Addtional User   (Paused )'),
           TR(INPUT(_name='testcases35', _type='checkbox', _value="35"),'Forcefully power off VM   (Paused)'),
           TR(INPUT(_name='testcases36', _type='checkbox', _value="36"),'Delete Snapshot    (Paused )'),
           TR(INPUT(_name='testcases37', _type='checkbox', _value="37"),'Revert Snapshot    (Paused )'),
           TR(INPUT(_name='testcases38', _type='checkbox', _value="38"),'Delete VM   (Paused )'),
           TR(INPUT(_name='testcases39', _type='checkbox', _value="39"),'Turn on VM   (Shutdown )'),
           TR(INPUT(_name='testcases40', _type='checkbox', _value="40"),'Add User to VM  (Shutdown)'),
           TR(INPUT(_name='testcases41', _type='checkbox', _value="41"),'Migrate VM(Shutdown)'),
           TR(INPUT(_name='testcases42', _type='checkbox', _value="42"),'Take VM snapshot   (Shutdown )'),
           TR(INPUT(_name='testcases43', _type='checkbox', _value="43"),'Delete VM   (Shutdown )'),
           TR(INPUT(_name='testcases44', _type='checkbox', _value="44"),'Sanity Table'), 
           TR(INPUT(_name='testcases45', _type='checkbox', _value="45"),'Pending User VM Requests(Install VM)'),
           TR(INPUT(_name='testcases46', _type='checkbox', _value="46"),'Pending User VM Requests(Clone VM)'),
           TR(INPUT(_name='testcases47', _type='checkbox', _value="47"),'Pending User VM Requests(Attach Disk)'),
           TR(INPUT(_name='testcases93', _type='checkbox', _value="93"),'Maintain Idompotency'),
           
           
           BR(),
           TR(INPUT(_type='submit',_value='submit'))
          )
      )
    if form.process().accepted:
        testcase_list=[]
        j=0
        logger.debug("#############")
        logger.debug(request.vars)
        logger.debug("#############")
        for i in range(1,95):
            test_case_no=request.vars['testcases'+str(i)]
            logger.debug(type(test_case_no))
            logger.debug("test case no is : " + str(test_case_no))            
            if test_case_no == None or test_case_no == "" :
                continue              
            else:
                testcase_list.insert(j,i)
                
            j+=1
        logger.debug(testcase_list)
        task_event_id = db.task_queue.insert(ip_addr=ip_address,task_type ='Unit Testing',requester_type=testcase_list,email_id=email_id)
        db.commit()
        task_type='Unit Testing'  
        schedule_task(task_type,task_event_id,email_id)     
    elif form.errors:
        response.flash = 'form has errors'
    else:
        response.flash = 'please fill the form'
    return dict(form=form)

def system_testing():
    print "inside system testing"
    import commands
    email_id=request.vars['user_email_id']
    print type(email_id)
    new_list=request.vars
    print request.vars
    name=request.vars['name']
    if name == None :
                print "inside name checking "
        	new_list=request.vars
        	ip_addr = [v for k,v in new_list.iteritems() if 'testcase' in k] 
                pat='10.208.'
                for ip_address in ip_addr:
                    if type(ip_address)==type(str()):
                       if pat in ip_address:
                          break
                    if type(ip_address)==type(list()):
                       for new_ip in ip_address:
                           if pat in new_ip:
                              ip_address=new_ip
                              break    
    else :
		print "else part of name checking"
                ip_address=name[1]          
    print "ip address of the testing system is : "
    print ip_address
    form = FORM(  TABLE
        (  
           TR(INPUT(_name='testcases13', _type='checkbox', _value="13"),'All'),
           TR(INPUT(_name='testcases1', _type='checkbox', _value="1"),'Migrate'),
           TR(INPUT(_name='testcases2', _type='checkbox', _value="2"),'Shutdown'),
           TR(INPUT(_name='testcases3', _type='checkbox', _value="3"),'Paused'),
           TR(INPUT(_name='testcases4', _type='checkbox', _value="4"),'Delete'),
           TR(INPUT(_name='testcases5', _type='checkbox', _value="5"),'Force Shutdown'),
           TR(INPUT(_name='testcases6', _type='checkbox', _value="6"),'Attach Disk'),
           TR(INPUT(_name='testcases7', _type='checkbox', _value="7"),'Baadal Shutdown'),
           TR(INPUT(_name='testcases8', _type='checkbox', _value="8"),'Clone VM'),
           TR(INPUT(_name='testcases9', _type='checkbox', _value="9"),'Edit VM Configuration'),
           TR(INPUT(_name='testcases10', _type='checkbox', _value="10"),'VNC Access'),
           TR(INPUT(_name='testcases11', _type='checkbox', _value="11"),'Sanity Check'),
           TR(INPUT(_name='testcases12', _type='checkbox', _value="12"),'VM Snapshot '),
           
           BR(),
           TR(INPUT(_type='submit',_value='submit'))
          )
      )
       
    if form.process().accepted:
        testcase_list=[]
        j=0
        for i in range(1,13): 
            print i
            test_case_no=request.vars['testcases'+str(i)]    
            print "test case no  : " +str(test_case_no)       
            if test_case_no==None:                
                	continue
            else:
                        testcase_list.insert(j,i)
            j+=1
        print "test case list : " + str(testcase_list)
        task_event_id = db.task_queue.insert(ip_addr=ip_address,task_type ='System Testing',requester_type=testcase_list,email_id=email_id)
        db.commit()
        task_type='System Testing'  
        schedule_task(task_type,task_event_id,email_id) 
   
    elif form.errors:
        response.flash = 'form has errors'
    else:
        response.flash = 'please fill the form'
    return dict(form=form)


def add_sandbox():
    form=FORM(DIV('Sandbox Name: ',INPUT(_name='name',requires=IS_NOT_EMPTY())),
     DIV('Ip address : ',INPUT(_name='name',requires=IS_NOT_EMPTY())),
     DIV(INPUT(_type='submit',_value='submit')))
    if form.process().accepted:
           redirect(URL(r=request, f='main_page',vars=request.vars))
    return dict(form=form)


def page():
	import commands
        print "inside index page"
        print request.vars
        email_id=request.vars['user_email_id']
        print "###########################"
        print email_id
        form = FORM( TABLE
                  (  TR(INPUT(_name='testcase1', _type='radio', _value="10.208.21.67"),'Main Server'),
                     TR(INPUT(_name='testcase2', _type='radio', _value="10.208.21.66"),'Nalini Sandbox'),
                     TR(INPUT(_name='testcase3', _type='radio',_value=""),'Add Sandbox'),
                     BR(),
                     TR(INPUT(_type='submit',_value='submit'))
                  )
                )
        if form.process().accepted:
            if request.vars['testcase1']!=None: 
                print "inside testcase1 in index page"        
                redirect(URL(r=request, f='main_page',vars=request.vars))

            if request.vars['testcase2']!=None:
                print "inside testcase2 in index page"
                redirect(URL(r=request, f='main_page',vars=request.vars))

	    if request.vars['testcase3']!=None:
                print "inside testcase3 in index page"
                redirect(URL(r=request, f='add_sandbox',vars=request.vars))
        elif form.errors:
            response.flash = 'form has errors'
        else:
            response.flash = 'please fill the form'
        return dict(form=form)


def main_page():
        import commands
        print request.vars
        name=request.vars['name']
        if name == None :
        	new_list=request.vars
        	ip_addr = [v for k,v in new_list.iteritems() if 'testcase' in k]             
        else :
                ip_addr=name[1]                 
        email_id=request.vars['user_email_id']
        print ip_addr
        print email_id
        form = FORM( TABLE
                  (  TR(INPUT(_name='case1', _type='radio', _value="1"),'Unit Testing'),
                     TR(INPUT(_name='case2', _type='radio', _value="2"),'Integration Testing'),
                     TR(INPUT(_name='case3', _type='radio', _value="3"),'All'),
                     TR(INPUT(_name='case4', _type='radio', _value="4"),'Network Testing'),
                     TR(INPUT(_name='case5', _type='radio', _value="5"),'System Testing'),
                     BR(),
                     TR(INPUT(_type='submit',_value='submit'))
                  )
                )
        if form.process().accepted:
            if request.vars['case1']!=None:
                redirect(URL(r=request, f='unit_testing',vars=request.vars))
	    if request.vars['case5']!=None:
                redirect(URL(r=request, f='system_testing',vars=request.vars))
            if request.vars['case2']!=None:
                redirect(URL(r=request, f='integration_testing',vars=request.vars))
            if request.vars['case3']!=None:
                 for j in range(1,94):
                        test_case_no=str(j)
                        test_script(test_case_no)
            if request.vars['case4']!=None:
                redirect(URL(r=request, f='network_testing',vars=request.vars))
            
        elif form.errors:
            response.flash = 'form has errors'
        else:
            response.flash = 'please fill the form'
        return dict(form=form)


def network_testing():
   
    print "inside unit testing"
    import commands
    email_id=request.vars['user_email_id']
    print type(email_id)
    new_list=request.vars
    print request.vars
    name=request.vars['name']
    if name == None :
                print "inside name checking "
        	new_list=request.vars
        	ip_addr = [v for k,v in new_list.iteritems() if 'testcase' in k] 
                pat='10.208.'
                for ip_address in ip_addr:
                    if type(ip_address)==type(str()):
                       if pat in ip_address:
                          break
                    if type(ip_address)==type(list()):
                       for new_ip in ip_address:
                           if pat in new_ip:
                              ip_address=new_ip
                              break    
    else :
		print "else part of name checking"
                ip_address=name[1]          
    print "ip address of the testing system is : "
    print ip_address
    form = FORM(TABLE
             (   
              
    TR(INPUT(_name='testcases98', _type='checkbox', _value="98"),'Packages Install on Host '),
   
     TR(INPUT(_name='testcases99', _type='checkbox', _value="99"),'Packages Install on Baadal '),
    
    TR(INPUT(_name='testcases80', _type='checkbox', _value="80"),'VM status on Host '),
    BR(),
    TR(INPUT(_type='submit',_value='submit'))
            )
            )
    task_event_id = db.task_queue.insert(task_id=ip_address,task_type ='Network Testing' ,requester_type=REQUEST_TYPE_NETWORK) 
    if form.process().accepted:
        if request.vars['testcases98']!=None:
            packages_install_test(98,ip_address)
        if request.vars['testcases99']!=None:
            packages_install_host(99,ip_address) 
        if request.vars['testcases80']!=None:
            check_stat_on_host(ip_address)    
    elif form.errors:
        response.flash = 'form has errors'
    else:
        response.flash = 'please fill the form'
    return dict(form=form)
    
    
def stress_testing(): 

    import commands
    print request.vars
    ip_addr=request.vars['ip_addr']
    pat="10.208."
    for ip in ip_addr:
    	if pat in ip:
           break
    ip_address=ip
    form = FORM(  TABLE
        (   TR(INPUT(_name='testcases0', _type='checkbox', _value="0"),'All'), 
            BR(),
            TR(INPUT(_type='submit',_value='submit'))
        )
        )
    task_event_id = db.task_queue.insert(task_id=ip_address,task_type ='Stress Testing',requester_type=REQUEST_TYPE_STRESS)           
    if form.process().accepted:
        test_case_no=request.vars['testcases0']
        if test_case_no!=None:
            stress_test_script(ip_address)
    elif form.errors:
        response.flash = 'form has errors'
    else:
        response.flash = 'please fill the form'
    return dict(form=form)
    
   
def integration_testing(): 
    print "inside integration testing"
    import commands
    email_id=request.vars['user_email_id']
    print type(email_id)
    print email_id
    new_list=request.vars
    print request.vars
    name=request.vars['name']
    if name == None :
                print "inside name checking "
        	new_list=request.vars
        	ip_addr = [v for k,v in new_list.iteritems() if 'testcase' in k] 
                pat='10.208.'
                for ip_address in ip_addr:
                    if type(ip_address)==type(str()):
                       if pat in ip_address:
                          break
                    if type(ip_address)==type(list()):
                       for new_ip in ip_address:
                           if pat in new_ip:
                              ip_address=new_ip
                              break    
    else :
		print "else part of name checking"
                ip_address=name[1]          
    print "ip address of the testing system is : "
    print ip_address
    form = FORM(  TABLE
                  
                  (    TR(INPUT(_name='testcases93', _type='checkbox', _value="93"),'Maintain Idompotency'),
                       TR(INPUT(_name='testcases95', _type='checkbox', _value="95"),'VM Performance(Memory)'),
                       TR(INPUT(_name='testcases96', _type='checkbox', _value="96"),'VM Performance(CPU)'),
                       TR(INPUT(_name='testcases97', _type='checkbox', _value="97"),'VM Performance(Network)'),
                       TR(INPUT(_name='testcases98', _type='checkbox', _value="98"),'VM Performance(Disk)'),
                       TR(INPUT(_name='testcases99', _type='checkbox', _value="99"),'VM Performance   (Shutdown )'),
                       TR(INPUT(_name='testcases56', _type='checkbox', _value="56"),'User Request VM(Approved by Faculty,org-admin,admin)'),
                       TR(INPUT(_name='testcases57', _type='checkbox', _value="57"),'User Request VM(Approved by Faculty and Rejected by org-admin)'),
                       TR(INPUT(_name='testcases58', _type='checkbox', _value="58"),'User Request VM(Approved by Faculty,org-admin and Rejected by admin)'),
                       TR(INPUT(_name='testcases59', _type='checkbox', _value="59"),'User Request VM(Rejected by Faculty )'),
#                             
                  #     TR(INPUT(_name='testcase60', _type='checkbox', _value="60"),'Take VM snapshot    (Running )'),
                   #    TR(INPUT(_name='testcase61', _type='checkbox', _value="61"),'Pause VM   (Running )'),
                    #   TR(INPUT(_name='testcase62', _type='checkbox', _value="62"),'Add User to VM   (Running )'),
                     #  TR(INPUT(_name='testcase65', _type='checkbox', _value="65"),'Delete VM    (Running)'),
                      # TR(INPUT(_name='testcase64', _type='checkbox', _value="64"),'Gracefully shut down VM    (Running )'),
                      # TR(INPUT(_name='testcase63', _type='checkbox', _value="63"),'Forcefully power off VM   (Running )'),
                      # TR(INPUT(_name='testcase66', _type='checkbox', _value="66") ,'Migrate VM   (Running )'),
                       #TR(INPUT(_name='testcase67', _type='checkbox', _value="67"),'Take VM snapshot   (Paused )'),
                       #TR(INPUT(_name='testcase68', _type='checkbox', _value="68"),'Unpause VM   (Paused )'),
                       #TR(INPUT(_name='testcase69', _type='checkbox', _value="69"),'Add User to VM  (Paused )'),
                       #TR(INPUT(_name='testcase75', _type='checkbox', _value="75"),'Delete VM   (Paused )'),
                       #TR(INPUT(_name='testcase71', _type='checkbox', _value="71"),'Forcefully power off VM   (Paused)'),
                       #TR(INPUT(_name='testcase70', _type='checkbox', _value="70"),'Migrate VM   (Paused )'),
                       #TR(INPUT(_name='testcase72', _type='checkbox', _value="72"),'Delete Add User  (Paused )'),
                       #TR(INPUT(_name='testcase73', _type='checkbox', _value="73"),'Revert Snapshot  (Paused )'),
                      # TR(INPUT(_name='testcase74', _type='checkbox', _value="74"),'Delete snapshot   (Paused )'),
                      # TR(INPUT(_name='testcase76', _type='checkbox', _value="76"),'Turn on VM   (Shutdown )'),
                      # TR(INPUT(_name='testcase77', _type='checkbox', _value="77"),'Add User to VM  (Shutdown)'),
                       #TR(INPUT(_name='testcase80', _type='checkbox', _value="80"),'Delete VM   (Shutdown )'),
                      # TR(INPUT(_name='testcase78', _type='checkbox', _value="78"),'Take VM snapshot   (Shutdown )'),
                       #TR(INPUT(_name='testcase79', _type='checkbox', _value="79"),'Migrate VM   (Shutdown )'),
                       #TR(INPUT(_name='testcase107', _type='checkbox', _value="107"),'User Request Attach Disk(Approved by Faculty,org-admin,admin)'),
                       # TR(INPUT(_name='testcase71', _type='checkbox', _value="71"), 'Org-Admin Request VM(Rejected by admin)'),
                       #TR(INPUT(_name='testcase109', _type='checkbox', _value="109"),'User Request Attach Disk(Approved by Faculty and Rejected by org-admin)'),
                      #TR(INPUT(_name='testcase108', _type='checkbox', _value="108"),'User Request Attach Disk(Approved by Faculty,org-admin and Rejected by admin)'),
                      # TR(INPUT(_name='testcase110', _type='checkbox', _value="110"),'User Request Attach Disk(Rejected by Faculty )'),            
                     # TR(INPUT(_name='testcase105', _type='checkbox', _value="105"),'Org-Admin  Attach Disk(Approved by admin)'),
                   # TR(INPUT(_name='testcase106', _type='checkbox', _value="106"), 'Org-Admin Attach Disk(Rejected by admin)'),                    
                     
                   # TR(INPUT(_name='testcase102', _type='checkbox', _value="102"),'User Request Clone VM(Approved by Faculty and Rejected by org-admin)'),
                   #   TR(INPUT(_name='testcase112', _type='checkbox', _value="112"),'User Request Clone VM(Rejected by Faculty )'),
                   
                  #   TR(INPUT(_name='testcase118', _type='checkbox', _value="118"),'User Request Clone VM(Approved by Faculty,org-admin,admin)'),
                #   TR(INPUT(_name='testcase119', _type='checkbox', _value="119"),'User Request Clone VM(Approved by Faculty and Rejected by org-admin)'),
                 #     TR(INPUT(_name='testcase120', _type='checkbox', _value="120"),'User Request Clone VM(Approved by Faculty,org-admin and Rejected by admin)'),
                  #    TR(INPUT(_name='testcase121', _type='checkbox', _value="121"),'User Request Edit VM Config(Rejected by Faculty )'),
                   
                      BR(),
                      TR(INPUT(_type='submit',_value='submit'))
            )
     ) 
    if form.process().accepted:
        test_list=[]
        j=0
        for i in range(56,100):
            print "inside for loop"
            test_case_no=request.vars['testcases'+str(i)]
            print "test case no : " + str(test_case_no)
	    if test_case_no == None :
                print "inside if "
                break              
            else:
                print "inside else"
                test_list.insert(j,i)
            j+=1
        print "test cases are : " + str(test_list)
        task_event_id=db.task_queue.insert(ip_addr=ip_addr,task_type='Integration Testing',requester_type=test_list,email_id=email_id)
        db.commit()
        task_type='Integration Testing'  
        schedule_task(task_type,task_event_id,email_id)
    elif form.errors:
        response.flash = 'form has errors'
    else:
        response.flash = 'please fill the form'
    return dict(form=form)
