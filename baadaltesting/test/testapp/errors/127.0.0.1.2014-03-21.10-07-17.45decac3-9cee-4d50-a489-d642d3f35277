(dp1
S'output'
p2
S"<class 'httplib.BadStatusLine'> ''"
p3
sS'layer'
p4
S'/home/nalini/Desktop/web2py/applications/newapp/models/cron_job.py'
p5
sS'code'
p6
S'# coding: utf8\n# coding: utf8\nimport os\nimport thread\nimport paramiko\nimport logging\nimport datetime\nimport logging.config\nfrom selenium import webdriver\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\nfrom selenium.common.exceptions import StaleElementReferenceException\nfrom selenium.common.exceptions import NoSuchElementException\nfrom selenium.common.exceptions import InvalidElementStateException\nfrom selenium.common.exceptions import TimeoutException\nfrom helper import *\nimport libvirt\nimport commands\nimport MySQLdb as mdb\nfrom selenium.webdriver.common.keys import Keys\nimport sys\nimport time\n\n\n#creating a logger for logging the records\nlogger = logging.getLogger("web2py.app.testapp")\n\n#creating connection to remote database\nbaadal_db=db_connection() \n\n\n#creating connection to remote system\nssh = paramiko.SSHClient()\nssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n\n#getting path of baadal\nbaadal_path=get_app_name()\n\n#################################################################################################################\n#                                       The main test function  for unit testing                                            #\n#################################################################################################################\n\n\n\ndef test_scripts(test_case_no):\n    print test_case_no\n    root = xml_connect()\n    num=int(test_case_no)\n    vm_status=1\n    if root[num-1].get("id")==test_case_no:\n        \n        i=num-1\n        vm_name=""  \n        for j in xrange(0,len(root[i])):\n        \t\n            driver = webdriver.Firefox()#connect to selenium server\n            driver.implicitly_wait(10)\n            page_present=driver.get(baadal_path) #url of the page to be hit \n            if page_present!="None":\n            \tdriver.find_element_by_link_text(root.get("href")).click()\n            \timage=0\n            \tfor k in xrange(0,len(root[i][j])):\n                    if vm_status:\n                        field_type=root[i][j][k].get("type")\n                        xml_parent=root[i]\n                        xml_child=root[i][j]\n                        xml_sub_child=root[i][j][k]\n                \t\n                    \tif field_type=="input": #checking for text fields\n                        \tvm_name1=isInput(driver,xml_sub_child)\n                      \n                    \telif field_type=="read_only": #checking for submit button\n                        \tisReadOnly(driver, xml_parent,xml_child,xml_sub_child)\n\t\t\t\t\t\t\n                    \telif field_type=="submit": #checking for submit button\n                        \ttime.sleep(3)\n                        \n                        \tisSubmit(driver, xml_parent,xml_child,xml_sub_child)\n                        \n\t\n                    \telif field_type=="scroll":#scrolling the page up/down\n                        \tisScroll(driver,xml_sub_child)\n\t\t\t\t \t\n                    \telif field_type=="clear":#Clearing text from textarea \n                        \tisClear(driver,xml_sub_child)  \n                        \t\n                        elif field_type=="href":\n                            isHref(driver,xml_sub_child,xml_child)#clicking on the hyper link\n                    \n                    \telif field_type=="select":\n                        \tisSelect(driver,xml_sub_child)# selecting from dropdown menu\n                    \n                    \telif field_type=="sanity_table":\n                        \tisSanityCheck(driver, xml_parent, xml_child, xml_sub_child)# checking for data in  sanity table\n\t\t\t \t\n                    \telif field_type=="table":\n                        \tisTable(driver,xml_parent,xml_child,xml_sub_child)#checking for data in table\n                         \n                    \telif field_type=="img":#checking for setting image\n                        \ttable_path=xml_sub_child.get("path")\n                        \tvm_name2=isImage(driver,xml_child,xml_sub_child,table_path)\n\t\t\t\t\n                    \telif field_type=="check_tables":#cheking for host table\n                        \tisCheckTable(driver,xml_parent,xml_child,xml_sub_child)\n                \n                    \telif field_type=="wait":\n                        \tisWait(driver,xml_parent,xml_child,xml_sub_child)#checking for data in table\n                    \n                    \telif field_type=="check_data":\n                        \tisCheckdata(driver,xml_parent,xml_child,xml_sub_child,vm_name)#checking for data in table\n                 \n                    \telif field_type=="task_table":\n                         \toperation_name=xml_sub_child.text\n                         \tvm_status1=check_vm_task(driver,xml_sub_child,xml_child,vm_name,operation_name)#checking for data in table\n                \n                    \telif field_type=="attach_disk":\n                        \toperation_name=xml_sub_child.text\n                        \tattack_disk(driver,xml_sub_child,xml_child,vm_name,operation_name)#checking for data in table\n                        \n                        elif field_type=="idompotent":\n                            maintain_idompotency(driver,xml_sub_child,xml_child)\t\t\t\t          \t\t\t\t          \t\t\t\t\n                    \telse:\n                        \tlogging.debug("report problem") #logging the report\n                    \tif k==39:\n                            vm_status=vm_status1\n                    \tif k==5:\n                        \tvm_name=vm_name1\n            \tdriver.close()#disconnect from server        \n                \n                \t\n            else:\n                logger.debug("Cannot connect to controller.Please check controller")\n\n        \n#################################################################################################################\n#                                       The main test function  for graph testing                                       #\n#################################################################################################################\n\ndef graph_test(test_case_no):\n#Checking memory utilizations\n    \n    root = xml_connect()\n    i=int(test_case_no)\n    xml_sub_child=root[i-1][0][0]\n    xml_child=root[i-1][0]   \n    ssh.connect(xml_child.get("ip_add"), username=xml_child.get("usrnam"), password=xml_child.get("password"))   \n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_init_data"))\n    initial_data=stdout.readlines()\n    \n    current_time=datetime.datetime.now()\n   \n    ini_data=str(initial_data[2])\n    init_data=ini_data.split()\n    ssh.connect("10.208.21.113", username="root", password="baadal_test")   \n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_run_prgrm"))\n    data=stdout.readlines()\n    time.sleep(600)    \n    ssh.connect(xml_child.get("ip_add"), username=xml_child.get("usrnam"), password=xml_child.get("password"))  \n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_finl_data"))\n    final_data=stdout.readlines()\n    fin_data=str(final_data[2])\n    finl_data=fin_data.split()\n    print_graph_result(finl_data,init_data,xml_child)\n    \ndef print_graph_result(finl_data,init_data,xml_child):\n    logger.debug(xml_child.get("value") +" Initial_data:"+ str(init_data))\n    logger.debug(xml_child.get("value") +" Final_data:"+ str(finl_data))\n    for i in range(1,7):\n        if init_data[i]=="-nan":\n            i_data=0\n        else:\n            i_data=init_data[i]      \n        diff=float(finl_data[i])-float(i_data)\n        logger.debug(xml_child.get("value") +": Differnce "+ str(diff)) \n        if finl_data[i]=="-nan":\n            logger.debug(xml_child.get("value") +\':  \'+"Incorrect Data")\n        else :\n            if diff<=0:\n                logger.debug(xml_child.get("value") +\':  \'+"Incorrect Data") \n            else:\n                logger.debug(xml_child.get("value") +\':  \'+"Correct Data")   \n\n\ndef print_graph(finl_data,xml_child):\n    for i in range(1,7):\n        if finl_data[i]=="-nan":\n            logger.debug(xml_child.get("value") +\':  \'+"Correct Data")\n        else :\n            logger.debug(xml_child.get("value") +\':  \'+"Incorrect Data")  \n#################################################################################################################\n#                                        Function  for Network testing                                            #\n#################################################################################################################           \ndef packages_install_test(test_case_no): \n    root = xml_connect()\n    xml_sub_child=root[test_case_no-1][0][0]\n    \n    xml_child=root[test_case_no-1][0]    \n    ssh.connect(xml_child.get("ip_add"), username=xml_child.get("usrnam"), password=xml_child.get("password"))    \n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_flush"))\n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_pkg"))\n    pkg_list=xml_sub_child.get("pkg_lst").split()\n    for pkg in  pkg_list:\n        cmd=xml_sub_child.get("cmd_srch") + " " +str(pkg)\n        stdin, stdout, stderr =ssh.exec_command(cmd)\t\n        data=stdout.readlines()\n        if data:\n            logger.debug(xml_child.get("value") +\': \'+pkg +" :software has installed properly") \n            \n        else:\n            logger.debug(xml_child.get("value") +\': \'+pkg +" :software has not installed properly") \n \n                                                                                                                                                                        \n\n                                         \ndef check_stat_on_host():\n    \n    conn = libvirt.open("qemu+ssh://root@" + \'10.208.21.70\' + "/system")\n    \n    db=mdb.connect("10.208.21.111","baadaltesting","test_baadal","baadal")\n    cursor1=db.cursor()\n    cursor1.execute("select vm_name,vm_data.status,host_id from vm_data join host where host.id=vm_data.host_id and host_ip=\'10.208.21.70\'")\n    output=cursor1.fetchall()\n    datas=str(output)\n    lists=datas.split("), (")\n    col_count=len(lists)\n    \n    for i in range(0,col_count):\n        datass=lists[i].split(",")\n        newstr = datass[0].replace("\'", "")\n        if i==0:\n            newstr=newstr.replace("((","")\n        for id in conn.listDomainsID():\n            dom = conn.lookupByID(id)\n            infos = dom.info()\n            if newstr==dom.name():\n                print newstr\n                print \'Name =  %s\' % dom.name()\n                print \'State = %d\' % infos[0]\n                print datass[1]\n                if (((datass[1]==" 5L") & (infos[0]==1)) | ((datass[1]==" 6L") & (infos[0]==3))):\n                    print "yes"                                           \n \n#################################################################################################################\n#                         Function for mailing\n                                           #\n#################################################################################################################    \ndef send_mail():\n                                          \n    from gluon.tools import Mail\n    mail = Mail()\n    mail.settings.server = \'smtp.iitd.ernet.in:25\'\n    mail.settings.sender = \'monika28.visitor@cse.iitd.ernet.in\'\n    mail.settings.login = \'jyoti11.visitor@cse.iitd.ernet.in:jyoti_saini\'\n    mail.send(to=[\'monika71990@gmail.com\'],\n          subject=\'hello\',\n          # If reply_to is omitted, then mail.settings.sender is used\n          message="Error")\n###############################################################################################################\n#                             Functions used by the input field functions                                     #\n###############################################################################################################\t\t\n\n# checking whether a table is present on the webpage\ndef isElementPresent(driver,xml_child,xpath):\n    try:\n        driver.find_element_by_xpath(xpath)\n   \n        return 1\n    except :\n        logger.debug(xml_child.get("value") +\': Result:no element exists\')\n        return 0\n   \n        \t\n\n\n# checking whether an element is present on the webpage\ndef isTablePresent(driver,xml_child,xpath):\n    try:\n        driver.find_element_by_xpath(xpath)\n        \n        return 1\n    except:\n        logger.debug(xml_child.get("value") +\': Result:no table exists\')\n        return 0\t\n   \n\n\t\t\t\t\n#checking whether front end data and daatabase entries are equal and printing the result \t\t\ndef print_result(field_text,result,xml_child):\n\t\n\tquery_result=str(result)\n        logger.debug("screen=  "+str(field_text) )\n        logger.debug("db=      "+query_result)\n\tif str(field_text)==str(query_result):\n\t\tlogger.debug(xml_child.get("value") +\': Result:correct input\') \n\t\t\n\telse:\n\t\tlogger.error(xml_child.get("value") +\': Result:Incorrect input\')\n\n\treturn \n\n\t\n#open error link on differnet page\t\t\t\ndef open_error_page(driver,xml_parent,xml_child,text,row_count):\n    (driver.find_elements_by_link_text(text))[row_count].click()\n    time.sleep(5)\n    xpath=xml_parent.get("error_page")\n    if isTablePresent(driver,xml_child,xpath):\n        field=driver.find_element_by_xpath(xpath)\t\n        error_message=field.text\n        driver.find_element_by_link_text(xml_parent.get("error_page_close_text")).click()\n    else:\n        error_message="None"\n    return error_message\n\n\t\n#converting vm status bits into status text\t\t\t\ndef admin_vm_status(status):\n    vm_status=["Running","Paused","Shutdown"]\n    if status==2:\n        result=vm_status[0]\n    if status==3:\n        result=vm_status[1]\n    if status==4:\n        result=vm_status[2]\n    return result \n\n    \t\n#converting host status bits into status text    \t    \t    \t\ndef host_status(status):\n\thost_status={0:"Down",1:"Up",2:"Maintenance"}\t\n\tif status==0:\n\t\tresult=host_status[0]\n\tif status==1:\n\t\tresult=host_status[1]\n\tif status==2:\n\t\tresult=host_status[2]\n\treturn result\n\n\t\t\n#converting  status bits into status text\t\ndef org_task_status(status,xml_child):\n    user_name=xml_child[0].get("value")\n    \n    task_status={0:"Approve  |  Reject | Edit",1:"Waiting for admin approval",2:"Remind Faculty"}\n    if (status==0) | (status==2):\n        result=task_status[0]\n    if (status==3) :\n        result=task_status[0]\n    if (status==4) :\n        result=task_status[1]\n    if (status==1) :\n        result=task_status[2]\n    return result\n    \n\n        \n    \n#for executing sql-query\t\t\t\ndef execute_query(sql_query,arg=None):\n    cursor=baadal_db.cursor()    \n    if arg==None:\n        cursor.execute(sql_query)\n    else:\n        cursor.execute(sql_query,arg)\n\n    return cursor\n\n\n#perform action on setting button of vm\'s\ndef click_on_setting(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    \n    path="//*[@href=\'/baadal/user/settings/"+ str(vm_id) +"\']"\n    print path\n    time.sleep(30)\n    if isElementPresent(driver,xml_child,path):\n        q=driver.find_element_by_xpath(path).click()\n        \n        print q\n        time.sleep(30)\n        logger.debug(xml_child.get("value") +\': Result:Setting button is working properly\') \n    else:\n        logger.debug(xml_child.get("value") +\': Result:Setting button is not working properly\')\n    \n    return\n    \n    \n#open dialogbox when error occurs in falied tasks            \ndef click_on_dialogbox(driver):\n\t\n    alert = driver.switch_to_alert()\n    alert.accept()\n    return\n    \n#add extra disk to a VM\ndef add_extra_disk(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    isInput_add(driver, xml_sub_child)\n    value=xml_sub_child.get("add_button")\n    isButton_add(driver, xml_sub_child,value)\n    \n    return\n    \n#add additional user to a VM\ndef add_user(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    isInput_add(driver, xml_sub_child)\n    value=xml_sub_child.get("add_submit")\n    isButton_add(driver, xml_sub_child,value)\n    time.sleep(3)\n    status=isElementPresent(driver,xml_child,value)\n    \n    if status==1:\n        logger.error(xml_child.get("value")  + "User is already VM user")\n        user=0\n    else:\n        val=xml_sub_child.get("add_button")\n        isButton_add(driver, xml_sub_child,val)\n        user=1\n    return user\n\n       \n\n\n#getting snapshot id of a VM\n\ndef get_snapshot_id(driver,xml_sub_child,xml_child,vm_name):\n    query_result=execute_query( xml_sub_child.get("query_snap_id"),(str(vm_name))).fetchone()\n    baadal_db.commit()\n    field=driver.find_elements_by_xpath(xml_sub_child.get("xpath_snap"))\n    for t in field:\n        if str(query_result[1]) in t.text:\n            snap_id=query_result[0]\n    return snap_id\n\n\n# performing  attach disk operation on vm \ndef attack_disk(driver,xml_sub_child,xml_child,vm_name,operation_name):\n    \n    query_result=execute_query("select id,status from request_queue where vm_name=%s",(str(vm_name))).fetchone()\n    baadal_db.commit()\n    query_result=execute_query("select id from vm_data where vm_name=%s",(str(vm_name))).fetchone()\n    baadal_db.commit()\n    if query_result!=():\n        query_result=execute_query("select id from vm_data where vm_name=%s",(str(vm_name))).fetchone()\n        \n        vm_id=query_result[0]\n        \n        click_on_setting(driver,xml_sub_child,xml_child,vm_name,vm_id)\n        click_on_operation(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    return\n          \n        \n#getting user id of a user access to a VM                        \ndef get_user_id(driver,xml_sub_child,xml_child,vm_name):\n    query_result=execute_query( xml_sub_child.get("query_user_id"),(str(vm_name))).fetchone()\n    baadal_db.commit()\n    field=driver.find_elements_by_xpath(xml_sub_child.get("xpath_user"))\n    for t in field:\n        if str(query_result[1]) in t.text:\n            user_id=query_result[0]\n            logger.debug("user_id :" + " " + str(user_id))\n    return user_id\n\n\n\n#performing add_user operation on vm\ndef op_user(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    op_name=xml_sub_child.get("op")  \n    path="//*[@title=\'Add User to VM\']"\n    if isElementPresent(driver,xml_child,path):             \n        driver.find_element_by_xpath(path).click()\n        if add_user(driver,xml_sub_child,xml_child,vm_name,vm_id):\n            if xml_sub_child.get("op_typ")!="cancel_user":\n                field_text=message_flash(driver,xml_sub_child,xml_child)\n                result=message_in_db(xml_sub_child)\n                print_result(field_text,result,xml_child)\n            \tif xml_sub_child.get("name") in vm_mode_type:\n              \t\tcheck_user_table(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    return\n\n#checking whether username is in vm_users table or not\ndef  check_user_table(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    username=xml_sub_child.get("user_id_data")\n    query_length=execute_query( xml_sub_child.get("query5"),(str(vm_name))).fetchone()\n    baadal_db.commit()\n    length=len(query_length)\n    query_result=execute_query("select concat(user.first_name,\' \',user.last_name) as user_name from user where username=%s",(str(username))).fetchone()\n    baadal_db.commit()\n    path="//table[@id=\'vm_users\']/tbody/tr"\n    if isElementPresent(driver,xml_child,path):\n        field=driver.find_elements_by_xpath(path)\n        count=0\n\tcheck_len=0\n\tfor data in field:\n\t    if query_result[0] in data.text:\n            \n\t\tlogger.debug("User name is added to VM")\n\t\tcount=1\n\t\tcheck_len+=1\n    \tif check_len==length:\n    \t\tif count==0:\n    \t\t    logger.errot(xml_child.get("value")  + "Error ")    \n    return\n    \n#list of vm mode \nvm_mode_type=[\'vm_running_Setting_intgrtn\',\'vm_paused_Setting_integrtn\',\'vm_shutdown_Setting_integrtn\']\n\n\n#performing delete operation on vm\n\ndef op_delete_vm(driver,xml_sub_child,xml_child,vm_name,vm_id):   \n    op_name=xml_sub_child.get("op")  \n    path=xml_sub_child.get("title")  \n    if isTablePresent(driver,xml_child,path):         \n    \tdriver.find_element_by_xpath(path).click()\n    \tclick_on_dialogbox(driver)\n    \tclick_on_dialogbox(driver)\n    \tfield_text=message_flash(driver,xml_sub_child,xml_child)\n    \tresult=message_in_db(xml_sub_child)\n    \tprint_result(field_text,result,xml_child)\n    \tif xml_sub_child.get("name") in vm_mode_type:\n        \toperation_name=op_list[op_name]\n        \tcheck_vm_task(driver,xml_sub_child,xml_child,vm_name,operation_name)  \n    else:\n\tlogger.debug("No element exist")          \n\n    return\n\n#performing snapshot operation on vm\ndef op_snap_vm(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    op_name=xml_sub_child.get("op") \n    if op_name=="snapshot": \n    \t\n        path="//a[@title=\'Take VM snapshot\']"\n    else:\n    \t\n        path=xml_sub_child.get("xpath_snap")\n    \n    if isElementPresent(driver,xml_child,path): \n        \n        if op_name=="snapshot":\n            \n            driver.find_element_by_xpath("//*[@href=\'/baadal/user/"+ str(op_name) +"/"+ str(vm_id) + "\']").click()\n        else:\n            \n            snapshot_id=get_snapshot_id(driver,xml_sub_child,xml_child,vm_name) \n            driver.find_element_by_xpath("//*[@href=\'/baadal/user/"+ str(op_name) +"/"+ str(vm_id) +"/"+ str(snapshot_id) + "\']").click()\n        result=snap_result(driver,xml_sub_child,xml_child,vm_name,vm_id,op_name)\n        if  (result=="Snapshot Limit Reached. Delete Previous Snapshots to take new snapshot.") | (result=="Snapshot request already in queue.") | (result==""):\n            logger.debug(result )\n        else:\n            if xml_sub_child.get("name")in vm_mode_type:\n                operation_name=op_list[op_name]\n                check_vm_task(driver,xml_sub_child,xml_child,vm_name,operation_name)   \n    else:\n    \tlogger.debug(xml_child.get("value") + ":Table does not exists")     \n    return\n    \n\n#performing  delete add_user operation on vm\ndef op_del_user_vm(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    op_name=xml_sub_child.get("op") \n    path=xml_sub_child.get("xpath_user")\n    if isElementPresent(driver,xml_child,path):  \n        user_id=get_user_id(driver,xml_sub_child,xml_child,vm_name) \n        driver.find_element_by_xpath("//*[@href=\'/baadal/admin/"+ str(op_name) +"/"+ str(vm_id) +"/"+ str(user_id) + "\']").click()\n        result="User access is eradicated."\n        field_text=message_flash(driver,xml_sub_child,xml_child)\n        print_result(field_text,result,xml_child)\n        if xml_sub_child.get("name") in vm_mode_type:\n            check_delete_user(driver,user_id,op_name,xml_child,xml_sub_child)\n    else:\n    \tlogger.debug(xml_child.get("value") + ":Table does not exists") \n    return\n            \n\n#checking whether user access removed for a vm or not                        \ndef  check_delete_user(driver,user_id,op_name,xml_child,xml_sub_child):\n    operation_name=op_list[op_name]\n    user_name=execute_query("select concat(first_name,\' \',last_name) as user_name from user where id=%s",(str(user_id))).fetchone()\n    baadal_db.commit()\n    path=xml_sub_child.get("xpath_user")\n    if isTablePresent(driver,xml_child,path):\n        user_table=driver.find_element_by_xpath(path)\n        if user_name[0] in user_table.text:\n            logger.error(xml_child.get("value")  + "User has not been deleted")\n        else:\n            logger.debug(xml_child.get("value")  + "User access is eradicated")\n    else:\n        logger.debug("User access is eradicated")\n    return\n#performing attach disk operation on vm\ndef op_attach_disk(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    op_name=xml_sub_child.get("op")   \n    path="//*[@href=\'/baadal/user/"+ str(op_name) +"/"+ str(vm_id) +"\']" \n    if isElementPresent(driver,xml_child,path):\n    \tdriver.find_element_by_xpath(path).click()\n    \tadd_extra_disk(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    \tfield_text=message_flash(driver,xml_sub_child,xml_child)\n    \tresult=xml_sub_child.get("print")\n    \tprint_result(field_text,result,xml_child)\n    \tif xml_sub_child.get("name")in vm_mode_type:\n        \toperation_name=op_list[op_name]\n        \tcheck_attach_disk(driver,xml_sub_child,xml_child,vm_name,vm_id,operation_name)\n    else:\n\tlogger.debug("No element exist")\n\n#performing migrate operation on vm\ndef op_migrate_vm(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    op_name=xml_sub_child.get("op")\n    path="//*[@href=\'/admin/"+ str(op_name) +"/"+ str(vm_id) +"\']"\n    if isElementPresent(driver,xml_child,path):\n        driver.find_element_by_xpath("//*[@href=\'/admin/"+ str(op_name) +"/"+ str(vm_id) +"\']").click()\n        query_snap=execute_query(xml_sub_child.get("query_snapshot"),str(vm_id)).fetchall()\n        baadal_db.commit()\n        length_snap=len(query_snap)\n        \n        if length_snap!=0:\n            result="Cannot migrate a vm with snapshot(s)"\n            field_text=message_flash(driver,xml_sub_child,xml_child)\n            print_result(field_text,result,xml_child)\n        else:\n            driver.find_element_by_xpath("//input[@value=\'Migrate\']").click()\n            query_status=execute_query("select status from vm_data where id=%s",str(vm_id)).fetchone()\n            baadal_db.commit()\n            \n            if query_status[0]=="2":\n                result="Your VM is already running. Kindly turn it off and then retry!!!"\n                field_text=message_flash(driver,xml_sub_child,xml_child)\n                print_result(field_text,result,xml_child)\n            else:\n                result="Your task has been queued. please check your task list for status. "\n                field_text=message_flash(driver,xml_sub_child,xml_child)\n                print_result(field_text,result,xml_child)\n            if xml_sub_child.get("name")in vm_mode_type:\n                operation_name=op_list[op_name]\n                check_vm_task(driver,xml_sub_child,xml_child,vm_name,operation_name)\n    else:\n        logger.debug("Migrate operation could not performed because no host is available.Please do host up then again try this operation")\n    return\n        \n#performing   operation on vm        \ndef other_operation_on_vm(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    op_name=xml_sub_child.get("op")\n    task_typ=op_list[op_name]\n    query_result=execute_query("select status from task_queue_event where (status=1 or status=2) and task_type=%s and vm_id=%s",(str(task_typ),str(vm_id))).fetchall()\n    \n    baadal_db.commit()\n    xpath=task_path(xml_sub_child)\n    \n    path="//*[@title=\'" + str(xpath) + "\']"\n    print path\n    if isElementPresent(driver,xml_child,path):\n        driver.find_element_by_xpath(path).click()\n        field_text=message_flash(driver,xml_sub_child,xml_child)\n        result=message_in_db(xml_sub_child)\n        print_result(field_text,result,xml_child)\n        if xml_sub_child.get("name") in vm_mode_type:\n            operation_name=op_list[op_name]\n            check_vm_task(driver,xml_sub_child,xml_child,vm_name,operation_name)\n        else:\n            field_text=message_flash(driver,xml_sub_child,xml_child)\n            result=op_list[op_name] + " request already in queue."\n            print_result(field_text,result,xml_child)\n    else:\n        logger.debug(xml_child.get("value") + ":Table does not exists") \n\treturn\n\n#performing  edit vm configuration\ndef op_edit_vm_conf(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    op_name=xml_sub_child.get("op")\n    driver.find_element_by_xpath("//*[@href=\'/baadal/user/"+ str(op_name) +"/"+ str(vm_id) +"\']").click()\n    driver.find_element_by_xpath("//input[@type=\'submit\']").click()\n    result="Your request has been queued!!!"\n    field_text=message_flash(driver,xml_sub_child,xml_child)\n    result=message_in_db(xml_sub_child)\n    print_result(field_text,result,xml_child)\n    return\n\n\ndef task_path(xml_sub_child):\n    op_name=xml_sub_child.get("op")\n    if op_name=="pause_machine":\n        path=\'Pause this virtual machine\'    \n    if op_name=="shutdown_machine":\n        path=\'Gracefully shut down this virtual machine\'\n    if op_name=="start_machine":\n        path=\'Turn on this virtual machine\'    \n    if op_name=="destroy_machine":\n    \tpath=\'Forcefully power off this virtual machine\'\n        \n    if op_name=="resume_machine":\n        path=\'Unpause this virtual machine\'\n    return path\n        \n        \n\t\n#selecting operation to be perform    \ndef click_on_operation(driver,xml_sub_child,xml_child,vm_name,vm_id):   \n    op_name=xml_sub_child.get("op")               \n    if op_name=="user_details":\n        op_user(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    elif op_name=="Delete":\n        op_delete_vm(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    elif op_name in {"revert_to_snapshot","delete_snapshot","snapshot"}:         \n        op_snap_vm(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    elif op_name=="delete_user_vm": \n        op_del_user_vm(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    elif op_name in {"attach_extra_disk","clone_vm"}:\n        op_attach_disk(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    elif op_name=="edit_vm_config":\n        op_edit_vm_conf(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    elif op_name=="migrate_vm":\n        op_migrate_vm(driver,xml_sub_child,xml_child,vm_name,vm_id)  \n    else:\n        other_operation_on_vm(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    return \n    \n# list of operation to be performed     \nop_list={\'revert_to_snapshot\':0,\'delete_snapshot\':1,\'snapshot\':\'Snapshot VM\',\'pause_machine\':\'Suspend VM\',\'Delete\':\'Delete VM\',\'shutdown_machine\':\'Stop VM\',\'destroy_machine\':\'Destroy VM\',\'start_machine\':\'Start VM\',\'user_details\':\'Add User\',\'attach_extra_disk\':"Attach Disk",\'clone_vm\':\'Clone \',\'delete_user_vm\':\'Delete User\',\'adjrunlevel\':\'Adjust Run Level\',\'edit_vm_config\':\'Edit VM Config\',\'resume_machine\':\'Resume VM\',\'migrate_vm\':\'Migrate VM\'}\n\n#message display on screen\ndef message_in_db(xml_sub_child):\n    op_name=xml_sub_child.get("op")\n    if op_name=="user_details":\n        result="User is added to vm" \n    else:\n    \tresult=op_list[op_name] +" request added to queue."\n    \t\n\treturn result\n    \n    \n\n#retreiving message from given xpath        \ndef message_flash(driver,xml_sub_child,xml_child):\n    path=driver.find_element_by_xpath(\'//flash[@id="flash_message"]\')\n    field_text=path.text\n    return field_text\n\n#checking snapshot\ndef snap_result(driver,xml_sub_child,xml_child,vm_name,vm_id,op_name):\n    query_result=execute_query("select * from task_queue_event where task_type=\'Snapshot VM\'  and  vm_name=%s and requester_id!=-1" ,(str(vm_name))).fetchall()\n    \n    query_snap=execute_query(xml_sub_child.get("query_snap"),str(vm_id)).fetchall()\n    baadal_db.commit()\n    \n    length_snap=len(query_result)\n    \n    result=snap_db_result(xml_sub_child,op_name,length_snap, query_snap)\n    field_text=message_flash(driver,xml_sub_child,xml_child)\n    print_result(field_text,result,xml_child)\n    return result\n\n#printing result correspondence to snapshot\ndef snap_db_result(xml_sub_child,op_name,length_snap, query_snap):\n    print query_snap\n    if op_name=="delete_snapshot":\n        result="Your delete snapshot request has been queued"\n    else:\n        if str(length_snap)==xml_sub_child.get("max"):\n            result="Snapshot Limit Reached. Delete Previous Snapshots to take new snapshot."\n        elif query_snap!=():\n            result="Snapshot request already in queue."\n        else :\n            if op_name=="revert_to_snapshot":\n                result="Your revert to snapshot request has been queued"\n            else:\n                result="Your request to snapshot VM has been queued"\n    return result\n\n\n\ndef graph_test_mode(xml_child,xml_sub_child,driver,vm_name,vm_id):\n    ssh.connect(xml_child.get("ip_add"), username=xml_child.get("usrnam"), password=xml_child.get("password"))   \n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_finl_data")+vm_name +xml_sub_child.get("cmd"))\n    initial_data=stdout.readlines()\n    \n    click_on_setting(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    click_on_operation(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    time.sleep(900)\n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_finl_data")+vm_name +xml_sub_child.get("cmd"))\n    final_data=stdout.readlines()\n    fin_data=str(final_data[2])\n    finl_data=fin_data.split()\n    \n    print_graph(finl_data,xml_child)\n\nusername_list=["badalUF","badalUA","badalUO","badalUFA","badalUFO","badalUOA","badalUFOA","badalU","ngoyal"]\n\ndef maintain_idompotency(driver,xml_sub_child,xml_child):\n\n    for username in username_list:\n        usr_id=execute_query("select id from  user where  username=%s",(username)).fetchone()\n        print usr_id[0]\n        user_id=usr_id[0]\n        \n        execute_query("delete from  vm_data where  requester_id=%s",(user_id))\n        baadal_db.commit()\n        execute_query("delete from  request_queue where requester_id=%s",(user_id))\n        baadal_db.commit()\n       \n    return\n\n     \ndef vm_mode(xml_child,xml_sub_child,driver):\n    query_result=execute_query( xml_sub_child.get("query3")).fetchall()\n    print query_result\n    baadal_db.commit()\n    count=0\n    col_count=len(query_result[0])\n    row_count=len(query_result)\n    for length in range(0,(row_count)):\n        username=query_result[length][3]\n        vm_id=query_result[length][1]\n        vm_name=query_result[length][0]\n        status=query_result[length][2]\n        \n        if (str(status)==xml_sub_child.get("status")) & (str(username) in username_list):\n            print username\n            vm_mode_op(xml_child,xml_sub_child,driver,vm_name,vm_id)\n            break\n        else:\n            count+=1\n            \n    if row_count==count: \n        logger.debug(xml_sub_child.get("print_mode"))\n\t\t\t\n       \n    return\n    \n    \ndef vm_mode_op(xml_child,xml_sub_child,driver,vm_name,vm_id):\n    if xml_sub_child.get("task")=="graph":\n        graph_test_mode(xml_child,xml_sub_child,driver,vm_name,vm_id)\n        click_on_setting(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    else:\n        click_on_setting(driver,xml_sub_child,xml_child,vm_name,vm_id)\n        \n        if xml_sub_child.get("name") in {"vm_running_Setting_intgrtn","vm_running_Setting"}:\n            check_snapshot(vm_name,driver,xml_child,xml_sub_child)\n            check_user(driver,xml_child,xml_sub_child,vm_name)\n            \n        click_on_operation(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    return\n\n# Checking data on front end and in back end                                            \n                                               \ndef result_setting_page(field,query_result,driver,xml_child,xml_sub_child):\n    i=0\n    for t in field:\n        print "screen=" + str(t.text)\n        print "db=" + str(query_result[i][0])\n        if str(query_result[i][0]) in t.text:\n            logger.debug("correct inputs")\n        else :\n            logger.debug("Incorrect inputs")\n        i+=1 \n    return\n\n#Checking data in Snapshot table  \n                                                \ndef check_snapshot(vm_name,driver,xml_child,xml_sub_child):\n    logger.debug("Checking for entries in current snapshot table")\n    path=xml_sub_child.get("xpath_snap")\n    if isElementPresent(driver,xml_child,path):\n    \tvm_nam=str(vm_name)\n        query_result=execute_query(xml_sub_child.get("query4"),(vm_nam)).fetchall()\n        baadal_db.commit()\n        total_snap=len(query_result)\n        field=driver.find_elements_by_xpath(path)\n        result_setting_page(field,query_result,driver,xml_child,xml_sub_child)\n        return total_snap\n    else :\n        total_snap=""\n        return total_snap\n        \n \n#Checking data in User table         \n       \ndef check_user(driver,xml_child,xml_sub_child,vm_name):\n    logger.debug("Checking for entries in user table")\n    path=xml_sub_child.get("xpath_user")\n    \n    if isElementPresent(driver,xml_child,path):\n        query_result=execute_query( xml_sub_child.get("query5"),(str(vm_name))).fetchall()\n        baadal_db.commit()\n       \n        field=driver.find_elements_by_xpath(path)\n        logger.debug("Checking for entries in Additional user table")\n        result_setting_page(field,query_result,driver,xml_child,xml_sub_child)\n    else:\n    \tlogger.debug(xml_child.get("value") + ":Table does not exists") \n\n      \n\n   \n\n#Checking data in task table\n\ndef check_vm_task(driver,xml_sub_child,xml_child,vm_name,operation_name):\n    execute_query("FLUSH QUERY CACHE")\n    domain_name=execute_query("select security_domain.name from request_queue,security_domain where  security_domain.id=request_queue.security_domain and  vm_name=%s",(str(vm_name))).fetchone()\n    print domain_name\n    check_domain=execute_query("select vm_id from security_domain,private_ip_pool where security_domain.vlan=private_ip_pool.vlan and security_domain.name=%s",(str(domain_name))).fetchall()\n    print check_domain\n    if operation_name=="Create VM":\n        if "NULL" in check_domain:\n            \n            check_task(driver,xml_sub_child,xml_child,vm_name,operation_name)\n        else:\n           \n            logger.debug(xml_child.get("value")  + ": No Private IP available in " + str(domain_name) + ".")\n            return 0\n    else:\n        check_task(driver,xml_sub_child,xml_child,vm_name,operation_name)\n        \n        \n    return\n\n\n    \n    \ndef check_task(driver,xml_sub_child,xml_child,vm_name,operation_name):\n    print operation_name\n    if operation_name!="Delete VM":\n        current_time=datetime.datetime.now()\n        break_pt_time=current_time + datetime.timedelta(seconds=220) \n        print datetime.datetime.now()\n        print break_pt_time \n        time.sleep(200)\n        count=1\n        while(count):\n            if(datetime.datetime.now()<=break_pt_time):\n                datas=check_vm_in_pending_task(driver,xml_sub_child,xml_child,vm_name,operation_name)\n            \n                if datas!="":\n                    vm_in_pending=datas[0]\n                    if vm_in_pending!="1":\n                        vm_in_complted=check_vm_in_completed_task(driver,xml_child,xml_sub_child,vm_name,operation_name)\n                        if vm_in_complted==1:\n                            logger.debug("VM is in Completed Task Table!!!")\n                            count=0\n                            return 1\n                        else:\n                            vm_in_failed=check_vm_in_failed_task(driver,xml_child,xml_sub_child,vm_name,operation_name)\n                            if vm_in_failed==1:\n                                vm_nam=str(vm_name)\n                                vm_oprtn=str(operation_name)\n                                logger.debug("VM is in Failed Task Table!!!")\n                                error=execute_query("select message from task_queue_event where vm_name=%s and task_type=%s",(vm_nam,vm_oprtn)).fetchone()\n                                count=0\n                                logger.debug("Your VM has not created.Please Check it!!!Its in failed task table!!!")\n                                logger.debug("Reason for failed task :" + str(error))\n                            \n                                return 2  \n                            else:\n                                logger.debug("VM does not exist in any table,please check it!!!")\n                    else:\n                        count=0\n        if (vm_in_pending=="1"):\n            logger.error(xml_child.get("value")  + "VM is in Pending Task Table!!!")    \n            logger.debug("Your Request has not been approved.Please Check it!!!Its in pending task table!!!Either Scheduler is not working or Host is down!!!")\n            return 0\n#retrieving task_start_time\n       \ndef get_task_start_time(driver,xml_sub_child,xml_child,vm_name,operation_name):\n    vm_nam=str(vm_name)\n    vm_oprtn=str(operation_name)\n    execute_query("FLUSH QUERY CACHE")\n    query_result=execute_query(xml_sub_child.get("task_query"),(vm_nam,vm_oprtn)).fetchone()  \n    \n    baadal_db.commit()\n    print  query_result\n    task_start_time=query_result[1]\n    return task_start_time\n       \n#Checking data in Pending task table    \n    \ndef check_vm_in_pending_task(driver,xml_sub_child,xml_child,vm_name,operation_name):\n    datas=""\n    if xml_sub_child.get("id")=="clone_vm":\n        driver.find_element_by_partial_link_text("My Tasks").click()\n    else:\n        driver.find_element_by_partial_link_text("Tasks").click()\n    path="//table[@id=\'pendingtasks\']/tbody/tr"\n    vm_in_pending=0\n    \n    if isTablePresent(driver,xml_child,path):\n    \ttask_start_time=get_task_start_time(driver,xml_sub_child,xml_child,vm_name,operation_name)\n        field=driver.find_elements_by_xpath(path)\n        for x in field:          \n            if (vm_name in x.text) & (operation_name in x.text)  & (str(task_start_time) in x.text): \n                           \n                vm_in_pending=1\n              \n            datas=str(vm_in_pending)+ " " +str(task_start_time) \n    else:\n    \tdatas=str(vm_in_pending)\n    return datas\n\n\n\n#Checking data in Completed task table                      \ndef check_vm_in_completed_task(driver,xml_child,xml_sub_child,vm_name,operation_name):\n    vm_in_complted=0\n    path="//table[@id=\'completedtasks\']/tbody/tr"\n    if isTablePresent(driver,xml_child,path):\n        task_start_time=get_task_start_time(driver,xml_sub_child,xml_child,vm_name,operation_name)\n        driver.find_element_by_partial_link_text("Completed Tasks").click()\n        field=driver.find_elements_by_xpath(path)\n        vm_in_complted=0\n        vm_nam=str(vm_name)\n        for x in field:\n            if (vm_name in x.text) & (operation_name in x.text)  & (str(task_start_time) in x.text):\n                logger.debug("Your request is Completed!!!!")\n                vm_in_complted=1\n    return vm_in_complted\n                \n\n#Checking data in Failed task table  \t\t\ndef check_vm_in_failed_task(driver,xml_child,xml_sub_child,vm_name,operation_name):\n    vm_in_failed=0\n    path="//table[@id=\'failedtasks\']/tbody/tr"\n    if isTablePresent(driver,xml_child,path):\n        task_start_time=get_task_start_time(driver,xml_sub_child,xml_child,vm_name,operation_name)\n        driver.find_element_by_partial_link_text("Failed Tasks").click()\n        field=driver.find_elements_by_xpath("//table[@id=\'failedtasks\']/tbody/tr")\n        vm_in_failed=0\n        for x in field:\n            if (vm_name in x.text) & (operation_name in x.text)  & (str(task_start_time) in x.text):\n                logger.error(xml_child.get("value")  + "Your request is Failed!!!!")\n                vm_in_failed=1       \n    return vm_in_failed\n\n\n\n#checking data in attach_disk table\n\ndef check_attach_disk(driver,xml_sub_child,xml_child,vm_name,vm_id,operation_name):  \n    driver.find_element_by_partial_link_text("Pending Requests").click()\n    driver.find_element_by_partial_link_text("Attach Disk").click()\n    field=driver.find_elements_by_xpath("//table[@id=\'sortTable2\']/tbody/tr")\n    qery_result=execute_query(\'select id,vm_name from request_queue where status=4 and vm_name=%s order by start_time desc\',(str(vm_name))).fetchone()\n    baadal_db.commit()\n    if qery_result!=():\n        query_result=execute_query(\'select id,vm_name from request_queue where status=4 and vm_name=%s order by start_time desc\',(str(vm_name))).fetchone() \n        baadal_db.commit()\n        vm_ids= query_result[0]\n        if xml_sub_child.get("action")=="approve_request":    \n            driver.find_element_by_xpath("//*[@href=\'/admin/approve_request/"+ str(vm_ids) +"\']").click()        \n    else:\n        \n        driver.find_element_by_xpath("//*a[@href=\'/admin/reject_request/"+ str(vm_ids) +"\']").click()\n       \n    return\n    \n# providing connection to all host exists\ndef conn_host(host_name,vm_status,vm_name,message,total_vm):\n    \n    query_result=execute_query("select host_name,host_ip from host").fetchall()\n    no_of_cols=len(query_result)#calculate number of columns of query\n    baadal_db.commit()\n    for host in range(0,no_of_cols):\n        host_nam=query_result[host][0]\n        host_ip=query_result[host][1]\n        \n        conn = libvirt.open("qemu+ssh://root@" +str(host_ip)+ "/system")\n        for id in conn.listDomainsID():\n            dom = conn.lookupByID(id)\n            infos = dom.info()\n            status=infos[0]\n            status_vm=check_vm_status_on_host(status)\n            print_sanity_result(status_vm,host_name,vm_status,vm_name,message,total_vm,host_ip,host_nam)\n        for vm in conn.listDefinedDomains():\n            status_vm="Off"\n            print_sanity_result(status_vm,host_name,vm_status,vm_name,message,total_vm,host_ip,host_nam)\t   \n\n\n\n#checking data in sanity table\ndef print_sanity_result(status_vm,host_name,vm_status,vm_name,message,total_vm,host_ip,host_nam):\n    for i in range(0,total_vm):\n        vm_nm=vm_name[i]\n        if ((vm_nm==vm_name[i]) & (host_nam==host_name[i])):\n            messg=check_messg_in_db(vm_nm,host_ip,host_nam)\n            if vm_nm==vm_name[i]:\n                logger.debug(\'host=\'+vm_nm)\n                logger.debug(\'screen=\'+vm_name[i])\n                logger.debug(\'Result:correct input\')\n            else:\n                logger.debug(\'host=\'+vm_nm)\n                logger.debug(\'screen=\'+vm_name[i])\n                logger.debug(\'Result:Incorrect input\')\n                \n            if status_vm==vm_status[i]:\n                logger.debug(\'host=\'+status_vm)\n                logger.debug(\'screen=\'+vm_status[i])\n                logger.debug(\'Result:correct input\')\n            else:\n                logger.debug(\'host=\'+status_vm)\n                logger.debug(\'screen=\'+vm_status[i])\n                logger.debug(\'Result:Incorrect input\')\n                \t\n            if messg==message[i]:\n                logger.debug(\'host=\'+messg)\n                logger.debug(\'screen=\'+message[i])\n                logger.debug(\'Result:correct input\')\n            else:\n                logger.debug(\'host=\'+messg)\n                logger.debug(\'screen=\'+message[i])\n                logger.debug(\'Result:Incorrect input\')\n                \n            if host_nam==host_name[i]:\n                logger.debug(\'host=\'+host_nam)\n                logger.debug(\'screen=\'+host_name[i])\n                logger.debug(\'Result:correct input\')\n            else:\n                logger.debug(\'host=\'+host_nam)\n                logger.debug(\'screen=\'+host_name[i])\n                logger.debug(\'Result:Incorrect input\')\n\n\n\n#converting vm status bits on host into status text\t\t\ndef check_vm_status_on_host(status):\n\tif status==1:\n\t\tstatus_vm="Running"\n\tif status==3:\n\t\tstatus_vm="Paused"\n\treturn status_vm\n\n\t\n#checking whether data in sanity table is correct or incorrect    \ndef check_messg_in_db(vm_nm,host_ip,host_nam):    \n    fetch_result=execute_query(" select vm_name,vm_data.status from vm_data,host where vm_data.host_id=host.id and host_ip=%s",(str(host_ip))).fetchall()\n    \n    no_vm_in_db=len(fetch_result)\n    baadal_db.commit()\n    if fetch_result!=():\n        for j in range(0,no_vm_in_db):\n            if vm_nm==fetch_result[j][0]:\n                vm_in_db="True"\n                messg="VM is on expected host "+host_nam\n            else:\n                vm_in_db="False"\n                messg="Orphan, VM is not in database"\n       \n    else:\n        messg="Orphan, VM is not in database"                \n    return messg\n##############################################################################################################\n#  \t\t\t\t\t           functions for various types of input fields  \t\t\t\t          \t     #\n##############################################################################################################\n\t\t\ndef isInput(driver, xml_sub_child):\n    current_time=datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")\n    field = driver.find_element_by_id(xml_sub_child.get("id"))\n    if xml_sub_child.text!=None:\n        field.send_keys(xml_sub_child.text) # sending the user name/password/vm name/purpose etc\n    else:\n        if not (xml_sub_child.get("id") in ["user_password","user_username"]):\n            field.send_keys(str(current_time))\t\n    return current_time\n\ndef\tisInput_add(driver, xml_sub_child):\n    field = driver.find_element_by_id(xml_sub_child.get("user_id"))\n    field.send_keys(xml_sub_child.get("user_id_data"))\n    return\n\ndef isReadOnly(driver, xml_parent,xml_child,xml_sub_child):\n    current_time=datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")\n    field = driver.find_element_by_id(xml_sub_child.get("id"))\n    if field.get_attribute("value")!=\'\':\n        field.send_keys(xml_sub_child.text) # sending the user name/password/vm name/purpose etc\n        if field.get_attribute("value")==xml_sub_child.text:\n            logger.debug(xml_child.get("value")  +\': Result:error\') #logging the report\n        else:\n            logger.debug(xml_child.get("value")  +\': Result:no error\') #logging the report\n    else:\n        logger.debug(xml_child.get("value")  +\': Result:empty\') #logging the report\n    return \n\ndef isWait( driver, xml_parent, xml_child, xml_sub_child):\n    if xml_sub_child.get("id")=="wait":\n        time.sleep(300)\n    else:\n        time.sleep(3)\n    return\n\ndef isSubmit( driver, xml_parent, xml_child, xml_sub_child):\n    driver.find_element_by_xpath(xml_sub_child.text).click()\n    time.sleep(10)    \n    if xml_sub_child.get("id")=="check_data":\n        xpath=xml_sub_child.get("xpath")\n        status=isElementPresent(driver,xml_child,xpath)\n\n        if status==1:\n            logger.debug(str(xml_child.get("value")) +": Correct data")\n        else:\n            logger.debug(str(xml_child.get("value")) +": Incorrect data")\n    return\n\t\n\t\t\t\ndef isButton_add(driver, xml_sub_child,value):\n    driver.find_element_by_xpath(value).click()\n    \n    return\n\n\ndef isClear(driver,xml_sub_child) :\n\tdriver.find_element_by_id(xml_sub_child.get("id")).clear()\t\n\treturn\n\t\ndef isScroll(driver, xml_sub_child):\n\tfield=driver.find_element_by_tag_name("html")\n\tfield.send_keys(xml_sub_child.text)\n\tdriver.execute_script("window.scrollBy(0,200)", "")\n\treturn\n\t\ndef isHref(driver, xml_sub_child,xml_child):\n    driver.find_element_by_partial_link_text(xml_sub_child.text).click()\n    if xml_sub_child.get("id")=="collaborator":\n        xpath=xml_sub_child.get("xpath")\n        if isElementPresent(driver,xml_child,table_path):\n         \n            field=driver.find_element_by_xpath(xpath)    \n            result=xml_sub_child.get("result")\n            field_text=field.get_attribute("innerHTML")\n            print_result(field_text,result,xml_child)\n        else:\n            logger.error(xml_child.get("value")  + ": Error in the form")\n\treturn\n\ndef isSelect(driver, xml_sub_child):\n\tdriver.find_element_by_xpath(xml_sub_child.text).click()\n\treturn\n\ndef isImage(driver,xml_child,xml_sub_child,a):\t\n    if isElementPresent(driver,xml_child,a):\n        vm_mode(xml_child,xml_sub_child,driver)\n    else:\n    \tlogger.debug(xml_child.get("value") + ":No VM exists.So,to perform this operation please create a VM.")\n    return \n    \ndef isTable(driver,xml_parent,xml_child,xml_sub_child):\n    status_list={0:"Error",1:"failed_tasks",2:"TRY AGAIN | IGNORE",3:"my_pending_vm",4:"admin_pending_attach_disk",5:"pending_user_install_vm",6:"pending_user_clone_vm",7:"pending_user_attach_disk",8:"pending_user_edit_conf",9:"host_and_vm",10:"Configure_host",11:"admin_pending_clone_vm",12:"admin_pending_install_vm" ,13:\'Configure_security\',14:\'pending_fac_install_vm\',15:\'pending_org_install_vm\',16:\'pending_org_clone_vm\',17:\'pending_org_attach_disk\',18:\'pending_org_edit_conf\',19:"admin_pending_edit_conf" ,20:\'list_my_vm\',21:\'fac_pending_attach_disk\',22:\'list_all_org_vm\',23:\'setting\'}\n    \n    table_path=xml_sub_child.text       \n    if isTablePresent(driver,xml_child,table_path):\n        \n        cur=execute_query( xml_child.get("query3"))\n        query_result=cur.fetchall()\n        \n        cur.close()\n        field=driver.find_elements_by_xpath(xml_sub_child.text)#data from gui\n        if query_result!=():\n            length=len(query_result[0])#calculate number of columns of query\n            length_row=len(query_result)#calculate number of columns of query\n        else:\n            length=0\n            length_row=0\n        row_count=0 #number of rows in the table\n        col_count=0 #number of columns in the table\n        \n        \n        \n        count=0\n        for col in field:\n            field_text=col.text\n           \n            if field_text!="":\n                count=count+1\n        print count\n        \n        total=length_row*length\n        print total\n        if ((str(total)==str(count))) :\n            for col in field:\n                field_text=col.text\n                if (field_text!=""):\n            \n                    if field_text==status_list[0]:\n                        text=open_error_page(driver,xml_parent,xml_child,field_text,row_count)\n                        result=query_result[row_count][col_count]#data form query\n                        print_result(text,result,xml_child)\n                    \n                    elif (query_result[row_count][col_count]==4) & (xml_parent.get("name")==status_list[1]):\n                        result=status_list[2]\n                        print_result(field_text,result,xml_child)\n                    \n                    elif (col_count%int(length)==7) & ( (xml_parent.get("name")==status_list[22]) |  (xml_parent.get("name")==status_list[20])):\n                    \tstatus=query_result[row_count][col_count]\n                        result=admin_vm_status(status)\n                        print result\n                        print_result(field_text,result,xml_child)\n                    \n                    elif ((col_count%int(length)==3) & ( (xml_parent.get("name")==status_list[14]) | (xml_parent.get("name")==status_list[15]) | (xml_parent.get("name")==status_list[21]) | (xml_parent.get("name")==status_list[16]) | (xml_parent.get("name")==status_list[17]))) | (col_count%int(length)==4) & ((xml_parent.get("name")==status_list[4]) | (xml_parent.get("name")==status_list[7]) | (xml_parent.get("name")==status_list[6]) | (xml_parent.get("name")==status_list[5]) | (xml_parent.get("name")==status_list[11])) | ((col_count%int(length)==5) & (\n                    (xml_parent.get("name")==status_list[12])  | (xml_parent.get("name")==status_list[22] ))) :\n                        ram=query_result[row_count][col_count]\n                        result=check_vm_ram(ram)\n                        print_result(field_text,result,xml_child) \n                    \n                    elif (col_count%int(length)==4) & ( (xml_parent.get("name")==status_list[14]) | (xml_parent.get("name")==status_list[15]) )  | ((col_count%int(length)==6) & (xml_parent.get("name")==status_list[12])) | (col_count%int(length)==5) & (xml_parent.get("name")==status_list[5]) :\n                        extra_disk=query_result[row_count][col_count]\n                        result=check_extra_disk(extra_disk)\n                        print_result(field_text,result,xml_child)   \n                    \n\n                    elif (((col_count%int(length)==4) |  (col_count%int(length)==5) | (col_count%int(length)==6 )) &  (xml_parent.get("name")==status_list[17]) | (xml_parent.get("name")==status_list[21]) ) |  ((col_count%int(length)==4) & (xml_parent.get("name")==status_list[16])) | ((col_count%int(length)==5) & ((xml_parent.get("name")==status_list[11]) | (xml_parent.get("name")==status_list[6]))) | ((col_count%int(length)==7) & (xml_parent.get("name")==status_list[4]))  | (((col_count%int(length)==7) |  (col_count%int(length)==5) | (col_count%int(length)==6 )) & ((xml_parent.get("name")==status_list[7]) | (xml_parent.get("name")==status_list[4]))) | (((col_count%int(length)==1) |  (col_count%int(length)==2)) &  (xml_parent.get("name")==status_list[23])):\n                        mem=query_result[row_count][col_count]\n                        result=check_mem(mem)\n                        print_result(field_text,result,xml_child)  \n                 \n                    elif (((col_count%int(length)==8)| (col_count%int(length)==9)) & (xml_parent.get("name")==status_list[4])) | (((col_count%int(length)==7) | (col_count%int(length)==8)) & (xml_parent.get("name")==status_list[11])) | (((col_count%int(length)==8) | (col_count%int(length)==9)) & (xml_parent.get("name")==status_list[12])):\n                        logger.debug("correct entries")\n                    \n                    elif (col_count%int(length)==4) & (xml_parent.get("name")==status_list[13]):\n                        status=query_result[row_count][col_count]\n                        result=check_security_visibilty(status)\n                        print_result(field_text,result,xml_child)\n                    \n                    elif (col_count%int(length)==2) & (xml_parent.get("name")==status_list[10]):\n                        status=query_result[row_count][col_count]\n                        result=host_status(status)\n                        print_result(field_text,result,xml_child)   \n                     \n                    elif (col_count%int(length)==7) & ( (xml_parent.get("name")==status_list[5]) | (xml_parent.get("name")==status_list[6])) | ((col_count%int(length)==8) & ((xml_parent.get("name")==status_list[23]) | (xml_parent.get("name")==status_list[7]))):\n                        status=query_result[row_count][col_count]\n                        result=user_vm_status(status)\n                        print_result(field_text,result,xml_child)  \n                        \n                    elif (col_count%int(length)==2) & ( (xml_parent.get("name")==status_list[17]) | (xml_parent.get("name")==status_list[21]) | (xml_parent.get("name")==status_list[14]) | (xml_parent.get("name")==status_list[15])) | ((col_count%int(length)==5) &  (xml_parent.get("name")==status_list[16])) | ((col_count%int(length)==6) &  ((xml_parent.get("name")==status_list[11])  | (xml_parent.get("name")==status_list[22]) | (xml_parent.get("name")==status_list[6]))) | ((col_count%int(length)==3) & ( (xml_parent.get("name")==status_list[4]) | (xml_parent.get("name")==status_list[7]) | (xml_parent.get("name")==status_list[5]))) | ((col_count%int(length)==4) &  (xml_parent.get("name")==status_list[12])) | ( (col_count%int(length)==3)  &  (xml_parent.get("name")==status_list[23])):\n                        status=query_result[row_count][col_count]\n                        result=check_vcpu(status)\n                        print_result(field_text,result,xml_child)  \n                        \n                    elif ((col_count%int(length)==6) & (xml_parent.get("name")==status_list[14])) | ( (col_count%int(length)==7) & (xml_parent.get("name")==status_list[21])):\n                        owner_name_db=query_result[row_count][col_count]\n                        owner_name_screen=xml_child[0].text\n                        print owner_name_db\n                        print owner_name_screen\n                        result=faculty_vm_status(owner_name_db,owner_name_screen,xml_child)\n                        print_result(field_text,result,xml_child)     \n                    \n                    elif (col_count%int(length)==6) & ((xml_parent.get("name")==status_list[15]) | (xml_parent.get("name")==status_list[16]) ) | ((col_count%int(length)==7) &  (xml_parent.get("name")==status_list[17])):\n                    \tstatus=query_result[row_count][col_count]\n                        print status\n                    \tresult=org_task_status(status,xml_child)\n                        print result\n                    \tprint_result(field_text,result,xml_child)\n                        \n                    elif (col_count%int(length)==1) & (xml_parent.get("name")==status_list[12]):\n                        vm_name=query_result[row_count][4]\n                        query_results=execute_query( xml_sub_child.get("query_collbtr"),(str(vm_name))).fetchall()\n                        len_query=len(query_results)\n                        if query_results!="None":\n                            for m in range(0,len_query):\n                                result=query_results[m][0]\n                                print_result(field_text,result,xml_child)\n                        else:\n                            logger.debug(xml_child.get("value") +\': Result:correct input\')\t\t\n                    else:\n                        result=query_result[row_count][col_count]\n                        print_result(field_text,result,xml_child)\n                    col_count+=1\n                    if col_count%int(length)==0:\n                        row_count+=1\n                        col_count=0\t\n        else:\n            logger.error(xml_child.get("value")  + "Error:tuple out of index")\n    else:\n    \tlogger.debug(xml_child.get("value") + ":Table does not exists")\n    return\n\ndef faculty_vm_status(owner_name_db,owner_name_screen,xml_child):\n\tuser_name=xml_child[0].text\n\tprint user_name\n\tif owner_name_screen==str(owner_name_db):\n\t\tresult="Approve  |  Reject | Edit"\n\telse:\n\t\tresult="Remind Faculty"\n\treturn result\n\ndef user_vm_status(status):\n\tif (status==1) | (status==4):\n\t\tresult="Waiting for admin approval"\n\tif status==2:\n\t\tresult="Approved. In Queue."\n\tif status==3:\n\t\tresult=" Waiting for org admin approval"\n\tif status==-1:\n\t\tresult=\'Task failed. Contact administrator.\'\n\treturn result\n\t\n\t\n#converting port status bits into status text\ndef check_port_enabled(vm_name):\n    query_result=execute_query("select enable_ssh,enable_http from request_queue where vm_name=%s",(str(vm_name))).fetchall()\n    baadal_db.autocommit(True)\n    enable_ssh=query_result[0][0]\n    enable_http=query_result[0][1]\n    if (enable_ssh=="F") & (enable_http=="F"):\n        result="-"\n    if (enable_ssh=="T") & (enable_http=="F"):\n        result="SSH"\n    if (enable_ssh=="F") & (enable_http=="T"):\n        result="HTTP"\n    if (enable_ssh=="T") & (enable_http=="T"):\n        result="SSH,HTTP"\n    return result\n\n\n\n\n#converting security visibility status bits into status text\ndef check_security_visibilty(status):\n    if status=="T":\n        result="ALL"\n    else:\n        result="NO"\n    return result\n\n\n#converting vCPU status bits into status text\ndef check_vcpu(status):\n\tstatus=str(status) + " CPU"\n\treturn status\n\n\n\n#converting memory bits into  text\ndef check_mem(mem):\n    if mem==0:\n        result="-"\n    else:\n        result=str(mem)+"GB"\n    return result\n    \n\n#converting extra disk bits into  text\ndef check_extra_disk(extra_disk):\n    if extra_disk==0:\n        result="80GB"\n    else:\n        result="80GB + " + str(extra_disk) + "GB" \n    return result\n\n#converting ram bits into  text\ndef check_vm_ram(ram):\n    if ram==256:\n        result="0.25GB"\n    if ram==512:\n        result="0.50GB"\n    if ram==1024:\n        result="1.0GB"\n    if ram==2048:\n        result="2.0GB"\n    if ram==4096:\n        result="4.0GB"\n    if ram==8192:\n        result="8.0GB"\n    if ram==16384:\n        result="16.0GB"\n    return result\n\n\n\n#checking data into host table\ndef isCheckTable(driver, xml_parent, xml_child, xml_sub_child):\n    field=driver.find_elements_by_xpath(xml_sub_child.get("path"))\n    query_result=execute_query(xml_parent.get("query3")).fetchall()\n    baadal_db.autocommit(True)\n    \n    length=len(query_result[0])#calculate number of columns of query\n    length_row=len(query_result)#calculate number of columns of query\n    table=0\n    count=0\n    for col in field:\n\t\tfield_text=col.text \n\t\tprint field_text  \n\t\tif field_text!="":\n\t\t\tcount=count+1\n\t\t\t\n    total=length_row*length\n    print total\n    if (str(total)==str(count)):\n        for header in field:\n            host_ip=query_result[table][0]\n            if query_result[table][0] in header.text:\n                table_path=xml_sub_child.text\n                if isTablePresent(driver,xml_child,table_path):\n                    result_fetch=execute_query(xml_parent.get("query4"),str(host_ip)).fetchall()\n                    baadal_db.autocommit(True)\n                    if result_fetch!=():\n                        field=driver.find_elements_by_xpath(xml_sub_child.text)\n                        \n                          \n                    \tno_of_rows=len(result_fetch)#calculate number of rows of query\n                    \tno_of_cols=len(result_fetch[0])#calculate number of columns of query\n                    \t\n                    \tcont=0\n                    \tfor col in field:\n\t\t\t\t\t\t\tfield_text=col.text \n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif field_text!="":\n\t\t\t\t\t\t\t\tcont=cont+1\n                        \n                        total=no_of_cols\n                        \n                    \t\n                    \trow_count=0\n                    \tcol_count=0\n                    \tif (str(total)==str(cont)):\n                    \t\t\n                    \t\tfor col in field:\n                        \t\tfield_text=col.text\n                                \n                                if field_text!="":\n                                    \n                                    if col_count%int(no_of_cols)==5:\n                                        status=result_fetch[row_count][col_count]\n                                        result=admin_vm_status(status)\n                                    else:\n                                \t\tresult=result_fetch[row_count][col_count]\n                                    print_result(field_text,result,xml_child)\n                                    col_count+=1\n                                    if col_count%int(no_of_cols)==0:\n                                \t\trow_count+=1\n                                \t\tcol_count=0\t\n                                \n                        else:\n                            logger.error(xml_child.get("value") +":tuple out of index")\n                            \n                else:\n                    logger.debug("No VM Exists on "+str(host_ip))\n                table=table+1\n    else:\n        logger.error(xml_child.get("value") + ":incorrect data")\n    return\n\n\n#approving or rejecting vm operations   \ndef isCheckdata(driver,xml_parent, xml_child, xml_sub_child,vm_name):\n    \n    table_path=xml_sub_child.text\n    if isTablePresent(driver,xml_child,table_path):\n    \n    \tflag=0\n        field=driver.find_elements_by_xpath(xml_sub_child.text)#data from gui\n        if  xml_sub_child.get("data")=="integeration":\n            vm_nam=str(vm_name)\n            print vm_name\n            execute_query("FLUSH QUERY CACHE")\n            query_result=execute_query(xml_sub_child.get("query3"),(vm_nam)).fetchone()\n            print  query_result\n            baadal_db.commit()\n            db_conn=db_connection()\n            cur=db_conn.cursor()\n            cur.execute(xml_sub_child.get("query3"),(vm_nam))\n            \n            cur.close()\n            \n\t    \n            result=query_result[0]\n            print result\n            \n            \n        else:\n            execute_query("FLUSH QUERY CACHE")\n            query_result=execute_query(xml_sub_child.get("query3")).fetchone()\n            print  query_result\n            db_conn=db_connection()\n            cur=db_conn.cursor()\n            cur.execute(xml_sub_child.get("query3")) \n            \n            cur.close()\n                \n            result=query_result[0]\n            print result\n            \n        for a in field:\n            row=a.text\n            op_id=xml_sub_child.get("id")\n            if vm_name!="":\n            \t\n                if ("Approve  |  Reject  |  Edit" in row) :\n                    \n                    check_operation(driver,xml_parent, xml_child, xml_sub_child,op_id,result)\n                    break\n                else:\n                \tflag=1\n                if  (op_id=="admin"):\n                    op_id="admin"\n                    check_operation(driver,xml_parent, xml_child, xml_sub_child,op_id,result)\n                    break\n               \n            else:\n                if ("Approve  |  Reject  |  Edit" in row & str(vm_name) in row) | (op_id=="admin") :\n                \n                    check_operation(driver,xml_parent, xml_child, xml_sub_child,op_id,result)\n                    break\n                else:\n                \tflag=1\n                   \n\t\tif flag:\n\t\t\tlogger.debug("No VM requests available to perform this testing.So,please create a VM before doing this testing.")\n    return\n\n\ndef check_operation(driver,xml_parent, xml_child, xml_sub_child,op_id,result):\n    request=xml_sub_child.get("click")\n    \n    \n    print "//*[@href=\'/baadal/" + str(op_id) + "/" +str(request)+ "/" + str(result) + "\']"\n    driver.find_element_by_xpath("//*[@href=\'/baadal/"+ str(op_id) +"/"+str(request)+"/"+str(result) +"\']").click()\n    result=xml_sub_child.get("print_data")\n    field_text=message_flash(driver,xml_sub_child,xml_child)\n    print_result(field_text,result,xml_child)\n    return\n\n\ndef isSanityCheck(driver, xml_parent, xml_child, xml_sub_child):\n  \n    field=driver.find_elements_by_xpath("//div[@id=\'sanity_check_table\']/table/tbody/tr/td")\n#print field.text\n    row_count=0\n    col_count=0\n    host_name=[]\n    vm_status=[]\n    vm_name=[]\n    message=[]\n    operation=[]\n    for col in field:\n        field_text=col.text\n        if col_count%5==0:\n            host_name.insert(row_count,field_text)\n           \n        if col_count%5==1:\n            vm_status.insert(row_count,field_text)\n           \n        if col_count%5==2:\n            vm_name.insert(row_count,field_text)\n           \n        if col_count%5==3:\n            message.insert(row_count,field_text)\n           \n        if col_count%5==4:\n            operation.insert(row_count,field_text)\n           \n        if col_count%5==0:\n            \n            row_count+=1\n            col_count=0\t\n        col_count+=1\n       \n    total_vm=len(vm_name)  \n    \n    conn_host(host_name,vm_status,vm_name,message,total_vm)\n\n\ndef testing():\n    for i in range(1,112):\n        print i\n        num=str(i)\n        test_scripts(num)\n    num=\'127\'\n    test_scripts(num)\n    return\n\ntesting()\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__module__'
p12
S"'httplib'"
p13
sS'__getslice__'
p14
S"<method-wrapper '__getslice__' of BadStatusLine object>"
p15
sS'__str__'
p16
S"<method-wrapper '__str__' of BadStatusLine object>"
p17
sS'__reduce__'
p18
S'<built-in method __reduce__ of BadStatusLine object>'
p19
sS'__dict__'
p20
S'{\'line\': "\'\'"}'
p21
sS'__sizeof__'
p22
S'<built-in method __sizeof__ of BadStatusLine object>'
p23
sS'__weakref__'
p24
S'None'
p25
sS'__init__'
p26
S'<bound method BadStatusLine.__init__ of BadStatusLine("\'\'",)>'
p27
sS'__setattr__'
p28
S"<method-wrapper '__setattr__' of BadStatusLine object>"
p29
sS'__reduce_ex__'
p30
S'<built-in method __reduce_ex__ of BadStatusLine object>'
p31
sS'__new__'
p32
S'<built-in method __new__ of type object>'
p33
sS'__format__'
p34
S'<built-in method __format__ of BadStatusLine object>'
p35
sS'__class__'
p36
S"<class 'httplib.BadStatusLine'>"
p37
sS'__doc__'
p38
S'None'
p39
sS'__getitem__'
p40
S"<method-wrapper '__getitem__' of BadStatusLine object>"
p41
sS'__setstate__'
p42
S'<built-in method __setstate__ of BadStatusLine object>'
p43
sS'__getattribute__'
p44
S"<method-wrapper '__getattribute__' of BadStatusLine object>"
p45
sS'args'
p46
S'("\'\'",)'
p47
sS'__subclasshook__'
p48
S'<built-in method __subclasshook__ of type object>'
p49
sS'line'
p50
S'"\'\'"'
p51
sS'__unicode__'
p52
S'<built-in method __unicode__ of BadStatusLine object>'
p53
sS'__delattr__'
p54
S"<method-wrapper '__delattr__' of BadStatusLine object>"
p55
sS'__repr__'
p56
S"<method-wrapper '__repr__' of BadStatusLine object>"
p57
sS'__hash__'
p58
S"<method-wrapper '__hash__' of BadStatusLine object>"
p59
ssS'evalue'
p60
S"''"
p61
sS'request'
p62
cgluon.html
XML_unpickle
p63
(S's\xf6]\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">ajax</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">application</td><td style="vertical-align:top;">:</td><td><div>newapp</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cid</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">client</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">controller</td><td style="vertical-align:top;">:</td><td><div>default</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_admin</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-ad9d9ab8-bebf-45d2-ada2-68017adaec72<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_newapp</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-bdd945f5-2680-4708-ab2e-fccfee18e3f9<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_testapp_24</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-c97a39f9-f02a-4386-bebe-4fcce0add5ef<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_welcome</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-92a2bfec-c238-4a51-ae3a-f875c79301d9<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">env</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_ENCODING</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_LANGUAGE</td><td style="vertical-align:top;">:</td><td><div>en-US,en;q=0.5</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONNECTION</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_COOKIE</td><td style="vertical-align:top;">:</td><td><div>session_id_welcome=127.0.0.1-92a2bfec-c238-4a51-ae3a-f875c79301d9; session_id_testapp_24=127.0.0.1-c97a39f9-f02a-4386-bebe-4fcce0add5ef; session_id_newapp=127.0.0.1-bdd945f5-2680-4708-ab2e-fccfee18e3f9; session_id_admin=127.0.0.1-ad9d9ab8-bebf-45d2-ada2-68017adaec72</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_HOST</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_USER_AGENT</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:16.0) Gecko/20100101 Firefox/16.0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">PATH_INFO</td><td style="vertical-align:top;">:</td><td><div>/newapp/default/unit_testing</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">QUERY_STRING</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_ADDR</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_PORT</td><td style="vertical-align:top;">:</td><td><div>35238</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_METHOD</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SCRIPT_NAME</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_NAME</td><td style="vertical-align:top;">:</td><td><div>ubuntu</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PORT</td><td style="vertical-align:top;">:</td><td><div>8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PROTOCOL</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_SOFTWARE</td><td style="vertical-align:top;">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/home/nalini/Desktop/web2py/applications/welcome/&#x27;, &#x27;/home/nalini/Desktop/web2py/applications/newapp/&#x27;, &#x27;/home/nalini/Desktop/web2py/applications/admin/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/home/nalini/Desktop/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_options</td><td style="vertical-align:top;">:</td><td><div>&lt;Values at 0xa9dad0c: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;with_scheduler&#x27;: False, &#x27;ips&#x27;: [&#x27;127.0.1.1&#x27;], &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;port&#x27;: 8000, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;ubuntu&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;/home/nalini/Desktop/web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;profiler_dir&#x27;: None, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;interfaces&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;scheduler_groups&#x27;: None, &#x27;password&#x27;: &#x27;&lt;ask&gt;&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/home/nalini/Desktop/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_encoding</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_language</td><td style="vertical-align:top;">:</td><td><div>en-US,en;q=0.5</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_connection</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_cookie</td><td style="vertical-align:top;">:</td><td><div>session_id_welcome=127.0.0.1-92a2bfec-c238-4a51-ae3a-f875c79301d9; session_id_testapp_24=127.0.0.1-c97a39f9-f02a-4386-bebe-4fcce0add5ef; session_id_newapp=127.0.0.1-bdd945f5-2680-4708-ab2e-fccfee18e3f9; session_id_admin=127.0.0.1-ad9d9ab8-bebf-45d2-ada2-68017adaec72</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_host</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_user_agent</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:16.0) Gecko/20100101 Firefox/16.0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>ubuntu.iitd.ernet.in</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>ubuntu</div></td></tr><tr><td><div>127.0.1.1</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path_info</td><td style="vertical-align:top;">:</td><td><div>/newapp/default/unit_testing</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">query_string</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_addr</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_port</td><td style="vertical-align:top;">:</td><td><div>35238</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_method</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_uri</td><td style="vertical-align:top;">:</td><td><div>/newapp/default/unit_testing</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">script_name</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_name</td><td style="vertical-align:top;">:</td><td><div>ubuntu</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_port</td><td style="vertical-align:top;">:</td><td><div>8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_protocol</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_software</td><td style="vertical-align:top;">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_path</td><td style="vertical-align:top;">:</td><td><div>/home/nalini/Desktop/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.9.4-stable+timestamp.2014.03.05.04.44.09</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0xb78870d0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0xa9a33bc&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.input</td><td style="vertical-align:top;">:</td><td><div>&lt;socket._fileobject object at 0xb3a3c2c&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multithread</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0xb78870d0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0xa9a33bc&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_input</td><td style="vertical-align:top;">:</td><td><div>&lt;socket._fileobject object at 0xb3a3c2c&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multithread</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">extension</td><td style="vertical-align:top;">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">folder</td><td style="vertical-align:top;">:</td><td><div>/home/nalini/Desktop/web2py/applications/newapp/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">function</td><td style="vertical-align:top;">:</td><td><div>unit_testing</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">global_settings</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/home/nalini/Desktop/web2py/applications/welcome/&#x27;, &#x27;/home/nalini/Desktop/web2py/applications/newapp/&#x27;, &#x27;/home/nalini/Desktop/web2py/applications/admin/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/home/nalini/Desktop/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_options</td><td style="vertical-align:top;">:</td><td><div>&lt;Values at 0xa9dad0c: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;with_scheduler&#x27;: False, &#x27;ips&#x27;: [&#x27;127.0.1.1&#x27;], &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;port&#x27;: 8000, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;ubuntu&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;/home/nalini/Desktop/web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;profiler_dir&#x27;: None, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;interfaces&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;scheduler_groups&#x27;: None, &#x27;password&#x27;: &#x27;&lt;ask&gt;&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/home/nalini/Desktop/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>ubuntu.iitd.ernet.in</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>ubuntu</div></td></tr><tr><td><div>127.0.1.1</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.9.4-stable+timestamp.2014.03.05.04.44.09</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_https</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_local</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_restful</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">now</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2014, 3, 21, 10, 7, 17, 681558)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_args</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_extension</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">url</td><td style="vertical-align:top;">:</td><td><div>/newapp/default/unit_testing</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">utcnow</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2014, 3, 21, 4, 37, 17, 681581)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uuid</td><td style="vertical-align:top;">:</td><td><div>newapp/127.0.0.1.2014-03-21.10-07-17.45decac3-9cee-4d50-a489-d642d3f35277</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi</td><td style="vertical-align:top;">:</td><td><div>&lt;gluon.main.LazyWSGI object at 0xad3a3acc&gt;</div></td></tr></table></div>'
tRp64
sS'frames'
p65
(lp66
(dp67
S'file'
p68
S'/home/nalini/Desktop/web2py/gluon/restricted.py'
p69
sS'dump'
p70
(dp71
S'environment'
p72
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, ...}"
p73
sS'ccode'
p74
S'<code object <module> at 0xafd4ec0, file "/home/.../applications/newapp/models/cron_job.py", line 3>'
p75
ssS'lnum'
p76
I217
sS'lines'
p77
(dp78
I212
S'    try:'
p79
sI213
S'        if isinstance(code, types.CodeType):'
p80
sI214
S'            ccode = code'
p81
sI215
S'        else:'
p82
sI216
S'            ccode = compile2(code, layer)'
p83
sI217
S'        exec ccode in environment'
p84
sI218
S'    except HTTP:'
p85
sI219
S'        raise'
p86
sI220
S'    except RestrictedError:'
p87
sI221
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p88
ssS'call'
p89
S'(code="# coding: utf8\\n# coding: utf8\\nimport os\\nimport t...127\'\\n    test_scripts(num)\\n    return\\n\\ntesting()\\n", environment={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, \'CAT\': <class \'gluon.html.CAT\'>, \'CENTER\': <class \'gluon.html.CENTER\'>, \'CLEANUP\': <class \'gluon.validators.CLEANUP\'>, ...}, layer=\'/home/nalini/Desktop/web2py/applications/newapp/models/cron_job.py\')'
p90
sS'func'
p91
S'restricted'
p92
sa(dp93
g68
S'/home/nalini/Desktop/web2py/applications/newapp/models/cron_job.py'
p94
sg70
(dp95
S'testing'
p96
S'<function testing>'
p97
ssg76
I1667
sg77
(dp98
I1664
S'    test_scripts(num)'
p99
sI1665
S'    return'
p100
sI1666
S''
sI1667
S'testing()'
p101
sI1658
S'def testing():'
p102
sI1659
S'    for i in range(1,112):'
p103
sI1660
S'        print i'
p104
sI1661
S'        num=str(i)'
p105
sI1662
S'        test_scripts(num)'
p106
sI1663
S"    num='127'"
p107
ssg89
S'()'
p108
sg91
S'<module>'
p109
sa(dp110
g68
S'/home/nalini/Desktop/web2py/applications/newapp/models/cron_job.py'
p111
sg70
(dp112
S'num'
p113
S"'1'"
p114
sS'global test_scripts'
p115
S'<function test_scripts>'
p116
ssg76
I1662
sg77
(dp117
I1664
S'    test_scripts(num)'
p118
sI1665
S'    return'
p119
sI1666
S''
sI1657
S''
sI1658
S'def testing():'
p120
sI1659
S'    for i in range(1,112):'
p121
sI1660
S'        print i'
p122
sI1661
S'        num=str(i)'
p123
sI1662
S'        test_scripts(num)'
p124
sI1663
S"    num='127'"
p125
ssg89
S'()'
p126
sg91
S'testing'
p127
sa(dp128
g68
S'/home/nalini/Desktop/web2py/applications/newapp/models/cron_job.py'
p129
sg70
(dp130
S'page_present'
p131
S'undefined'
p132
sS'global baadal_path'
p133
S"'https://10.208.23.68/baadal'"
p134
sS'driver'
p135
S'<selenium.webdriver.firefox.webdriver.WebDriver object>'
p136
sS'driver.get'
p137
S'<bound method WebDriver.get of <selenium.webdriver.firefox.webdriver.WebDriver object>>'
p138
ssg76
I57
sg77
(dp139
I52
S'        vm_name=""'
p140
sI53
S'        for j in xrange(0,len(root[i])):'
p141
sI54
S''
sI55
S'            driver = webdriver.Firefox()#connect to selenium server'
p142
sI56
S'            driver.implicitly_wait(10)'
p143
sI57
S'            page_present=driver.get(baadal_path) #url of the page to be hit'
p144
sI58
S'            if page_present!="None":'
p145
sI59
S'            \tdriver.find_element_by_link_text(root.get("href")).click()'
p146
sI60
S'            \timage=0'
p147
sI61
S'            \tfor k in xrange(0,len(root[i][j])):'
p148
ssg89
S"(test_case_no='1')"
p149
sg91
S'test_scripts'
p150
sa(dp151
g68
S'/usr/local/lib/python2.7/dist-packages/selenium/webdriver/remote/webdriver.py'
p152
sg70
(dp153
S'global Command'
p154
S"<class 'selenium.webdriver.remote.command.Command'>"
p155
sS'url'
p156
S"'https://10.208.23.68/baadal'"
p157
sS'self'
p158
S'<selenium.webdriver.firefox.webdriver.WebDriver object>'
p159
sS'self.execute'
p160
S'<bound method WebDriver.execute of <selenium.webdriver.firefox.webdriver.WebDriver object>>'
p161
sS'Command.GET'
p162
S"'get'"
p163
ssg76
I176
sg77
(dp164
I171
S''
sI172
S'    def get(self, url):'
p165
sI173
S'        """'
p166
sI174
S'        Loads a web page in the current browser session.'
p167
sI175
S'        """'
p168
sI176
S"        self.execute(Command.GET, {'url': url})"
p169
sI177
S''
sI178
S'    @property'
p170
sI179
S'    def title(self):'
p171
sI180
S'        """Returns the title of the current page.'
p172
ssg89
S"(self=<selenium.webdriver.firefox.webdriver.WebDriver object>, url='https://10.208.23.68/baadal')"
p173
sg91
S'get'
p174
sa(dp175
g68
S'/usr/local/lib/python2.7/dist-packages/selenium/webdriver/remote/webdriver.py'
p176
sg70
(dp177
S'self.command_executor'
p178
S'<selenium.webdriver.firefox.extension_connection.ExtensionConnection object>'
p179
sS'self'
p180
S'<selenium.webdriver.firefox.webdriver.WebDriver object>'
p181
sS'params'
p182
S"{'sessionId': u'85fb7cc4-8d16-4f1a-ac00-3d6b8c535d51', 'url': 'https://10.208.23.68/baadal'}"
p183
sS'self.command_executor.execute'
p184
S'<bound method ExtensionConnection.execute of <se...extension_connection.ExtensionConnection object>>'
p185
sS'response'
p186
g132
sS'driver_command'
p187
S"'get'"
p188
ssg76
I162
sg77
(dp189
I160
S''
sI161
S'        params = self._wrap_value(params)'
p190
sI162
S'        response = self.command_executor.execute(driver_command, params)'
p191
sI163
S'        if response:'
p192
sI164
S'            self.error_handler.check_response(response)'
p193
sI165
S"            response['value'] = self._unwrap_value("
p194
sI166
S"                response.get('value', None))"
p195
sI157
S"            params = {'sessionId': self.session_id}"
p196
sI158
S"        elif 'sessionId' not in params:"
p197
sI159
S"            params['sessionId'] = self.session_id"
p198
ssg89
S"(self=<selenium.webdriver.firefox.webdriver.WebDriver object>, driver_command='get', params={'sessionId': u'85fb7cc4-8d16-4f1a-ac00-3d6b8c535d51', 'url': 'https://10.208.23.68/baadal'})"
p199
sg91
S'execute'
p200
sa(dp201
g68
S'/usr/local/lib/python2.7/dist-packages/selenium/webdriver/remote/remote_connection.py'
p202
sg70
(dp203
S'body'
p204
g132
sS'url'
p205
S"u'http://127.0.0.1:43569/hub/session/85fb7cc4-8d16-4f1a-ac00-3d6b8c535d51/url'"
p206
sS'self'
p207
S'<selenium.webdriver.firefox.extension_connection.ExtensionConnection object>'
p208
sS'command_info'
p209
S"('POST', '/session/$sessionId/url')"
p210
sS'self._request'
p211
S'<bound method ExtensionConnection._request of <s...extension_connection.ExtensionConnection object>>'
p212
sS'data'
p213
S'\'{"url": "https://10.208.23.68/baadal", "sessionId": "85fb7cc4-8d16-4f1a-ac00-3d6b8c535d51"}\''
p214
ssg76
I349
sg77
(dp215
I352
S'        """'
p216
sI353
S'        Send an HTTP request to the remote server.'
p217
sI344
S'        command_info = self._commands[command]'
p218
sI345
S"        assert command_info is not None, 'Unrecognised command %s' % command"
p219
sI346
S'        data = utils.dump_json(params)'
p220
sI347
S'        path = string.Template(command_info[1]).substitute(params)'
p221
sI348
S"        url = '%s%s' % (self._url, path)"
p222
sI349
S'        return self._request(command_info[0], url, body=data)'
p223
sI350
S''
sI351
S'    def _request(self, method, url, body=None):'
p224
ssg89
S"(self=<selenium.webdriver.firefox.extension_connection.ExtensionConnection object>, command='get', params={'sessionId': u'85fb7cc4-8d16-4f1a-ac00-3d6b8c535d51', 'url': 'https://10.208.23.68/baadal'})"
p225
sg91
g200
sa(dp226
g68
S'/usr/local/lib/python2.7/dist-packages/selenium/webdriver/remote/remote_connection.py'
p227
sg70
(dp228
S'self._conn.getresponse'
p229
S'<bound method HTTPConnection.getresponse of <httplib.HTTPConnection instance>>'
p230
sS'resp'
p231
g132
sS'self._conn'
p232
S'<httplib.HTTPConnection instance>'
p233
sS'self'
p234
S'<selenium.webdriver.firefox.extension_connection.ExtensionConnection object>'
p235
ssg76
I380
sg77
(dp236
I384
S''
sI375
S'                headers["Authorization"] = "Basic %s" % auth'
p237
sI376
S"            if body and method != 'POST' and method != 'PUT':"
p238
sI377
S'                body = None'
p239
sI378
S'            try:'
p240
sI379
S'                self._conn.request(method, parsed_url.path, body, headers)'
p241
sI380
S'                resp = self._conn.getresponse()'
p242
sI381
S'            except httplib.HTTPException:'
p243
sI382
S'                self._conn.close()'
p244
sI383
S'                raise'
p245
ssg89
S'(self=<selenium.webdriver.firefox.extension_connection.ExtensionConnection object>, method=\'POST\', url=u\'http://127.0.0.1:43569/hub/session/85fb7cc4-8d16-4f1a-ac00-3d6b8c535d51/url\', body=\'{"url": "https://10.208.23.68/baadal", "sessionId": "85fb7cc4-8d16-4f1a-ac00-3d6b8c535d51"}\')'
p246
sg91
S'_request'
p247
sa(dp248
g68
S'/usr/lib/python2.7/httplib.py'
p249
sg70
(dp250
S'response.begin'
p251
S'<bound method HTTPResponse.begin of <httplib.HTTPResponse instance>>'
p252
sS'response'
p253
S'<httplib.HTTPResponse instance>'
p254
ssg76
I1027
sg77
(dp255
I1024
S'            kwds["buffering"] = True;'
p256
sI1025
S'        response = self.response_class(*args, **kwds)'
p257
sI1026
S''
sI1027
S'        response.begin()'
p258
sI1028
S'        assert response.will_close != _UNKNOWN'
p259
sI1029
S'        self.__state = _CS_IDLE'
p260
sI1030
S''
sI1031
S'        if response.will_close:'
p261
sI1022
S'            #only add this keyword if non-default, for compatibility with'
p262
sI1023
S'            #other response_classes.'
p263
ssg89
S'(self=<httplib.HTTPConnection instance>, buffering=False)'
p264
sg91
S'getresponse'
p265
sa(dp266
g68
S'/usr/lib/python2.7/httplib.py'
p267
sg70
(dp268
S'status'
p269
g132
sS'reason'
p270
g132
sS'version'
p271
g132
sS'self'
p272
S'<httplib.HTTPResponse instance>'
p273
sS'self._read_status'
p274
S'<bound method HTTPResponse._read_status of <httplib.HTTPResponse instance>>'
p275
ssg76
I407
sg77
(dp276
I402
S"            # we've already started reading the response"
p277
sI403
S'            return'
p278
sI404
S''
sI405
S'        # read until we get a non-100 response'
p279
sI406
S'        while True:'
p280
sI407
S'            version, status, reason = self._read_status()'
p281
sI408
S'            if status != CONTINUE:'
p282
sI409
S'                break'
p283
sI410
S'            # skip the header from the 100 response'
p284
sI411
S'            while True:'
p285
ssg89
S'(self=<httplib.HTTPResponse instance>)'
p286
sg91
S'begin'
p287
sa(dp288
g68
S'/usr/lib/python2.7/httplib.py'
p289
sg70
(dp290
S'line'
p291
S"''"
p292
sS'global BadStatusLine'
p293
S"<class 'httplib.BadStatusLine'>"
p294
ssg76
I371
sg77
(dp295
I366
S'        if self.debuglevel > 0:'
p296
sI367
S'            print "reply:", repr(line)'
p297
sI368
S'        if not line:'
p298
sI369
S'            # Presumably, the server closed the connection before'
p299
sI370
S'            # sending a valid response.'
p300
sI371
S'            raise BadStatusLine(line)'
p301
sI372
S'        try:'
p302
sI373
S'            [version, status, reason] = line.split(None, 2)'
p303
sI374
S'        except ValueError:'
p304
sI375
S'            try:'
p305
ssg89
S'(self=<httplib.HTTPResponse instance>)'
p306
sg91
S'_read_status'
p307
sasS'pyver'
p308
S'Python 2.7.1+: /usr/bin/python (prefix: /usr)'
p309
sS'session'
p310
g63
(S's\x1a\x00\x00\x00<div><table></table></div>'
tRp311
sS'etype'
p312
S"<class 'httplib.BadStatusLine'>"
p313
sS'date'
p314
S'Fri Mar 21 10:07:23 2014'
p315
sS'response'
p316
g63
(S's\xbd\x16\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">body</td><td style="vertical-align:top;">:</td><td><div>&lt;cStringIO.StringO object at 0xad3a35a0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_newapp</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-bdd945f5-2680-4708-ab2e-fccfee18e3f9<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">delimiters</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">files</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generic_patterns</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">headers</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">X-Powered-By</td><td style="vertical-align:top;">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">menu</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">meta</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">models_to_run</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^default/\\w+\\.py$</div></td></tr><tr><td><div>^default/unit_testing/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">postprocessing</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_client</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_compression_level</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_expires</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_key</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_data_name</td><td style="vertical-align:top;">:</td><td><div>session_data_newapp</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_file</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;/home/nalini/Desktop/web2py/applications/newapp/sessions/127.0.0.1-bdd945f5-2680-4708-ab2e-fccfee18e3f9&#x27;, mode &#x27;rb+&#x27; at 0xaeb8ae90&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_filename</td><td style="vertical-align:top;">:</td><td><div>/home/nalini/Desktop/web2py/applications/newapp/sessions/127.0.0.1-bdd945f5-2680-4708-ab2e-fccfee18e3f9</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_hash</td><td style="vertical-align:top;">:</td><td><div>14dce7db411b1dd93b8ec82f4873f418</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-bdd945f5-2680-4708-ab2e-fccfee18e3f9</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_name</td><td style="vertical-align:top;">:</td><td><div>session_id_newapp</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_locked</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_masterapp</td><td style="vertical-align:top;">:</td><td><div>newapp</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_new</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_storage_type</td><td style="vertical-align:top;">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">status</td><td style="vertical-align:top;">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">view</td><td style="vertical-align:top;">:</td><td><div>default/unit_testing.html</div></td></tr></table></div>'
tRp317
sS'locals'
p318
(dp319
g50
S"''"
p320
sS'self'
p321
S'<httplib.HTTPResponse instance>'
p322
sssS'traceback'
p323
S'Traceback (most recent call last):\n  File "/home/nalini/Desktop/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/nalini/Desktop/web2py/applications/newapp/models/cron_job.py", line 1667, in <module>\n    testing()\n  File "/home/nalini/Desktop/web2py/applications/newapp/models/cron_job.py", line 1662, in testing\n    test_scripts(num)\n  File "/home/nalini/Desktop/web2py/applications/newapp/models/cron_job.py", line 57, in test_scripts\n    page_present=driver.get(baadal_path) #url of the page to be hit\n  File "/usr/local/lib/python2.7/dist-packages/selenium/webdriver/remote/webdriver.py", line 176, in get\n    self.execute(Command.GET, {\'url\': url})\n  File "/usr/local/lib/python2.7/dist-packages/selenium/webdriver/remote/webdriver.py", line 162, in execute\n    response = self.command_executor.execute(driver_command, params)\n  File "/usr/local/lib/python2.7/dist-packages/selenium/webdriver/remote/remote_connection.py", line 349, in execute\n    return self._request(command_info[0], url, body=data)\n  File "/usr/local/lib/python2.7/dist-packages/selenium/webdriver/remote/remote_connection.py", line 380, in _request\n    resp = self._conn.getresponse()\n  File "/usr/lib/python2.7/httplib.py", line 1027, in getresponse\n    response.begin()\n  File "/usr/lib/python2.7/httplib.py", line 407, in begin\n    version, status, reason = self._read_status()\n  File "/usr/lib/python2.7/httplib.py", line 371, in _read_status\n    raise BadStatusLine(line)\nBadStatusLine: \'\'\n'
p324
s.