(dp1
S'output'
p2
S'<class \'_mysql_exceptions.OperationalError\'> (2003, "Can\'t connect to MySQL server on \'10.208.21.76\' (113)")'
p3
sS'layer'
p4
S'/home/monika/Desktop/web2py/applications/testapp_24/models/test.py'
p5
sS'code'
p6
S'# coding: utf8\nimport os\nimport thread\nimport paramiko\nimport logging\nimport datetime\nimport logging.config\nfrom selenium import webdriver\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\nfrom selenium.common.exceptions import StaleElementReferenceException\nfrom selenium.common.exceptions import NoSuchElementException\nfrom selenium.common.exceptions import InvalidElementStateException\nfrom selenium.common.exceptions import TimeoutException\nfrom helper import xml_connect\nfrom helper import db_connection\nfrom selenium.webdriver.common.keys import Keys\nimport sys\nimport time\nimport libvirt\nimport commands\n\n#creating a logger for logging the records\nlogger = logging.getLogger("web2py.app.testapp")\n\n#creating connection to remote database\nbaadal_db=db_connection() \n\n\n#creating connection to remote system\nssh = paramiko.SSHClient()\nssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n#################################################################################################################\n#                             The main test function for stress\n                                           #\n#################################################################################################################\ndef stress_script(m):\n    \n    \n    logging.debug("inside thread: "+str(m))\n    \n    root = xml_connect()\n    i=m\n    for j in xrange(0,len(root[i])): \n        driver = webdriver.Remote(\n       command_executor=\'http://127.0.0.1:4444/wd/hub\',\n       desired_capabilities=DesiredCapabilities.FIREFOX)#connect to selenium server\n        driver.implicitly_wait(10)\n        driver.get(root.get("url")) #url of the page to be hit \n        driver.find_element_by_link_text(root.get("href")).click()\n        image=0\n        for k in xrange(0,len(root[i][j])):\n            field_type=root[i][j][k].get("type")\n            xml_parent=root[i]\n            xml_child=root[i][j]\n            xml_sub_child=root[i][j][k]\n\t\t\t\t\t\n            if field_type=="input": #checking for text fields\n                vm_name1=isInput(driver,xml_sub_child)\n                      \n            elif field_type=="read_only": #checking for submit button\n                isReadOnly(driver, xml_parent,xml_child,xml_sub_child)\n\t\t\t\t\t\t\n            elif field_type=="submit": #checking for submit button\n                isSubmit(driver, xml_parent,xml_child,xml_sub_child)\n                driver.implicitly_wait(10)\n\t\t\t\t\t\t\n            elif field_type=="button":#checking for button\n                time.sleep(3)\n                isButton(driver,xml_sub_child)\n\t\t\t\t\t\n            elif field_type=="scroll":#scrolling the page up/down\n                isScroll(driver,xml_sub_child)\n\t\t\t\t \t\t\n            elif field_type=="href":\n                isHref(driver,xml_sub_child)#clicking on the hyper link\n                        \n            elif field_type=="select":\n                isSelect(driver,xml_sub_child)# selecting from dropdown menu\n\t\t\t \t\n            elif field_type=="table":\n                isTable(driver,xml_parent,xml_child,xml_sub_child)#checking for data in table\n                         \n            elif field_type=="img":#checking for sett\n                table_path=xml_sub_child.get("path")\n                isImage(driver,xml_child,xml_sub_child,table_path,image)\n                 \n\t\t\t\t\t\t\t\t\n            elif field_type=="check_tables":#cheking for host table\n                isCheckTable(driver,xml_parent,xml_child,xml_sub_child,vm_name)\n                \n            elif field_type=="wait":\n                isWait(driver,xml_parent,xml_child,xml_sub_child)#checking for data in table\n                    \n            elif field_type=="check_data":\n                 operation_name=xml_sub_child.text\n                 check_vm_task(driver,xml_sub_child,xml_child,vm_name,operation_name)#checking for data in table\n                        \t\t\t\t\n            else:\n                logging.debug("report problem") #logging the report\n                \n            if k==5 | k==6:\n                vm_name=vm_name1\n        driver.close()#disconnect from server\n\n\ndef stress_test_script():\n    for m in range(0,5):\n        root = xml_connect()\n        total_scripts=root.get("total_scripts")\n        test_no=m%(int(total_scripts)-1)\n        thread.start_new_thread( stress_script,(test_no,) )\n        thread.start_new_thread( stress_script,(test_no,) )\n        thread.start_new_thread( stress_script,(test_no,) )\n        thread.start_new_thread( stress_script,(test_no,) )\n        thread.start_new_thread( stress_script,(test_no,) )\n        thread.start_new_thread( stress_script,(test_no,) )\n        thread.start_new_thread( stress_script,(test_no,) )\n        thread.start_new_thread( stress_script,(test_no,) )\n        \n        logging.debug("Thread: "+str(m))\n        \n    return\n\n\ndef graph_test(test_case_no):\n#Checking memory utilizations\n    print test_case_no\n    root = xml_connect()\n    i=int(test_case_no)\n    xml_sub_child=root[i-1][0][0]\n    xml_child=root[i-1][0]   \n    ssh.connect(xml_child.get("ip_add"), username=xml_child.get("usrnam"), password=xml_child.get("password"))   \n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_init_data"))\n    initial_data=stdout.readlines()\n    \n    current_time=datetime.datetime.now()\n   \n    ini_data=str(initial_data[2])\n    init_data=ini_data.split()\n    ssh.connect("10.208.21.113", username="root", password="baadal_test")   \n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_run_prgrm"))\n    data=stdout.readlines()\n    time.sleep(600)    \n    ssh.connect(xml_child.get("ip_add"), username=xml_child.get("usrnam"), password=xml_child.get("password"))  \n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_finl_data"))\n    final_data=stdout.readlines()\n    fin_data=str(final_data[2])\n    finl_data=fin_data.split()\n    print_graph_result(finl_data,init_data,xml_child)\n    \ndef print_graph_result(finl_data,init_data,xml_child):\n    logger.debug(xml_child.get("value") +" Initial_data:"+ str(init_data))\n    logger.debug(xml_child.get("value") +" Final_data:"+ str(finl_data))\n    for i in range(1,7):\n        if init_data[i]=="-nan":\n            i_data=0\n        else:\n            i_data=init_data[i]      \n        diff=float(finl_data[i])-float(i_data)\n        logger.debug(xml_child.get("value") +": Differnce "+ str(diff)) \n        if finl_data[i]=="-nan":\n            logger.debug(xml_child.get("value") +\':  \'+"Incorrect Data")\n        else :\n            if diff<=0:\n                logger.debug(xml_child.get("value") +\':  \'+"Incorrect Data") \n            else:\n                logger.debug(xml_child.get("value") +\':  \'+"Correct Data")   \n\n\ndef print_graph(finl_data,xml_child):\n    for i in range(1,7):\n        if finl_data[i]=="-nan":\n            logger.debug(xml_child.get("value") +\':  \'+"Correct Data")\n        else :\n            logger.debug(xml_child.get("value") +\':  \'+"Incorrect Data")  \n#################################################################################################################\n#                                       The main test function  for unit testing                                            #\n#################################################################################################################\n\t\t\ndef test_script(test_case_no):\n    print test_case_no\n    root = xml_connect()\n    num=int(test_case_no)\n    vm_status=1\n    if root[num-1].get("id")==test_case_no:\n       \n        i=num-1\n        vm_name=""  \n        for j in xrange(0,len(root[i])):\n        \n            driver = webdriver.Firefox()#connect to selenium server\n            driver.implicitly_wait(10)\n            driver.get(root.get("url")) #url of the page to be hit \n            driver.find_element_by_link_text(root.get("href")).click()\n            image=0\n            for k in xrange(0,len(root[i][j])):\n                if vm_status:\n                    field_type=root[i][j][k].get("type")\n                    xml_parent=root[i]\n                    xml_child=root[i][j]\n                    xml_sub_child=root[i][j][k]\n                \t\n                    if field_type=="input": #checking for text fields\n                        vm_name1=isInput(driver,xml_sub_child)\n                      \n                    elif field_type=="read_only": #checking for submit button\n                        isReadOnly(driver, xml_parent,xml_child,xml_sub_child)\n\t\t\t\t\t\t\n                    elif field_type=="submit": #checking for submit button\n                        time.sleep(3)\n                        \n                        isSubmit(driver, xml_parent,xml_child,xml_sub_child)\n                        \n\t\n                    elif field_type=="scroll":#scrolling the page up/down\n                        isScroll(driver,xml_sub_child)\n\t\t\t\t \t\n                    elif field_type=="clear":#Clearing text from textarea \n                        isClear(driver,xml_sub_child)  \n                        \t\n                    elif field_type=="href":\n                        isHref(driver,xml_sub_child,xml_child)#clicking on the hyper link\n                    \n                    elif field_type=="select":\n                        isSelect(driver,xml_sub_child)# selecting from dropdown menu\n                    \n                    elif field_type=="sanity_table":\n                        isSanityCheck(driver, xml_parent, xml_child, xml_sub_child)# checking for data in  sanity table\n\t\t\t \t\n                    elif field_type=="table":\n                        isTable(driver,xml_parent,xml_child,xml_sub_child)#checking for data in table\n                         \n                    elif field_type=="img":#checking for setting image\n                        table_path=xml_sub_child.get("path")\n                        vm_name2=isImage(driver,xml_child,xml_sub_child,table_path)\n\t\t\t\t\n                    elif field_type=="check_tables":#cheking for host table\n                        isCheckTable(driver,xml_parent,xml_child,xml_sub_child)\n                \n                    elif field_type=="wait":\n                        isWait(driver,xml_parent,xml_child,xml_sub_child)#checking for data in table\n                    \n                    elif field_type=="check_data":\n                        isCheckdata(driver,xml_parent,xml_child,xml_sub_child,vm_name)#checking for data in table\n                 \n                    elif field_type=="task_table":\n                         operation_name=xml_sub_child.text\n                         vm_status1=check_vm_task(driver,xml_sub_child,xml_child,vm_name,operation_name)#checking for data in table\n                \n                    elif field_type=="attach_disk":\n                        operation_name=xml_sub_child.text\n                        attack_disk(driver,xml_sub_child,xml_child,vm_name,operation_name)#checking for data in table\n                           \t\t\t\t          \t\t\t\t          \t\t\t\t\n                    else:\n                        logging.debug("report problem") #logging the report\n                    if k==33:\n                        vm_status=vm_status1\n                    if k==5:\n                        vm_name=vm_name1\n            driver.close()#disconnect from server        \n        if vm_status==0:\n            logger.debug("Your VM has not created.Please Check it!!!Either its in failed or pending task table!!!")\n        \n\n#################################################################################################################\n#                                        Function  for Network testing                                            #\n#################################################################################################################           \ndef packages_install_test(test_case_no): \n    root = xml_connect()\n    xml_sub_child=root[test_case_no-1][0][0]\n    print test_case_no\n    xml_child=root[test_case_no-1][0]    \n    ssh.connect(xml_child.get("ip_add"), username=xml_child.get("usrnam"), password=xml_child.get("password"))    \n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_flush"))\n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_pkg"))\n    pkg_list=xml_sub_child.get("pkg_lst").split()\n    for pkg in  pkg_list:\n        cmd=xml_sub_child.get("cmd_srch") + " " +str(pkg)\n        stdin, stdout, stderr =ssh.exec_command(cmd)\t\n        data=stdout.readlines()\n        if data:\n            logger.debug(xml_child.get("value") +\': \'+pkg +" :software has installed properly") \n            \n        else:\n            logger.debug(xml_child.get("value") +\': \'+pkg +" :software has not installed properly") \n \n                                                                                                                                                                        \n\n                                         \ndef check_stat_on_host():\n    import libvirt\n    import commands\n    import MySQLdb as mdb\n    conn = libvirt.open("qemu+ssh://root@" + \'10.208.21.70\' + "/system")\n    \n    db=mdb.connect("10.208.21.111","baadaltesting","test_baadal","baadal")\n    cursor1=db.cursor()\n    cursor1.execute("select vm_name,vm_data.status,host_id from vm_data join host where host.id=vm_data.host_id and host_ip=\'10.208.21.70\'")\n    output=cursor1.fetchall()\n    datas=str(output)\n    lists=datas.split("), (")\n    col_count=len(lists)\n    print lists\n    print col_count\n    for i in range(0,col_count):\n        datass=lists[i].split(",")\n        newstr = datass[0].replace("\'", "")\n        if i==0:\n            newstr=newstr.replace("((","")\n        for id in conn.listDomainsID():\n            dom = conn.lookupByID(id)\n            infos = dom.info()\n            if newstr==dom.name():\n                print newstr\n                print \'Name =  %s\' % dom.name()\n                print \'State = %d\' % infos[0]\n                print datass[1]\n                if (((datass[1]==" 5L") & (infos[0]==1)) | ((datass[1]==" 6L") & (infos[0]==3))):\n                    print "yes"                                           \n \n#################################################################################################################\n#                         Function for mailing\n                                           #\n#################################################################################################################    \ndef send_mail():\n                                          \n    from gluon.tools import Mail\n    mail = Mail()\n    mail.settings.server = \'smtp.iitd.ernet.in:25\'\n    mail.settings.sender = \'monika28.visitor@cse.iitd.ernet.in\'\n    mail.settings.login = \'jyoti11.visitor@cse.iitd.ernet.in:jyoti_saini\'\n    mail.send(to=[\'monika71990@gmail.com\'],\n          subject=\'hello\',\n          # If reply_to is omitted, then mail.settings.sender is used\n          message="Error")\n###############################################################################################################\n#                             Functions used by the input field functions                                     #\n###############################################################################################################\t\t\n\n# checking whether a table is present on the webpage\ndef isElementPresent(driver,xml_child,xpath):\n    try:\n        driver.find_element_by_xpath(xpath)\n   \n        return 1\n    except :\n        logger.debug(xml_child.get("value") +\': Result:no element exists\')\n        return 0\n   \n        \t\n\n\n# checking whether an element is present on the webpage\ndef isTablePresent(driver,xml_child,xpath):\n    try:\n        driver.find_element_by_xpath(xpath)\n        \n        return 1\n    except:\n        logger.debug(xml_child.get("value") +\': Result:no table exists\')\n        return 0\t\n   \n\n\t\t\t\t\n#checking whether front end data and daatabase entries are equal and printing the result \t\t\ndef print_result(field_text,result,xml_child):\n\t\n\tquery_result=str(result)\n        logger.debug("screen=  "+str(field_text) )\n        logger.debug("db=      "+query_result)\n\tif str(field_text)==str(query_result):\n\t\tlogger.debug(xml_child.get("value") +\': Result:correct input\') \n\t\t\n\telse:\n\t\tlogger.error(xml_child.get("value") +\': Result:Incorrect input\')\n\n\treturn \n\n\t\n#open error link on differnet page\t\t\t\ndef open_error_page(driver,xml_parent,text,row_count):\n\t(driver.find_elements_by_link_text(text))[row_count].click()\n\tfield=driver.find_element_by_xpath(xml_parent.get("error_page"))\n\terror_message=field.text\n\tdriver.find_element_by_link_text(xml_parent.get("error_page_close_text")).click()\n\treturn error_message\n\n\t\n#converting vm status bits into status text\t\t\t\ndef admin_vm_status(status):\n    vm_status=["Running","Paused","Shutdown"]\n    if status==2:\n        result=vm_status[0]\n    if status==3:\n        result=vm_status[1]\n    if status==4:\n        result=vm_status[2]\n    return result \n\n    \t\n#converting host status bits into status text    \t    \t    \t\ndef host_status(status):\n\thost_status={0:"Down",1:"Up",2:"Maintenance"}\t\n\tif status==0:\n\t\tresult=host_status[0]\n\tif status==1:\n\t\tresult=host_status[1]\n\tif status==2:\n\t\tresult=host_status[2]\n\treturn result\n\n\t\t\n#converting  status bits into status text\t\ndef org_task_status(status,xml_child):\n    user_name=xml_child[0].get("value")\n    print user_name\n    task_status={0:"Approve  |  Reject | Edit",1:"Waiting for admin approval",2:"Remind Faculty"}\n    if (status==0) | (status==2):\n        result=task_status[0]\n    if (status==3) :\n        result=task_status[0]\n    if (status==4) :\n        result=task_status[1]\n    if (status==1) :\n        result=task_status[2]\n    return result\n    \n\n        \n    \n#for executing sql-query\t\t\t\ndef execute_query(sql_query,arg=None):\n    cursor=baadal_db.cursor()\n    if arg==None:\n        cursor.execute(sql_query)\n    else:\n        cursor.execute(sql_query,arg)\n    return cursor\n\n\n#perform action on setting button of vm\'s\ndef click_on_setting(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    print vm_id\n    id=xml_sub_child.get("id")\n    driver.find_element_by_xpath("//*[@href=\'/baadal/user/"+ str(id) +"/"+ str(vm_id) +"\']").click()\n    logger.debug(xml_child.get("value") +\': Result:Setting button works properly\') \n    return\n    \n    \n#open dialogbox when error occurs in falied tasks            \ndef click_on_dialogbox(driver):\n    alert = driver.switch_to_alert()\n    alert.accept()\n    return\n    \n#add extra disk to a VM\ndef add_extra_disk(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    isInput_add(driver, xml_sub_child)\n    value=xml_sub_child.get("add_button")\n    isButton_add(driver, xml_sub_child,value)\n    \n    return\n    \n#add additional user to a VM\ndef add_user(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    isInput_add(driver, xml_sub_child)\n    value=xml_sub_child.get("add_submit")\n    isButton_add(driver, xml_sub_child,value)\n    time.sleep(3)\n    status=isElementPresent(driver,xml_child,value)\n    print status\n    if status==1:\n        logger.error("User is already VM user")\n        user=0\n    else:\n        val=xml_sub_child.get("add_button")\n        isButton_add(driver, xml_sub_child,val)\n        user=1\n    return user\n\n       \n\n\n#getting snapshot id of a VM\n\ndef get_snapshot_id(driver,xml_sub_child,xml_child,vm_name):\n    query_result=execute_query( xml_sub_child.get("query_snap_id"),(str(vm_name))).fetchone()\n    field=driver.find_elements_by_xpath(xml_sub_child.get("xpath_snap"))\n    for t in field:\n        if str(query_result[1]) in t.text:\n            snap_id=query_result[0]\n    return snap_id\n\n\n# performing  attach disk operation on vm \ndef attack_disk(driver,xml_sub_child,xml_child,vm_name,operation_name):\n    print vm_name\n    query_result=execute_query("select id,status from request_queue where vm_name=%s",(str(vm_name))).fetchone()\n    baadal_db.commit()\n    query_result=execute_query("select id from vm_data where vm_name=%s",(str(vm_name))).fetchone()\n    baadal_db.commit()\n    if query_result!=():\n        query_result=execute_query("select id from vm_data where vm_name=%s",(str(vm_name))).fetchone()\n        print query_result\n        vm_id=query_result[0]\n        print vm_id\n        click_on_setting(driver,xml_sub_child,xml_child,vm_name,vm_id)\n        click_on_operation(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    return\n          \n        \n#getting user id of a user access to a VM                        \ndef get_user_id(driver,xml_sub_child,xml_child,vm_name):\n    query_result=execute_query( xml_sub_child.get("query_user_id"),(str(vm_name))).fetchone()\n    field=driver.find_elements_by_xpath(xml_sub_child.get("xpath_user"))\n    for t in field:\n        if str(query_result[1]) in t.text:\n            user_id=query_result[0]\n            logger.debug("user_id :" + " " + str(user_id))\n    return user_id\n\n\n\n#performing add_user operation on vm\ndef op_user(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    op_name=xml_sub_child.get("op")               \n    driver.find_element_by_xpath("//*[@title=\'Add User to VM\']").click()\n    if add_user(driver,xml_sub_child,xml_child,vm_name,vm_id):\n        if xml_sub_child.get("op_typ")!="cancel_user":\n            field_text=message_flash(driver,xml_sub_child,xml_child)\n            result=message_in_db(xml_sub_child)\n            print_result(field_text,result,xml_child)\n            if xml_sub_child.get("name") in vm_mode_type:\n                check_user_table(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    return\n\n#checking whether username is in vm_users table or not\ndef  check_user_table(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    username=xml_sub_child.get("user_id_data")\n    print username\n    query_length=execute_query( xml_sub_child.get("query5"),(str(vm_name))).fetchone()\n    length=len(query_length)\n    print length\n    query_result=execute_query("select concat(user.first_name,\' \',user.last_name) as user_name from user where username=%s",(str(username))).fetchone()\n    path="//table[@id=\'vm_users\']/tbody/tr"\n    field=driver.find_elements_by_xpath(path)\n    count=0\n    a=0\n    for data in field:\n        if query_result[0] in data.text:\n            print query_result[0]\n            print data.text\n            logger.debug("User name is added to VM")\n            count=1\n        a=a+1\n    if a==length:\n    \tif count==0:\n    \t\tlogger.errot("Error ")    \n    return\n    \n#list of vm mode \nvm_mode_type=[\'vm_running_Setting_intgrtn\',\'vm_paused_Setting_integrtn\',\'vm_shutdown_Setting_integrtn\']\n\n\n#performing delete operation on vm\n\ndef op_delete_vm(driver,xml_sub_child,xml_child,vm_name,vm_id):   \n    op_name=xml_sub_child.get("op")    \n             \n    driver.find_element_by_xpath(xml_sub_child.get("title")).click()\n    click_on_dialogbox(driver)\n    click_on_dialogbox(driver)\n    field_text=message_flash(driver,xml_sub_child,xml_child)\n    result=message_in_db(xml_sub_child)\n    print_result(field_text,result,xml_child)\n    if xml_sub_child.get("name") in vm_mode_type:\n        operation_name=op_list[op_name]\n        check_vm_task(driver,xml_sub_child,xml_child,vm_name,operation_name)            \n\n    return\n\n#performing snapshot operation on vm\ndef op_snap_vm(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    op_name=xml_sub_child.get("op") \n    if op_name=="snapshot": \n        path=xml_sub_child.get("xpath_conf")\n    else:\n        path=xml_sub_child.get("xpath_snap")\n    print path\n    if isElementPresent(driver,xml_child,path):  \n        if op_name=="snapshot":\n            driver.find_element_by_xpath("//*[@href=\'/baadal/user/"+ str(op_name) +"/"+ str(vm_id) + "\']").click()\n        else:\n            snapshot_id=get_snapshot_id(driver,xml_sub_child,xml_child,vm_name) \n            driver.find_element_by_xpath("//*[@href=\'/baadal/user/"+ str(op_name) +"/"+ str(vm_id) +"/"+ str(snapshot_id) + "\']").click()\n        result=snap_result(driver,xml_sub_child,xml_child,vm_name,vm_id,op_name)\n        if  (result=="Snapshot Limit Reached. Delete Previous Snapshots to take new snapshot.") | (result=="Snapshot request already in queue.") | (result==""):\n            logger.debug(result )\n        else:\n            if xml_sub_child.get("name")in vm_mode_type:\n                operation_name=op_list[op_name]\n                check_vm_task(driver,xml_sub_child,xml_child,vm_name,operation_name)        \n    return\n    \n\n#performing  delete add_user operation on vm\ndef op_del_user_vm(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    op_name=xml_sub_child.get("op") \n    path=xml_sub_child.get("xpath_user")\n    if isElementPresent(driver,xml_child,path):  \n        user_id=get_user_id(driver,xml_sub_child,xml_child,vm_name) \n        driver.find_element_by_xpath("//*[@href=\'/admin/"+ str(op_name) +"/"+ str(vm_id) +"/"+ str(user_id) + "\']").click()\n        result="User access is eradicated."\n        field_text=message_flash(driver,xml_sub_child,xml_child)\n        print_result(field_text,result,xml_child)\n        if xml_sub_child.get("name") in vm_mode_type:\n            check_delete_user(driver,user_id,op_name,xml_child,xml_sub_child)\n    return\n            \n\n#checking whether user access removed for a vm or not                        \ndef  check_delete_user(driver,user_id,op_name,xml_child,xml_sub_child):\n    operation_name=op_list[op_name]\n    user_name=execute_query("select concat(first_name,\' \',last_name) as user_name from user where id=%s",(str(user_id))).fetchone()\n    path=xml_sub_child.get("xpath_user")\n    if isTablePresent(driver,xml_child,path):\n        user_table=driver.find_element_by_xpath(path)\n        if user_name[0] in user_table.text:\n            logger.error("User has not been deleted")\n        else:\n            logger.debug("User access is eradicated")\n    else:\n        logger.debug("User access is eradicated")\n    return\n#performing attach disk operation on vm\ndef op_attach_disk(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    op_name=xml_sub_child.get("op")    \n    driver.find_element_by_xpath("//*[@href=\'/baadal/user/"+ str(op_name) +"/"+ str(vm_id) +"\']").click()\n    add_extra_disk(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    field_text=message_flash(driver,xml_sub_child,xml_child)\n    result=xml_sub_child.get("print")\n    print_result(field_text,result,xml_child)\n    if xml_sub_child.get("name")in vm_mode_type:\n        operation_name=op_list[op_name]\n        check_attach_disk(driver,xml_sub_child,xml_child,vm_name,vm_id,operation_name)\n\n#performing migrate operation on vm\ndef op_migrate_vm(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    op_name=xml_sub_child.get("op")\n    path="//*[@href=\'/admin/"+ str(op_name) +"/"+ str(vm_id) +"\']"\n    if isElementPresent(driver,xml_child,path):\n        driver.find_element_by_xpath("//*[@href=\'/admin/"+ str(op_name) +"/"+ str(vm_id) +"\']").click()\n        query_snap=execute_query(xml_sub_child.get("query_snapshot"),str(vm_id)).fetchall()\n        length_snap=len(query_snap)\n        print length_snap\n        if length_snap!=0:\n            result="Cannot migrate a vm with snapshot(s)"\n            field_text=message_flash(driver,xml_sub_child,xml_child)\n            print_result(field_text,result,xml_child)\n        else:\n            driver.find_element_by_xpath("//input[@value=\'Migrate\']").click()\n            query_status=execute_query("select status from vm_data where id=%s",str(vm_id)).fetchone()\n            print query_status\n            if query_status[0]=="2":\n                result="Your VM is already running. Kindly turn it off and then retry!!!"\n                field_text=message_flash(driver,xml_sub_child,xml_child)\n                print_result(field_text,result,xml_child)\n            else:\n                result="Your task has been queued. please check your task list for status. "\n                field_text=message_flash(driver,xml_sub_child,xml_child)\n                print_result(field_text,result,xml_child)\n            if xml_sub_child.get("name")in vm_mode_type:\n                operation_name=op_list[op_name]\n                check_vm_task(driver,xml_sub_child,xml_child,vm_name,operation_name)\n    else:\n        logger.debug("Migrate operation could not performed because no host is available.Please do host up then again try this operation")\n    return\n        \n#performing   operation on vm        \ndef other_operation_on_vm(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    op_name=xml_sub_child.get("op")\n    task_typ=op_list[op_name]\n    query_result=execute_query("select status from task_queue_event where (status=1 or status=2) and task_type=%s and vm_id=%s",(str(task_typ),str(vm_id))).fetchall()\n    print query_result\n    path=task_path(xml_sub_child)\n    driver.find_element_by_xpath("//*[@title=\'" + str(path) + "\']").click()\n    if query_result==():\n        field_text=message_flash(driver,xml_sub_child,xml_child)\n        result=message_in_db(xml_sub_child)\n        print_result(field_text,result,xml_child)\n        if xml_sub_child.get("name") in vm_mode_type:\n            operation_name=op_list[op_name]\n            check_vm_task(driver,xml_sub_child,xml_child,vm_name,operation_name)\n    else:\n        field_text=message_flash(driver,xml_sub_child,xml_child)\n        result=op_list[op_name] + " request already in queue."\n        print_result(field_text,result,xml_child)\n\treturn\n\n#performing  edit vm configuration\ndef op_edit_vm_conf(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    op_name=xml_sub_child.get("op")\n    driver.find_element_by_xpath("//*[@href=\'/baadal/user/"+ str(op_name) +"/"+ str(vm_id) +"\']").click()\n    driver.find_element_by_xpath("//input[@type=\'submit\']").click()\n    result="Your request has been queued!!!"\n    field_text=message_flash(driver,xml_sub_child,xml_child)\n    result=message_in_db(xml_sub_child)\n    print_result(field_text,result,xml_child)\n    return\n\n\ndef task_path(xml_sub_child):\n    op_name=xml_sub_child.get("op")\n    if op_name=="pause_machine":\n        path=\'Pause this virtual machine\'    \n    if op_name=="shutdown_machine":\n        path=\'Gracefully shut down this virtual machine\'\n    if op_name=="start_machine":\n        path=\'Turn on this virtual machine\'    \n    if op_name=="destroy_machine":\n        path=\'Gracefully shut down this virtual machine\'\n    if op_name=="resume_machine":\n        path=\'Unpause this virtual machine\'\n    return path\n        \n        \n\t\n#selecting operation to be perform    \ndef click_on_operation(driver,xml_sub_child,xml_child,vm_name,vm_id):   \n    op_name=xml_sub_child.get("op")               \n    if op_name=="user_details":\n        op_user(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    elif op_name=="Delete":\n        op_delete_vm(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    elif op_name in {"revert_to_snapshot","delete_snapshot","snapshot"}:         \n        op_snap_vm(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    elif op_name=="delete_user_vm": \n        op_del_user_vm(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    elif op_name in {"attach_extra_disk","clone_vm"}:\n        op_attach_disk(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    elif op_name=="edit_vm_config":\n        op_edit_vm_conf(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    elif op_name=="migrate_vm":\n        op_migrate_vm(driver,xml_sub_child,xml_child,vm_name,vm_id)  \n    else:\n        other_operation_on_vm(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    return \n    \n# list of operation to be performed     \nop_list={\'revert_to_snapshot\':0,\'delete_snapshot\':1,\'snapshot\':\'Snapshot VM\',\'pause_machine\':\'Suspend VM\',\'Delete\':\'Delete VM\',\'shutdown_machine\':\'Stop VM\',\'destroy_machine\':\'Destroy VM\',\'start_machine\':\'Start VM\',\'user_details\':\'Add User\',\'attach_extra_disk\':"Attach Disk",\'clone_vm\':\'Clone \',\'delete_user_vm\':\'Delete User\',\'adjrunlevel\':\'Adjust Run Level\',\'edit_vm_config\':\'Edit VM Config\',\'resume_machine\':\'Resume VM\',\'migrate_vm\':\'Migrate VM\'}\n\n#message display on screen\ndef message_in_db(xml_sub_child):\n    op_name=xml_sub_child.get("op")\n    if op_name=="user_details":\n        result="User is added to vm" \n    else:\n    \tresult=op_list[op_name] +" request added to queue."\n    \tprint result\n\treturn result\n    \n    \n\n#retreiving message from given xpath        \ndef message_flash(driver,xml_sub_child,xml_child):\n    path=driver.find_element_by_xpath(\'//flash[@id="flash_message"]\')\n    field_text=path.text\n    return field_text\n\n#checking snapshot\ndef snap_result(driver,xml_sub_child,xml_child,vm_name,vm_id,op_name):\n    query_result=execute_query("select * from task_queue_event where task_type=\'Snapshot VM\'  and  vm_name=%s and requester_id!=-1" ,(str(vm_name))).fetchall()\n    print query_result\n    query_snap=execute_query(xml_sub_child.get("query_snap"),str(vm_id)).fetchall()\n    print query_snap\n    length_snap=len(query_result)\n    print length_snap\n    result=snap_db_result(xml_sub_child,op_name,length_snap, query_snap)\n    field_text=message_flash(driver,xml_sub_child,xml_child)\n    print_result(field_text,result,xml_child)\n    return result\n\n#printing result correspondence to snapshot\ndef snap_db_result(xml_sub_child,op_name,length_snap, query_snap):\n    print query_snap\n    if op_name=="delete_snapshot":\n        result="Your delete snapshot request has been queued"\n    else:\n        if str(length_snap)==xml_sub_child.get("max"):\n            result="Snapshot Limit Reached. Delete Previous Snapshots to take new snapshot."\n        elif query_snap!=():\n            result="Snapshot request already in queue."\n        else :\n            if op_name=="revert_to_snapshot":\n                result="Your revert to snapshot request has been queued"\n            else:\n                result="Your request to snapshot VM has been queued"\n    return result\n\n\n\ndef graph_test_mode(xml_child,xml_sub_child,driver,vm_name,vm_id):\n    ssh.connect(xml_child.get("ip_add"), username=xml_child.get("usrnam"), password=xml_child.get("password"))   \n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_finl_data")+vm_name +xml_sub_child.get("cmd"))\n    initial_data=stdout.readlines()\n    print initial_data\n    click_on_setting(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    click_on_operation(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    time.sleep(900)\n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_finl_data")+vm_name +xml_sub_child.get("cmd"))\n    final_data=stdout.readlines()\n    fin_data=str(final_data[2])\n    finl_data=fin_data.split()\n    print finl_data\n    print_graph(finl_data,xml_child)\n\n   \n     \ndef vm_mode(xml_child,xml_sub_child,driver):\n    query_result=execute_query( xml_sub_child.get("query3")).fetchall()\n    print query_result\n    count=0\n    col_count=len(query_result[0])\n    row_count=len(query_result)\n    for length in range(0,(row_count)):\n        vm_id=query_result[length][1]\n        vm_name=query_result[length][0]\n        status=query_result[length][col_count-1]\n        if str(status)==xml_sub_child.get("status"):\n            vm_mode_op(xml_child,xml_sub_child,driver,vm_name,vm_id)\n            break\n        if (str(status)==xml_sub_child.get("other_status1")) | (str(status)==xml_sub_child.get("other_status2")):\n            if (row_count-1)==count: \n                logger.debug(xml_sub_child.get("print_mode"))\n                break\n            count+=1\n            continue\n       \n    return\n    \n    \ndef vm_mode_op(xml_child,xml_sub_child,driver,vm_name,vm_id):\n    if xml_sub_child.get("task")=="graph":\n        graph_test_mode(xml_child,xml_sub_child,driver,vm_name,vm_id)\n        click_on_setting(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    else:\n        click_on_setting(driver,xml_sub_child,xml_child,vm_name,vm_id)\n        if xml_sub_child.get("name") in {"vm_running_Setting_intgrtn","vm_running_Setting"}:\n            check_snapshot(vm_name,driver,xml_child,xml_sub_child)\n            check_user(driver,xml_child,xml_sub_child,vm_name)\n            check_vm_configuration(driver,xml_child,xml_sub_child,vm_name) \n        click_on_operation(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    return\n\n# Checking data on front end and in back end                                            \n                                               \ndef result_setting_page(field,query_result,driver,xml_child,xml_sub_child):\n    i=0\n    for t in field:\n        print "screen=" + str(t.text)\n        print "db=" + str(query_result[i][0])\n        if str(query_result[i][0]) in t.text:\n            logger.debug("correct inputs")\n        else :\n            logger.debug("Incorrect inputs")\n        i+=1 \n    return\n\n#Checking data in Snapshot table  \n                                                \ndef check_snapshot(vm_name,driver,xml_child,xml_sub_child):\n    logger.debug("Checking for entries in current snapshot table")\n    path=xml_sub_child.get("xpath_snap")\n    if isElementPresent(driver,xml_child,path):\n        query_result=execute_query(xml_sub_child.get("query4"),(str(vm_name))).fetchall()\n        total_snap=len(query_result)\n        field=driver.find_elements_by_xpath(path)\n        result_setting_page(field,query_result,driver,xml_child,xml_sub_child)\n        return total_snap\n    else :\n        total_snap=""\n        return total_snap\n        \n \n#Checking data in User table         \n       \ndef check_user(driver,xml_child,xml_sub_child,vm_name):\n    logger.debug("Checking for entries in user table")\n    path=xml_sub_child.get("xpath_user")\n    print path\n    if isElementPresent(driver,xml_child,path):\n        query_result=execute_query( xml_sub_child.get("query5"),(str(vm_name))).fetchall()\n        print query_result\n        field=driver.find_elements_by_xpath(path)\n        logger.debug("Checking for entries in Additional user table")\n        result_setting_page(field,query_result,driver,xml_child,xml_sub_child)\n\n      \n#Checking data in Configuration table  \n  \ndef check_vm_configuration(driver,xml_child,xml_sub_child,vm_name):\n    logger.debug("Checking for entries in  configuration table")\n    path=xml_sub_child.get("xpath_conf")\n    if isElementPresent(driver,xml_child,path):\n        query_result=execute_query( xml_sub_child.get("query6"),(str(vm_name))).fetchall()\n        field=driver.find_elements_by_xpath(path)\n        i=0\n        for data in field:\n            logger.debug("screen=" + str(data.text))\n            logger.debug("db=" + str(query_result[0][i]))\n            if str(query_result[0][i]) in data.text:\n                logger.debug("correct data")\n            else :\n                logger.debug("Incorrect data")\n            i+=1\n    return\n\n#Checking data in task table\n\ndef check_vm_task(driver,xml_sub_child,xml_child,vm_name,operation_name):\n    current_time=datetime.datetime.now()\n    break_pt_time=current_time + datetime.timedelta(seconds=220) \n    print datetime.datetime.now()\n    print break_pt_time \n    time.sleep(200)\n    count=1\n    while(count):\n        if(datetime.datetime.now()<=break_pt_time):\n            datas=check_vm_in_pending_task(driver,xml_sub_child,xml_child,vm_name,operation_name)\n            \n            if datas!="":\n                vm_in_pending=datas[0]\n                \n                if vm_in_pending!="1":\n                    vm_in_complted=check_vm_in_completed_task(driver,xml_child,xml_sub_child,vm_name,operation_name)\n                    if vm_in_complted==1:\n                        logger.debug("VM is in Completed Task Table!!!")\n                        count=0\n                        return 1\n                    else:\n                        vm_in_failed=check_vm_in_failed_task(driver,xml_child,xml_sub_child,vm_name,operation_name)\n                        if vm_in_failed==1:\n                            logger.debug("VM is in Failed Task Table!!!")\n                            count=0\n                            return 0\n                        else:\n                            logger.debug("VM does not exist in any table,please check it!!!")\n        else:\n            count=0\n    if (vm_in_pending=="1"):\n        logger.error("VM is in Pending Task Table!!!")    \n        return 0\n\n       \n#retrieving task_start_time\n       \ndef get_task_start_time(driver,xml_sub_child,xml_child,vm_name,operation_name):\n    vm_nam=str(vm_name)\n    vm_oprtn=str(operation_name)\n    qury_result=execute_query(xml_sub_child.get("task_query"),(vm_nam,vm_oprtn)).fetchone() \n             \n    baadal_db.commit()\n    qury_result=execute_query(xml_sub_child.get("task_query"),(vm_nam,vm_oprtn)).fetchone()   \n          \n    baadal_db.commit()\n    if qury_result!=():\n        query_result=execute_query(xml_sub_child.get("task_query"),(vm_nam,vm_oprtn)).fetchone()\n        \n        if (query_result!="None") | (query_result!=()):\n            task_start_time=query_result[1]  \n            \n        else:\n            logger.debug("Error")\n        baadal_db.commit()\n    return task_start_time\n       \n#Checking data in Pending task table    \n    \ndef check_vm_in_pending_task(driver,xml_sub_child,xml_child,vm_name,operation_name):\n    datas=""\n    if xml_sub_child.get("id")=="clone_vm":\n        driver.find_element_by_partial_link_text("My Tasks").click()\n    else:\n        driver.find_element_by_partial_link_text("Tasks").click()\n    path="//table[@id=\'pendingtasks\']/tbody/tr"\n    vm_in_pending=0\n    \n    if isTablePresent(driver,xml_child,path):\n    \ttask_start_time=get_task_start_time(driver,xml_sub_child,xml_child,vm_name,operation_name)\n        field=driver.find_elements_by_xpath(path)\n        for x in field:          \n            if (vm_name in x.text) & (operation_name in x.text)  & (str(task_start_time) in x.text): \n                           \n                vm_in_pending=1\n              \n            datas=str(vm_in_pending)+ " " +str(task_start_time) \n    else:\n    \tdatas=str(vm_in_pending)\n    return datas\n\n\n\n#Checking data in Completed task table                      \ndef check_vm_in_completed_task(driver,xml_child,xml_sub_child,vm_name,operation_name):\n    vm_in_complted=0\n    path="//table[@id=\'completedtasks\']/tbody/tr"\n    if isTablePresent(driver,xml_child,path):\n        task_start_time=get_task_start_time(driver,xml_sub_child,xml_child,vm_name,operation_name)\n        driver.find_element_by_partial_link_text("Completed Tasks").click()\n        field=driver.find_elements_by_xpath(path)\n        vm_in_complted=0\n        vm_nam=str(vm_name)\n        for x in field:\n            if (vm_name in x.text) & (operation_name in x.text)  & (str(task_start_time) in x.text):\n                logger.debug("Your request is Completed!!!!")\n                vm_in_complted=1\n    return vm_in_complted\n                \n\n#Checking data in Failed task table  \t\t\ndef check_vm_in_failed_task(driver,xml_child,xml_sub_child,vm_name,operation_name):\n    vm_in_failed=0\n    path="//table[@id=\'failedtasks\']/tbody/tr"\n    if isTablePresent(driver,xml_child,path):\n        task_start_time=get_task_start_time(driver,xml_sub_child,xml_child,vm_name,operation_name)\n        driver.find_element_by_partial_link_text("Failed Tasks").click()\n        field=driver.find_elements_by_xpath("//table[@id=\'failedtasks\']/tbody/tr")\n        vm_in_failed=0\n        for x in field:\n            if (vm_name in x.text) & (operation_name in x.text)  & (str(task_start_time) in x.text):\n                logger.error("Your request is Failed!!!!")\n                vm_in_failed=1       \n    return vm_in_failed\n\n\n\n#checking data in attach_disk table\n\ndef check_attach_disk(driver,xml_sub_child,xml_child,vm_name,vm_id,operation_name):  \n    driver.find_element_by_partial_link_text("Pending Requests").click()\n    driver.find_element_by_partial_link_text("Attach Disk").click()\n    field=driver.find_elements_by_xpath("//table[@id=\'sortTable2\']/tbody/tr")\n    qery_result=execute_query(\'select id,vm_name from request_queue where status=4 and vm_name=%s order by start_time desc\',(str(vm_name))).fetchone()\n    baadal_db.commit()\n    if qery_result!=():\n        query_result=execute_query(\'select id,vm_name from request_queue where status=4 and vm_name=%s order by start_time desc\',(str(vm_name))).fetchone() \n        vm_ids= query_result[0]\n        if xml_sub_child.get("action")=="approve_request":    \n            driver.find_element_by_xpath("//*[@href=\'/admin/approve_request/"+ str(vm_ids) +"\']").click()        \n    else:\n        \n        driver.find_element_by_xpath("//*a[@href=\'/admin/reject_request/"+ str(vm_ids) +"\']").click()\n       \n    return\n    \n# providing connection to all host exists\ndef conn_host(host_name,vm_status,vm_name,message,total_vm):\n    \n    query_result=execute_query("select host_name,host_ip from host").fetchall()\n    no_of_cols=len(query_result)#calculate number of columns of query\n    for host in range(0,no_of_cols):\n        host_nam=query_result[host][0]\n        host_ip=query_result[host][1]\n        \n        conn = libvirt.open("qemu+ssh://root@" +str(host_ip)+ "/system")\n        for id in conn.listDomainsID():\n            dom = conn.lookupByID(id)\n            infos = dom.info()\n            status=infos[0]\n            status_vm=check_vm_status_on_host(status)\n            print_sanity_result(status_vm,host_name,vm_status,vm_name,message,total_vm,host_ip,host_nam)\n        for vm in conn.listDefinedDomains():\n            status_vm="Off"\n            print_sanity_result(status_vm,host_name,vm_status,vm_name,message,total_vm,host_ip,host_nam)\t   \n\n\n\n#checking data in sanity table\ndef print_sanity_result(status_vm,host_name,vm_status,vm_name,message,total_vm,host_ip,host_nam):\n    for i in range(0,total_vm):\n        vm_nm=vm_name[i]\n        if ((vm_nm==vm_name[i]) & (host_nam==host_name[i])):\n            messg=check_messg_in_db(vm_nm,host_ip,host_nam)\n            if vm_nm==vm_name[i]:\n                logger.debug(\'host=\'+vm_nm)\n                logger.debug(\'screen=\'+vm_name[i])\n                logger.debug(\'Result:correct input\')\n            else:\n                logger.debug(\'host=\'+vm_nm)\n                logger.debug(\'screen=\'+vm_name[i])\n                logger.debug(\'Result:Incorrect input\')\n                \n            if status_vm==vm_status[i]:\n                logger.debug(\'host=\'+status_vm)\n                logger.debug(\'screen=\'+vm_status[i])\n                logger.debug(\'Result:correct input\')\n            else:\n                logger.debug(\'host=\'+status_vm)\n                logger.debug(\'screen=\'+vm_status[i])\n                logger.debug(\'Result:Incorrect input\')\n                \t\n            if messg==message[i]:\n                logger.debug(\'host=\'+messg)\n                logger.debug(\'screen=\'+message[i])\n                logger.debug(\'Result:correct input\')\n            else:\n                logger.debug(\'host=\'+messg)\n                logger.debug(\'screen=\'+message[i])\n                logger.debug(\'Result:Incorrect input\')\n                \n            if host_nam==host_name[i]:\n                logger.debug(\'host=\'+host_nam)\n                logger.debug(\'screen=\'+host_name[i])\n                logger.debug(\'Result:correct input\')\n            else:\n                logger.debug(\'host=\'+host_nam)\n                logger.debug(\'screen=\'+host_name[i])\n                logger.debug(\'Result:Incorrect input\')\n\n\n\n#converting vm status bits on host into status text\t\t\ndef check_vm_status_on_host(status):\n\tif status==1:\n\t\tstatus_vm="Running"\n\tif status==3:\n\t\tstatus_vm="Paused"\n\treturn status_vm\n\n\t\n#checking whether data in sanity table is correct or incorrect    \ndef check_messg_in_db(vm_nm,host_ip,host_nam):    \n    fetch_result=execute_query(" select vm_name,vm_data.status from vm_data,host where vm_data.host_id=host.id and host_ip=%s",(str(host_ip))).fetchall()\n    \n    no_vm_in_db=len(fetch_result)\n    if fetch_result!=():\n        for j in range(0,no_vm_in_db):\n            if vm_nm==fetch_result[j][0]:\n                vm_in_db="True"\n                messg="VM is on expected host "+host_nam\n            else:\n                vm_in_db="False"\n                messg="Orphan, VM is not in database"\n       \n    else:\n        messg="Orphan, VM is not in database"                \n    return messg\n##############################################################################################################\n#  \t\t\t\t\t           functions for various types of input fields  \t\t\t\t          \t     #\n##############################################################################################################\n\t\t\ndef isInput(driver, xml_sub_child):\n    current_time=datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")\n    field = driver.find_element_by_id(xml_sub_child.get("id"))\n    if xml_sub_child.text!=None:\n        field.send_keys(xml_sub_child.text) # sending the user name/password/vm name/purpose etc\n    else:\n        if not (xml_sub_child.get("id") in ["user_password","user_username"]):\n            field.send_keys(str(current_time))\t\n    return current_time\n\ndef\tisInput_add(driver, xml_sub_child):\n    field = driver.find_element_by_id(xml_sub_child.get("user_id"))\n    field.send_keys(xml_sub_child.get("user_id_data"))\n    return\n\ndef isReadOnly(driver, xml_parent,xml_child,xml_sub_child):\n    current_time=datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")\n    field = driver.find_element_by_id(xml_sub_child.get("id"))\n    if field.get_attribute("value")!=\'\':\n        field.send_keys(xml_sub_child.text) # sending the user name/password/vm name/purpose etc\n        if field.get_attribute("value")==xml_sub_child.text:\n            logger.debug(xml_child.get("value")  +\': Result:error\') #logging the report\n        else:\n            logger.debug(xml_child.get("value")  +\': Result:no error\') #logging the report\n    else:\n        logger.debug(xml_child.get("value")  +\': Result:empty\') #logging the report\n    return \n\ndef isWait( driver, xml_parent, xml_child, xml_sub_child):\n    if xml_sub_child.get("id")=="wait":\n        time.sleep(300)\n    else:\n        time.sleep(3)\n    return\n\ndef isSubmit( driver, xml_parent, xml_child, xml_sub_child):\n    driver.find_element_by_xpath(xml_sub_child.text).click()\n    time.sleep(10)    \n    if xml_sub_child.get("id")=="check_data":\n        xpath=xml_sub_child.get("xpath")\n        status=isElementPresent(driver,xml_child,xpath)\n\n        if status==1:\n            logger.debug(str(xml_child.get("value")) +": Correct data")\n        else:\n            logger.debug(str(xml_child.get("value")) +": Incorrect data")\n    return\n\t\n\t\t\t\ndef isButton_add(driver, xml_sub_child,value):\n    driver.find_element_by_xpath(value).click()\n    \n    return\n\n\ndef isClear(driver,xml_sub_child) :\n\tdriver.find_element_by_id(xml_sub_child.get("id")).clear()\t\n\treturn\n\t\ndef isScroll(driver, xml_sub_child):\n\tfield=driver.find_element_by_tag_name("html")\n\tfield.send_keys(xml_sub_child.text)\n\tdriver.execute_script("window.scrollBy(0,200)", "")\n\treturn\n\t\ndef isHref(driver, xml_sub_child,xml_child):\n    driver.find_element_by_partial_link_text(xml_sub_child.text).click()\n    if xml_sub_child.get("id")=="collaborator":\n        xpath=xml_sub_child.get("xpath")\n        if isElementPresent(driver,xml_child,table_path):\n         \n            field=driver.find_element_by_xpath(xpath)    \n            result=xml_sub_child.get("result")\n            field_text=field.get_attribute("innerHTML")\n            print_result(field_text,result,xml_child)\n        else:\n            logger.error("Error in the form")\n\treturn\n\ndef isSelect(driver, xml_sub_child):\n\tdriver.find_element_by_xpath(xml_sub_child.text).click()\n\treturn\n\ndef isImage(driver,xml_child,xml_sub_child,a):\t\n    if isElementPresent(driver,xml_child,a):\n        vm_mode(xml_child,xml_sub_child,driver)\n    return \n    \ndef isTable(driver,xml_parent,xml_child,xml_sub_child):\n    status_list={0:"Error",1:"failed_tasks",2:"TRY AGAIN | IGNORE",3:"my_pending_vm",4:"admin_pending_attach_disk",5:"pending_user_install_vm",6:"pending_user_clone_vm",7:"pending_user_attach_disk",8:"pending_user_edit_conf",9:"host_and_vm",10:"Configure_host",11:"admin_pending_clone_vm",12:"admin_pending_install_vm" ,13:\'Configure_security\',14:\'pending_fac_install_vm\',15:\'pending_org_install_vm\',16:\'pending_org_clone_vm\',17:\'pending_org_attach_disk\',18:\'pending_org_edit_conf\',19:"admin_pending_edit_conf" ,20:\'list_my_vm\',21:\'fac_pending_attach_disk\'}\n    table_path=xml_sub_child.text\n    if isTablePresent(driver,xml_child,table_path):\n        cur=execute_query( xml_child.get("query3"))\n        query_result=cur.fetchall()\n        \n        cur.close()\n        length=len(query_result[0])#calculate number of columns of query\n        length_row=len(query_result)#calculate number of columns of query\n        row_count=0 #number of rows in the table\n        col_count=0 #number of columns in the table\n        field=driver.find_elements_by_xpath(xml_sub_child.text)#data from gui\n        \n        count=0\n        for col in field:\n            field_text=col.text\n           \n            if field_text!="":\n                count=count+1\n        print count\n        total=length_row*length\n        print total\n        if (str(total)==str(count)):\n            for col in field:\n                field_text=col.text\n                if (field_text!=""):\n            \n                    if field_text==status_list[0]:\n                        text=open_error_page(driver,xml_parent,field_text,row_count)\n                        result=query_result[row_count][col_count]#data form query\n                        print_result(text,result,xml_child)\n                    \n                    elif (query_result[row_count][col_count]==4) & (xml_parent.get("name")==status_list[1]):\n                        result=status_list[2]\n                        print_result(field_text,result,xml_child)\n                    \n                    elif (col_count%int(length)==7) & (xml_parent.get("name")==status_list[20]):\n                    \tstatus=query_result[row_count][col_count]\n                        result=admin_vm_status(status)\n                        print result\n                        print_result(field_text,result,xml_child)\n                    \n                    elif ((col_count%int(length)==3) & ( (xml_parent.get("name")==status_list[14]) | (xml_parent.get("name")==status_list[15]) | (xml_parent.get("name")==status_list[21]) | (xml_parent.get("name")==status_list[16]) | (xml_parent.get("name")==status_list[17]))) | (col_count%int(length)==4) & ((xml_parent.get("name")==status_list[4]) | (xml_parent.get("name")==status_list[7]) | (xml_parent.get("name")==status_list[6]) | (xml_parent.get("name")==status_list[5]) | (xml_parent.get("name")==status_list[11])) | ((col_count%int(length)==5) & (\n                    xml_parent.get("name")==status_list[12])) :\n                        ram=query_result[row_count][col_count]\n                        result=check_vm_ram(ram)\n                        print_result(field_text,result,xml_child) \n                    \n                    elif (col_count%int(length)==4) & ( (xml_parent.get("name")==status_list[14]) | (xml_parent.get("name")==status_list[15]) )  | ((col_count%int(length)==6) & (xml_parent.get("name")==status_list[12])) | (col_count%int(length)==5) & (xml_parent.get("name")==status_list[5]) :\n                        extra_disk=query_result[row_count][col_count]\n                        result=check_extra_disk(extra_disk)\n                        print_result(field_text,result,xml_child)   \n                    \n\n                    elif (((col_count%int(length)==4) |  (col_count%int(length)==5) | (col_count%int(length)==6 )) &  (xml_parent.get("name")==status_list[17]) | (xml_parent.get("name")==status_list[21]) ) |  ((col_count%int(length)==4) & (xml_parent.get("name")==status_list[16])) | ((col_count%int(length)==5) & ((xml_parent.get("name")==status_list[11]) | (xml_parent.get("name")==status_list[6]))) | ((col_count%int(length)==7) & (xml_parent.get("name")==status_list[4]))  | (((col_count%int(length)==7) |  (col_count%int(length)==5) | (col_count%int(length)==6 )) & ((xml_parent.get("name")==status_list[7]) | (xml_parent.get("name")==status_list[4]))):\n                        mem=query_result[row_count][col_count]\n                        result=check_mem(mem)\n                        print_result(field_text,result,xml_child)  \n                 \n                    elif (((col_count%int(length)==8)| (col_count%int(length)==9)) & (xml_parent.get("name")==status_list[4])) | (((col_count%int(length)==7) | (col_count%int(length)==8)) & (xml_parent.get("name")==status_list[11])) | (((col_count%int(length)==8) | (col_count%int(length)==9)) & (xml_parent.get("name")==status_list[12])):\n                        logger.debug("correct entries")\n                    \n                    elif (col_count%int(length)==4) & (xml_parent.get("name")==status_list[13]):\n                        status=query_result[row_count][col_count]\n                        result=check_security_visibilty(status)\n                        print_result(field_text,result,xml_child)\n                    \n                    elif (col_count%int(length)==2) & (xml_parent.get("name")==status_list[10]):\n                        status=query_result[row_count][col_count]\n                        result=host_status(status)\n                        print_result(field_text,result,xml_child)   \n                     \n                    elif (col_count%int(length)==7) & ( (xml_parent.get("name")==status_list[5]) | (xml_parent.get("name")==status_list[6])) | ((col_count%int(length)==8) & (xml_parent.get("name")==status_list[7])):\n                        status=query_result[row_count][col_count]\n                        result=user_vm_status(status)\n                        print_result(field_text,result,xml_child)  \n                        \n                    elif (col_count%int(length)==2) & ( (xml_parent.get("name")==status_list[17]) | (xml_parent.get("name")==status_list[21]) | (xml_parent.get("name")==status_list[14]) | (xml_parent.get("name")==status_list[15])) | ((col_count%int(length)==5) &  (xml_parent.get("name")==status_list[16])) | ((col_count%int(length)==6) &  ((xml_parent.get("name")==status_list[11])  | (xml_parent.get("name")==status_list[6]))) | ((col_count%int(length)==3) & ( (xml_parent.get("name")==status_list[4]) | (xml_parent.get("name")==status_list[7]) | (xml_parent.get("name")==status_list[5]))) | ((col_count%int(length)==4) &  (xml_parent.get("name")==status_list[12])):\n                        status=query_result[row_count][col_count]\n                        result=check_vcpu(status)\n                        print_result(field_text,result,xml_child)  \n                        \n                    elif ((col_count%int(length)==6) & (xml_parent.get("name")==status_list[14])) | ( (col_count%int(length)==7) & (xml_parent.get("name")==status_list[21])):\n                        owner_name_db=query_result[row_count][col_count]\n                        owner_name_screen=xml_child[0].text\n                        print owner_name_db\n                        print owner_name_screen\n                        result=faculty_vm_stataus(owner_name_db,owner_name_screen,xml_child)\n                        print_result(field_text,result,xml_child)     \n                    \n                    elif (col_count%int(length)==6) & ((xml_parent.get("name")==status_list[15]) | (xml_parent.get("name")==status_list[16]) ) | ((col_count%int(length)==7) & (xml_parent.get("name")==status_list[17])):\n                    \tstatus=query_result[row_count][col_count]\n                    \tresult=org_task_status(status,xml_child)\n                    \tprint_result(field_text,result,xml_child)\n                        \n                    elif (col_count%int(length)==1) & (xml_parent.get("name")==status_list[12]):\n                        vm_name=query_result[row_count][4]\n                        query_results=execute_query( xml_sub_child.get("query_collbtr"),(str(vm_name))).fetchall()\n                        len_query=len(query_results)\n                        if query_results!="None":\n                            for m in range(0,len_query):\n                                result=query_results[m][0]\n                                print_result(field_text,result,xml_child)\n                        else:\n                            logger.debug(xml_child.get("value") +\': Result:correct input\')\t\t\n                    else:\n                        result=query_result[row_count][col_count]\n                        print_result(field_text,result,xml_child)\n                    col_count+=1\n                    if col_count%int(length)==0:\n                        row_count+=1\n                        col_count=0\t\n        else:\n            logger.error("Error:tuple out of index")\n    return\n\ndef faculty_vm_stataus(owner_name_db,owner_name_screen,xml_child):\n\tuser_name=xml_child[0].text\n\tprint user_name\n\tif owner_name_screen==str(owner_name_db):\n\t\tresult="Approve  |  Reject | Edit"\n\telse:\n\t\tresult="Remind Faculty"\n\treturn result\n\ndef user_vm_status(status):\n\tif (status==1) | (status==4):\n\t\tresult="Waiting for admin approval"\n\tif status==2:\n\t\tresult="Approved. In Queue."\n\tif status==3:\n\t\tresult=" Waiting for org admin approval"\n\tif status==-1:\n\t\tresult=\'Task failed. Contact administrator.\'\n\treturn result\n#converting port status bits into status text\ndef check_port_enabled(vm_name):\n    query_result=execute_query("select enable_ssh,enable_http from request_queue where vm_name=%s",(str(vm_name))).fetchall()\n    enable_ssh=query_result[0][0]\n    enable_http=query_result[0][1]\n    if (enable_ssh=="F") & (enable_http=="F"):\n        result="-"\n    if (enable_ssh=="T") & (enable_http=="F"):\n        result="SSH"\n    if (enable_ssh=="F") & (enable_http=="T"):\n        result="HTTP"\n    if (enable_ssh=="T") & (enable_http=="T"):\n        result="SSH,HTTP"\n    return result\n\n\n\n\n#converting security visibility status bits into status text\ndef check_security_visibilty(status):\n    if status=="T":\n        result="ALL"\n    else:\n        result="NO"\n    return result\n\n\n#converting vCPU status bits into status text\ndef check_vcpu(status):\n\tstatus=str(status) + " CPU"\n\treturn status\n#converting memory bits into  text\ndef check_mem(mem):\n    if mem==0:\n        result="-"\n    else:\n        result=str(mem)+"GB"\n    return result\n    \n\n#converting extra disk bits into  text\ndef check_extra_disk(extra_disk):\n    if extra_disk==0:\n        result="40GB"\n    else:\n        result="40GB + " + str(extra_disk) + "GB" \n    return result\n\n#converting ram bits into  text\ndef check_vm_ram(ram):\n    if ram==1024:\n        result="1GB"\n    if ram==2048:\n        result="2GB"\n    if ram==4096:\n        result="4GB"\n    if ram==8192:\n        result="8GB"\n    return result\n\n\n\n#checking data into host table\ndef isCheckTable(driver, xml_parent, xml_child, xml_sub_child):\n    field=driver.find_elements_by_xpath(xml_sub_child.get("path"))\n    query_result=execute_query(xml_parent.get("query3")).fetchall()\n    print query_result\n    table=0\n    for header in field:\n        host_ip=query_result[table][0]\n        if query_result[table][0] in header.text:\n            table_path=xml_sub_child.text\n            if isTablePresent(driver,xml_child,table_path):\n                result_fetch=execute_query(xml_parent.get("query4"),str(host_ip)).fetchall()\n                if result_fetch!=():\n                    field=driver.find_elements_by_xpath(xml_sub_child.text)\n                    no_of_cols=len(result_fetch[0])#calculate number of columns of query\n                    #print field.text\n                    row_count=0\n                    col_count=0\n                    for col in field:\n                        field_text=col.text\n                        if field_text!="":\n                            if col_count%int(no_of_cols)==5:\n                                status=result_fetch[row_count][col_count]\n                           \n                                result=admin_vm_status(status)\n                            else:\n                                result=result_fetch[row_count][col_count]\n                            print_result(field_text,result,xml_child)\n                            col_count+=1\n                            if col_count%int(no_of_cols)==0:\n                                row_count+=1\n                                col_count=0\t\n                else:\n                    logger.debug("No VM Exists on "+str(host_ip))\n        table=table+1\n    return\n\n\n#approving or rejecting vm operations   \ndef isCheckdata(driver,xml_parent, xml_child, xml_sub_child,vm_name):\n    print vm_name\n    table_path=xml_sub_child.text\n    if isTablePresent(driver,xml_child,table_path):\n        field=driver.find_elements_by_xpath(xml_sub_child.text)#data from gui\n        if  xml_sub_child.get("data")=="integeration":\n            query_result=execute_query( xml_sub_child.get("query3"),str(vm_name)).fetchone()\n            baadal_db.commit()\n            query_result=execute_query( xml_sub_child.get("query3"),str(vm_name)).fetchone()\n            print query_result\n            result=query_result[0]\n        else:\n            query_result=execute_query( xml_sub_child.get("query3")).fetchone()\n            print query_result\n            result=query_result[1]\n        for a in field:\n            row=a.text\n            op_id=xml_sub_child.get("id")\n            if vm_name!="":\n            \tprint "123"\n                if ("Approve  |  Reject  |  Edit" in row) :\n                    print "2"\n                    check_operation(driver,xml_parent, xml_child, xml_sub_child,op_id,result)\n                    break\n                if  (op_id=="admin"):\n                    op_id="admin"\n                    check_operation(driver,xml_parent, xml_child, xml_sub_child,op_id,result)\n                    break\n               \n            else:\n                if ("Approve  |  Reject  |  Edit" in row & str(vm_name) in row) | (op_id=="admin") :\n                \n                    check_operation(driver,xml_parent, xml_child, xml_sub_child,op_id,result)\n                    break\n    return\n\n\ndef check_operation(driver,xml_parent, xml_child, xml_sub_child,op_id,result):\n    request=xml_sub_child.get("click")\n    driver.find_element_by_xpath("//*[@href=\'/baadal/"+ str(op_id) +"/"+str(request)+"/"+str(result) +"\']").click()\n    result=xml_sub_child.get("print_data")\n    field_text=message_flash(driver,xml_sub_child,xml_child)\n    print_result(field_text,result,xml_child)\n    return\n\n\ndef isSanityCheck(driver, xml_parent, xml_child, xml_sub_child):\n  \n    field=driver.find_elements_by_xpath("//div[@id=\'sanity_check_table\']/table/tbody/tr/td")\n#print field.text\n    row_count=0\n    col_count=0\n    host_name=[]\n    vm_status=[]\n    vm_name=[]\n    message=[]\n    operation=[]\n    for col in field:\n        field_text=col.text\n        if col_count%5==0:\n            host_name.insert(row_count,field_text)\n           \n        if col_count%5==1:\n            vm_status.insert(row_count,field_text)\n           \n        if col_count%5==2:\n            vm_name.insert(row_count,field_text)\n           \n        if col_count%5==3:\n            message.insert(row_count,field_text)\n           \n        if col_count%5==4:\n            operation.insert(row_count,field_text)\n           \n        if col_count%5==0:\n            \n            row_count+=1\n            col_count=0\t\n        col_count+=1\n       \n    total_vm=len(vm_name)  \n    \n    conn_host(host_name,vm_status,vm_name,message,total_vm)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__module__'
p12
S"'_mysql_exceptions'"
p13
sS'__getslice__'
p14
S"<method-wrapper '__getslice__' of OperationalError object>"
p15
sS'__str__'
p16
S"<method-wrapper '__str__' of OperationalError object>"
p17
sS'__reduce__'
p18
S'<built-in method __reduce__ of OperationalError object>'
p19
sS'__dict__'
p20
S'{}'
p21
sS'__sizeof__'
p22
S'<built-in method __sizeof__ of OperationalError object>'
p23
sS'__weakref__'
p24
S'None'
p25
sS'__init__'
p26
S"<method-wrapper '__init__' of OperationalError object>"
p27
sS'__setattr__'
p28
S"<method-wrapper '__setattr__' of OperationalError object>"
p29
sS'__reduce_ex__'
p30
S'<built-in method __reduce_ex__ of OperationalError object>'
p31
sS'__new__'
p32
S'<built-in method __new__ of type object>'
p33
sS'__format__'
p34
S'<built-in method __format__ of OperationalError object>'
p35
sS'__class__'
p36
S"<class '_mysql_exceptions.OperationalError'>"
p37
sS'__doc__'
p38
S"'Exception raised for errors that are related to ...cation\\n    error occurred during processing, etc.'"
p39
sS'__getitem__'
p40
S"<method-wrapper '__getitem__' of OperationalError object>"
p41
sS'__setstate__'
p42
S'<built-in method __setstate__ of OperationalError object>'
p43
sS'__getattribute__'
p44
S"<method-wrapper '__getattribute__' of OperationalError object>"
p45
sS'args'
p46
S'(2003, "Can\'t connect to MySQL server on \'10.208.21.76\' (113)")'
p47
sS'__subclasshook__'
p48
S'<built-in method __subclasshook__ of type object>'
p49
sS'__unicode__'
p50
S'<built-in method __unicode__ of OperationalError object>'
p51
sS'__delattr__'
p52
S"<method-wrapper '__delattr__' of OperationalError object>"
p53
sS'__repr__'
p54
S"<method-wrapper '__repr__' of OperationalError object>"
p55
sS'__hash__'
p56
S"<method-wrapper '__hash__' of OperationalError object>"
p57
ssS'evalue'
p58
S'(2003, "Can\'t connect to MySQL server on \'10.208.21.76\' (113)")'
p59
sS'request'
p60
cgluon.html
XML_unpickle
p61
(S's\xadM\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top">ajax</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">application</td><td valign="top">:</td><td><div>testapp_24</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">args</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">body</td><td valign="top">:</td><td><div>&lt;cStringIO.StringO object at 0x7f8d0c496810&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cid</td><td valign="top">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">client</td><td valign="top">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">controller</td><td valign="top">:</td><td><div>default</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cookies</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">session_id_admin</td><td valign="top">:</td><td><div>127.0.0.1-e12fa0d9-b51b-4f3d-b1a6-122721d44258<table><tr><td style="font-weight:bold;vertical-align:top">comment</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">domain</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">expires</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">httponly</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">max-age</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">path</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">secure</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">version</td><td valign="top">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_id_testapp_24</td><td valign="top">:</td><td><div>127.0.0.1-ca708d8c-8624-4365-a6cf-5c08e6b5193c<table><tr><td style="font-weight:bold;vertical-align:top">comment</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">domain</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">expires</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">httponly</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">max-age</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">path</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">secure</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">version</td><td valign="top">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">env</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">app_folders</td><td valign="top">:</td><td><div>set([&#x27;/home/monika/Desktop/web2py/applications/admin/&#x27;, &#x27;/home/monika/Desktop/web2py/applications/testapp_24/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">applications_parent</td><td valign="top">:</td><td><div>/home/monika/Desktop/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cmd_args</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cmd_options</td><td valign="top">:</td><td><div>&lt;Values at 0x370ed40: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;with_scheduler&#x27;: False, &#x27;ips&#x27;: [], &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;port&#x27;: 8000, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;dell-OptiPlex-7010&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;/home/monika/Desktop/web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;winservice&#x27;: &#x27;&#x27;, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;profiler_filename&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;scheduler_groups&#x27;: None, &#x27;password&#x27;: &#x27;&lt;ask&gt;&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;interfaces&#x27;: None, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">db_sessions</td><td valign="top">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">debugging</td><td valign="top">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">gluon_parent</td><td valign="top">:</td><td><div>/home/monika/Desktop/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_accept</td><td valign="top">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_accept_encoding</td><td valign="top">:</td><td><div>gzip, deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_accept_language</td><td valign="top">:</td><td><div>en-US,en;q=0.5</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_connection</td><td valign="top">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_cookie</td><td valign="top">:</td><td><div>session_id_admin=127.0.0.1-e12fa0d9-b51b-4f3d-b1a6-122721d44258; session_id_testapp_24=127.0.0.1-ca708d8c-8624-4365-a6cf-5c08e6b5193c</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_host</td><td valign="top">:</td><td><div>127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_user_agent</td><td valign="top">:</td><td><div>Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:21.0) Gecko/20100101 Firefox/21.0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_jython</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_pypy</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">local_hosts</td><td valign="top">:</td><td><div><table><tr><td><div>127.0.1.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>dell-OptiPlex-7010</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">path_info</td><td valign="top">:</td><td><div>/testapp_24/default/integration_testing</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">query_string</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">remote_addr</td><td valign="top">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">remote_port</td><td valign="top">:</td><td><div>60263</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">request_method</td><td valign="top">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">request_uri</td><td valign="top">:</td><td><div>/testapp_24/default/integration_testing</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">script_name</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">server_name</td><td valign="top">:</td><td><div>dell-OptiPlex-7010</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">server_port</td><td valign="top">:</td><td><div>8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">server_protocol</td><td valign="top">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">server_software</td><td valign="top">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_path</td><td valign="top">:</td><td><div>/home/monika/Desktop/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_version</td><td valign="top">:</td><td><div>2.4.4-stable+timestamp.2013.03.11.20.32.00</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_errors</td><td valign="top">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x7f8d41742270&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_file_wrapper</td><td valign="top">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x3676530&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_input</td><td valign="top">:</td><td><div>&lt;socket._fileobject object at 0x7f8d14486cd0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_multiprocess</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_multithread</td><td valign="top">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_run_once</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_url_scheme</td><td valign="top">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_version</td><td valign="top">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">extension</td><td valign="top">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">folder</td><td valign="top">:</td><td><div>/home/monika/Desktop/web2py/applications/testapp_24/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">function</td><td valign="top">:</td><td><div>integration_testing</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">get_vars</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">global_settings</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">app_folders</td><td valign="top">:</td><td><div>set([&#x27;/home/monika/Desktop/web2py/applications/admin/&#x27;, &#x27;/home/monika/Desktop/web2py/applications/testapp_24/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">applications_parent</td><td valign="top">:</td><td><div>/home/monika/Desktop/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cmd_args</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cmd_options</td><td valign="top">:</td><td><div>&lt;Values at 0x370ed40: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;with_scheduler&#x27;: False, &#x27;ips&#x27;: [], &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;port&#x27;: 8000, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;dell-OptiPlex-7010&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;/home/monika/Desktop/web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;winservice&#x27;: &#x27;&#x27;, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;profiler_filename&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;scheduler_groups&#x27;: None, &#x27;password&#x27;: &#x27;&lt;ask&gt;&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;interfaces&#x27;: None, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">db_sessions</td><td valign="top">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">debugging</td><td valign="top">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">gluon_parent</td><td valign="top">:</td><td><div>/home/monika/Desktop/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_jython</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_pypy</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">local_hosts</td><td valign="top">:</td><td><div><table><tr><td><div>127.0.1.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>dell-OptiPlex-7010</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_version</td><td valign="top">:</td><td><div>2.4.4-stable+timestamp.2013.03.11.20.32.00</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_https</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_local</td><td valign="top">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_restful</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">now</td><td valign="top">:</td><td><div>datetime.datetime(2014, 2, 11, 14, 11, 5, 103257)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">post_vars</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">raw_args</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">raw_extension</td><td valign="top">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">url</td><td valign="top">:</td><td><div>/testapp_24/default/integration_testing</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">utcnow</td><td valign="top">:</td><td><div>datetime.datetime(2014, 2, 11, 8, 41, 5, 103324)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">uuid</td><td valign="top">:</td><td><div>testapp_24/127.0.0.1.2014-02-11.14-11-05.0beb7592-cd36-4fd1-998b-c72f4e547e7b</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">vars</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">environ</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">HTTP_ACCEPT</td><td valign="top">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_ACCEPT_ENCODING</td><td valign="top">:</td><td><div>gzip, deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_ACCEPT_LANGUAGE</td><td valign="top">:</td><td><div>en-US,en;q=0.5</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_CONNECTION</td><td valign="top">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_COOKIE</td><td valign="top">:</td><td><div>session_id_admin=127.0.0.1-e12fa0d9-b51b-4f3d-b1a6-122721d44258; session_id_testapp_24=127.0.0.1-ca708d8c-8624-4365-a6cf-5c08e6b5193c</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_HOST</td><td valign="top">:</td><td><div>127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_USER_AGENT</td><td valign="top">:</td><td><div>Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:21.0) Gecko/20100101 Firefox/21.0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">PATH_INFO</td><td valign="top">:</td><td><div>/testapp_24/default/integration_testing</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">QUERY_STRING</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">REMOTE_ADDR</td><td valign="top">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">REMOTE_PORT</td><td valign="top">:</td><td><div>60263</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">REQUEST_METHOD</td><td valign="top">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">REQUEST_URI</td><td valign="top">:</td><td><div>/testapp_24/default/integration_testing</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SCRIPT_NAME</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SERVER_NAME</td><td valign="top">:</td><td><div>dell-OptiPlex-7010</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SERVER_PORT</td><td valign="top">:</td><td><div>8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SERVER_PROTOCOL</td><td valign="top">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SERVER_SOFTWARE</td><td valign="top">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.errors</td><td valign="top">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x7f8d41742270&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.file_wrapper</td><td valign="top">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x3676530&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.input</td><td valign="top">:</td><td><div>&lt;cStringIO.StringO object at 0x7f8d0c496810&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.multiprocess</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.multithread</td><td valign="top">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.run_once</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.url_scheme</td><td valign="top">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.version</td><td valign="top">:</td><td><div>1</div></td></tr></table></div></td></tr></table></div></td></tr></table></div>'
tRp62
sS'frames'
p63
(lp64
(dp65
S'file'
p66
S'/home/monika/Desktop/web2py/gluon/restricted.py'
p67
sS'dump'
p68
(dp69
S'environment'
p70
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, ...}"
p71
sS'ccode'
p72
S'<code object <module> at 0x7f8d1c3d0b30, file "/.../applications/testapp_24/models/test.py", line 2>'
p73
ssS'lnum'
p74
I212
sS'lines'
p75
(dp76
I207
S'    try:'
p77
sI208
S'        if isinstance(code, types.CodeType):'
p78
sI209
S'            ccode = code'
p79
sI210
S'        else:'
p80
sI211
S'            ccode = compile2(code, layer)'
p81
sI212
S'        exec ccode in environment'
p82
sI213
S'    except HTTP:'
p83
sI214
S'        raise'
p84
sI215
S'    except RestrictedError:'
p85
sI216
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p86
ssS'call'
p87
S"(code='# coding: utf8\\nimport os\\nimport thread\\nimport pa...st(host_name,vm_status,vm_name,message,total_vm)\\n', environment={'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, ...}, layer='/home/monika/Desktop/web2py/applications/testapp_24/models/test.py')"
p88
sS'func'
p89
S'restricted'
p90
sa(dp91
g66
S'/home/monika/Desktop/web2py/applications/testapp_24/models/test.py'
p92
sg68
(dp93
S'db_connection'
p94
S'<function db_connection>'
p95
sS'baadal_db'
p96
S'undefined'
p97
ssg74
I26
sg75
(dp98
I21
S''
sI22
S'#creating a logger for logging the records'
p99
sI23
S'logger = logging.getLogger("web2py.app.testapp")'
p100
sI24
S''
sI25
S'#creating connection to remote database'
p101
sI26
S'baadal_db=db_connection()'
p102
sI27
S''
sI28
S''
sI29
S'#creating connection to remote system'
p103
sI30
S'ssh = paramiko.SSHClient()'
p104
ssg87
S'()'
p105
sg89
S'<module>'
p106
sa(dp107
g66
S'/home/monika/Desktop/web2py/applications/testapp_24/modules/helper.py'
p108
sg68
(dp109
S'database_user_name'
p110
S"'baadaltesting'"
p111
sS'db'
p112
g97
sS'database_name'
p113
S"'baadal'"
p114
sS'global mdb'
p115
S"<module 'MySQLdb' from '/usr/local/lib/python2.7...2.3-py2.7-linux-x86_64.egg/MySQLdb/__init__.pyc'>"
p116
sS'host_ip'
p117
S"'10.208.21.76'"
p118
sS'mdb.connect'
p119
S'<function Connect>'
p120
sS'password'
p121
S"'test_baadal'"
p122
ssg74
I29
sg75
(dp123
I32
S''
sI33
S'def get_app_name():'
p124
sI24
S"    Config.read(os.path.join(get_context_path(),'static/db.conf'))"
p125
sI25
S'    host_ip=Config.get("db_info","host_ip")'
p126
sI26
S'    database_user_name=Config.get("db_info","database_user_name")'
p127
sI27
S'    database_name=Config.get("db_info","database_name")'
p128
sI28
S'    password=Config.get("db_info","password")'
p129
sI29
S'    db=mdb.connect(host_ip,database_user_name,password,database_name)'
p130
sI30
S'    return db'
p131
sI31
S''
ssg87
S'()'
p132
sg89
S'db_connection'
p133
sa(dp134
g66
S'/usr/local/lib/python2.7/dist-packages/MySQL_python-1.2.3-py2.7-linux-x86_64.egg/MySQLdb/__init__.py'
p135
sg68
(dp136
S'Connection'
p137
S"<class 'MySQLdb.connections.Connection'>"
p138
sS'args'
p139
S"('10.208.21.76', 'baadaltesting', 'test_baadal', 'baadal')"
p140
sS'kwargs'
p141
g21
ssg74
I81
sg75
(dp142
I76
S'    return str(x)'
p143
sI77
S''
sI78
S'def Connect(*args, **kwargs):'
p144
sI79
S'    """Factory function for connections.Connection."""'
p145
sI80
S'    from connections import Connection'
p146
sI81
S'    return Connection(*args, **kwargs)'
p147
sI82
S''
sI83
S'connect = Connection = Connect'
p148
sI84
S''
sI85
S"__all__ = [ 'BINARY', 'Binary', 'Connect', 'Connection', 'DATE',"
p149
ssg87
S"(*args=('10.208.21.76', 'baadaltesting', 'test_baadal', 'baadal'), **kwargs={})"
p150
sg89
S'Connect'
p151
sa(dp152
g66
S'/usr/local/lib/python2.7/dist-packages/MySQL_python-1.2.3-py2.7-linux-x86_64.egg/MySQLdb/connections.py'
p153
sg68
(dp154
S'global Connection'
p155
S"<class 'MySQLdb.connections.Connection'>"
p156
sS'kwargs2'
p157
S"{'client_flag': 196608, 'conv': {0: <class 'decimal.Decimal'>, 1: <type 'int'>, 2: <type 'int'>, 3: <type 'long'>, 4: <type 'float'>, 5: <type 'float'>, 7: <function mysql_timestamp_converter>, 8: <type 'long'>, 9: <type 'int'>, 10: <function Date_or_None>, ...}}"
p158
sS'self'
p159
S'<_mysql.connection closed at 7f8d28944580>'
p160
sS'args'
p161
S"('10.208.21.76', 'baadaltesting', 'test_baadal', 'baadal')"
p162
sS').__init__'
p163
S'<bound method Connection.__init__ of <_mysql.connection closed at 7f8d28944580>>'
p164
sS'builtinsuper'
p165
S"<type 'super'>"
p166
ssg74
I187
sg75
(dp167
I182
S'        if client_version >= (5, 0):'
p168
sI183
S'            client_flag |= CLIENT.MULTI_RESULTS'
p169
sI184
S''
sI185
S"        kwargs2['client_flag'] = client_flag"
p170
sI186
S''
sI187
S'        super(Connection, self).__init__(*args, **kwargs2)'
p171
sI188
S''
sI189
S'        self.encoders = dict([ (k, v) for k, v in conv.items()'
p172
sI190
S'                               if type(k) is not int ])'
p173
sI191
S''
ssg87
S"(self=<_mysql.connection closed at 7f8d28944580>, *args=('10.208.21.76', 'baadaltesting', 'test_baadal', 'baadal'), **kwargs={})"
p174
sg89
g26
sasS'pyver'
p175
S'Python 2.7.3: /usr/bin/python (prefix: /usr)'
p176
sS'session'
p177
g61
(S's\x1a\x00\x00\x00<div><table></table></div>'
tRp178
sS'etype'
p179
S"<class '_mysql_exceptions.OperationalError'>"
p180
sS'date'
p181
S'Tue Feb 11 14:11:07 2014'
p182
sS'response'
p183
g61
(S's\xe8,\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top">body</td><td valign="top">:</td><td><div>&lt;cStringIO.StringO object at 0x7f8d14494260&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cookies</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">session_id_testapp_24</td><td valign="top">:</td><td><div>127.0.0.1-ca708d8c-8624-4365-a6cf-5c08e6b5193c<table><tr><td style="font-weight:bold;vertical-align:top">comment</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">domain</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">expires</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">httponly</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">max-age</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">path</td><td valign="top">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">secure</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">version</td><td valign="top">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">delimiters</td><td valign="top">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">files</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">flash</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">generic_patterns</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">google_analytics_id</td><td valign="top">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">headers</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">X-Powered-By</td><td valign="top">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">logo</td><td valign="top">:</td><td><div><a class="brand" href="http://www.web2py.com/"><b>web<span>2</span>py</b>&trade;&nbsp;</a></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">menu</td><td valign="top">:</td><td><div><table><tr><td><div><table><tr><td><div>Home</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/testapp_24/default/index</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div><span class="highlighted">web2py</span></div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>My Sites</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/site</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>This App</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/design/testapp_24</div></td></tr><tr><td><div>[(&lt;lazyT &#x27;Controller&#x27;&gt;, False, &#x27;/admin/default/edit/testapp_24/controllers/default.py&#x27;), (&lt;lazyT &#x27;View&#x27;&gt;, False, &#x27;/admin/default/edit/testapp_24/views/default/integration_testing.html&#x27;), (&lt;lazyT &#x27;Layout&#x27;&gt;, False, &#x27;/admin/default/edit/testapp_24/views/layout.html&#x27;), (&lt;lazyT &#x27;Stylesheet&#x27;&gt;, False, &#x27;/admin/default/edit/testapp_24/static/css/web2py.css&#x27;), (&lt;lazyT &#x27;DB Model&#x27;&gt;, False, &#x27;/admin/default/edit/testapp_24/models/db.py&#x27;), (&lt;lazyT &#x27;Menu Model&#x27;&gt;, False, &#x27;/admin/default/edit/testapp_24/models/menu.py&#x27;), (&lt;lazyT &#x27;Database&#x27;&gt;, False, &#x27;/testapp_24/appadmin/index&#x27;), (&lt;lazyT &#x27;Errors&#x27;&gt;, False, &#x27;/admin/default/errors/testapp_24&#x27;), (&lt;lazyT &#x27;About&#x27;&gt;, False, &#x27;/admin/default/about/testapp_24&#x27;)]</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>web2py.com</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com</div></td></tr><tr><td><div>[(&lt;lazyT &#x27;Download&#x27;&gt;, False, &#x27;http://www.web2py.com/examples/default/download&#x27;), (&lt;lazyT &#x27;Support&#x27;&gt;, False, &#x27;http://www.web2py.com/examples/default/support&#x27;), (&lt;lazyT &#x27;Demo&#x27;&gt;, False, &#x27;http://web2py.com/demo_admin&#x27;), (&lt;lazyT &#x27;Quick Examples&#x27;&gt;, False, &#x27;http://web2py.com/examples/default/examples&#x27;), (&lt;lazyT &#x27;FAQ&#x27;&gt;, False, &#x27;http://web2py.com/AlterEgo&#x27;), (&lt;lazyT &#x27;Videos&#x27;&gt;, False, &#x27;http://www.web2py.com/examples/default/videos/&#x27;), (&lt;lazyT &#x27;Free Applications&#x27;&gt;, False, &#x27;http://web2py.com/appliances&#x27;), (&lt;lazyT &#x27;Plugins&#x27;&gt;, False, &#x27;http://web2py.com/plugins&#x27;), (&lt;lazyT &#x27;Layouts&#x27;&gt;, False, &#x27;http://web2py.com/layouts&#x27;), (&lt;lazyT &#x27;Recipes&#x27;&gt;, False, &#x27;http://web2pyslices.com/&#x27;), (&lt;lazyT &#x27;Semantic&#x27;&gt;, False, &#x27;http://web2py.com/semantic&#x27;)]</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Documentation</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book</div></td></tr><tr><td><div>[(&lt;lazyT &#x27;Preface&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/00&#x27;), (&lt;lazyT &#x27;Introduction&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/01&#x27;), (&lt;lazyT &#x27;Python&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/02&#x27;), (&lt;lazyT &#x27;Overview&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/03&#x27;), (&lt;lazyT &#x27;The Core&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/04&#x27;), (&lt;lazyT &#x27;The Views&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/05&#x27;), (&lt;lazyT &#x27;Database&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/06&#x27;), (&lt;lazyT &#x27;Forms and Validators&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/07&#x27;), (&lt;lazyT &#x27;Email and SMS&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/08&#x27;), (&lt;lazyT &#x27;Access Control&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/09&#x27;), (&lt;lazyT &#x27;Services&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/10&#x27;), (&lt;lazyT &#x27;Ajax Recipes&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/11&#x27;), (&lt;lazyT &#x27;Components and Plugins&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/12&#x27;), (&lt;lazyT &#x27;Deployment Recipes&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/13&#x27;), (&lt;lazyT &#x27;Other Recipes&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/14&#x27;), (&lt;lazyT &#x27;Buy this book&#x27;&gt;, False, &#x27;http://stores.lulu.com/web2py&#x27;)]</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Community</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>None</div></td></tr><tr><td><div>[(&lt;lazyT &#x27;Groups&#x27;&gt;, False, &#x27;http://www.web2py.com/examples/default/usergroups&#x27;), (&lt;lazyT &#x27;Twitter&#x27;&gt;, False, &#x27;http://twitter.com/web2py&#x27;), (&lt;lazyT &#x27;Live Chat&#x27;&gt;, False, &#x27;http://webchat.freenode.net/?channels=web2py&#x27;)]</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Plugins</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>None</div></td></tr><tr><td><div>[(&#x27;plugin_wiki&#x27;, False, &#x27;http://web2py.com/examples/default/download&#x27;), (&lt;lazyT &#x27;Other Plugins&#x27;&gt;, False, &#x27;http://web2py.com/plugins&#x27;), (&lt;lazyT &#x27;Layout Plugins&#x27;&gt;, False, &#x27;http://web2py.com/layouts&#x27;)]</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">meta</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">author</td><td valign="top">:</td><td><div>Your Name &lt;you@example.com&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">description</td><td valign="top">:</td><td><div>a cool new app</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">generator</td><td valign="top">:</td><td><div>Web2py Web Framework</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">keywords</td><td valign="top">:</td><td><div>web2py, python, framework</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">models_to_run</td><td valign="top">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^default/\\w+\\.py$</div></td></tr><tr><td><div>^default/integration_testing/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">postprocessing</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_cookie_expires</td><td valign="top">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_data_name</td><td valign="top">:</td><td><div>session_data_testapp_24</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_file</td><td valign="top">:</td><td><div>&lt;open file &#x27;/home/monika/Desktop/web2py/applications/testapp_24/sessions/127.0.0.1-ca708d8c-8624-4365-a6cf-5c08e6b5193c&#x27;, mode &#x27;rb+&#x27; at 0x7f8d04131030&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_filename</td><td valign="top">:</td><td><div>/home/monika/Desktop/web2py/applications/testapp_24/sessions/127.0.0.1-ca708d8c-8624-4365-a6cf-5c08e6b5193c</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_id</td><td valign="top">:</td><td><div>127.0.0.1-ca708d8c-8624-4365-a6cf-5c08e6b5193c</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_id_name</td><td valign="top">:</td><td><div>session_id_testapp_24</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_locked</td><td valign="top">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_new</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_storage_type</td><td valign="top">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">status</td><td valign="top">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">subtitle</td><td valign="top">:</td><td><div>customize me!</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">title</td><td valign="top">:</td><td><div>Testapp 24</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">view</td><td valign="top">:</td><td><div>default/integration_testing.html</div></td></tr></table></div>'
tRp184
sS'locals'
p185
(dp186
S'conversions'
p187
S"{0: <class 'decimal.Decimal'>, 1: <type 'int'>, 2: <type 'int'>, 3: <type 'long'>, 4: <type 'float'>, 5: <type 'float'>, 7: <function mysql_timestamp_converter>, 8: <type 'long'>, 9: <type 'int'>, 10: <function Date_or_None>, ...}"
p188
sS'FIELD_TYPE'
p189
S"<module 'MySQLdb.constants.FIELD_TYPE' from '/us...nux-x86_64.egg/MySQLdb/constants/FIELD_TYPE.pyc'>"
p190
sg46
S"('10.208.21.76', 'baadaltesting', 'test_baadal', 'baadal')"
p191
sS'kwargs2'
p192
S"{'client_flag': 196608, 'conv': {0: <class 'decimal.Decimal'>, 1: <type 'int'>, 2: <type 'int'>, 3: <type 'long'>, 4: <type 'float'>, 5: <type 'float'>, 7: <function mysql_timestamp_converter>, 8: <type 'long'>, 9: <type 'int'>, 10: <function Date_or_None>, ...}}"
p193
sS'conv'
p194
S"{0: <class 'decimal.Decimal'>, 1: <type 'int'>, 2: <type 'int'>, 3: <type 'long'>, 4: <type 'float'>, 5: <type 'float'>, 7: <function mysql_timestamp_converter>, 8: <type 'long'>, 9: <type 'int'>, 10: <function Date_or_None>, ...}"
p195
sS'client_flag'
p196
S'196608'
p197
sS'kwargs'
p198
g21
sS'sql_mode'
p199
S"''"
p200
sS'charset'
p201
S"''"
p202
sS'n'
S"'5'"
p203
sS'WeakValueDictionary'
p204
S'<class weakref.WeakValueDictionary>'
p205
sS'conv2'
p206
S"{0: <class 'decimal.Decimal'>, 1: <type 'int'>, 2: <type 'int'>, 3: <type 'long'>, 4: <type 'float'>, 5: <type 'float'>, 7: <function mysql_timestamp_converter>, 8: <type 'long'>, 9: <type 'int'>, 10: <function Date_or_None>, ...}"
p207
sS'CLIENT'
p208
S"<module 'MySQLdb.constants.CLIENT' from '/usr/lo...7-linux-x86_64.egg/MySQLdb/constants/CLIENT.pyc'>"
p209
sS'use_unicode'
p210
S'False'
p211
sS'v'
S"[(128, <type 'str'>)]"
p212
sS'k'
S'254'
p213
sS'client_version'
p214
S'(5, 5)'
p215
sS'self'
p216
S'<_mysql.connection closed at 7f8d28944580>'
p217
sS'types'
p218
S"<module 'types' from '/usr/lib/python2.7/types.pyc'>"
p219
sS'proxy'
p220
S'<built-in function proxy>'
p221
sssS'traceback'
p222
S'Traceback (most recent call last):\n  File "/home/monika/Desktop/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/monika/Desktop/web2py/applications/testapp_24/models/test.py", line 26, in <module>\n    baadal_db=db_connection()\n  File "applications/testapp_24/modules/helper.py", line 29, in db_connection\n    db=mdb.connect(host_ip,database_user_name,password,database_name)\n  File "/usr/local/lib/python2.7/dist-packages/MySQL_python-1.2.3-py2.7-linux-x86_64.egg/MySQLdb/__init__.py", line 81, in Connect\n    return Connection(*args, **kwargs)\n  File "/usr/local/lib/python2.7/dist-packages/MySQL_python-1.2.3-py2.7-linux-x86_64.egg/MySQLdb/connections.py", line 187, in __init__\n    super(Connection, self).__init__(*args, **kwargs2)\nOperationalError: (2003, "Can\'t connect to MySQL server on \'10.208.21.76\' (113)")\n'
p223
s.