(dp1
S'output'
p2
S'<class \'_mysql_exceptions.ProgrammingError\'> (1064, "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'%s\' at line 1")'
p3
sS'layer'
p4
S'/home/monika/Desktop/web2py/applications/todo/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\n\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in \n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n    \n    \n    \ndef display_form():\n    import commands\n    form = FORM(\n                  TABLE\n                  (   TR(A(B(H3(\'Choose the test cases to be executed:\')))),\n                      TR(\'Login\',INPUT(_name=\'testcase1\', _type=\'checkbox\', _value="1")),\n                      TR(\'Request VM\',INPUT(_name=\'testcase2\', _type=\'checkbox\', _value="2")),\n                      TR(\'My VMs\',INPUT(_name=\'testcase3\', _type=\'checkbox\', _value="3")),\n                      TR(\'My Pending Tasks\',INPUT(_name=\'testcase4\', _type=\'checkbox\', _value="4")),\n                      TR(\'My Completed Tasks\',INPUT(_name=\'testcase5\', _type=\'checkbox\', _value="5")),\n                      TR(\'My Failed Taskss\',INPUT(_name=\'testcase6\', _type=\'checkbox\', _value="6")),\n                      TR(\'Pending Faculty-Level VM Approvals\',INPUT(_name=\'testcase7\', _type=\'checkbox\', _value="7")),\n                      TR(\'Pending Org-Level VM Approvals\',INPUT(_name=\'testcase8\', _type=\'checkbox\', _value="8")),\n                      TR(\'List All Org-Level VMs\',INPUT(_name=\'testcase9\', _type=\'checkbox\', _value="9")),\n                      TR(\'All VMs\',INPUT(_name=\'testcase10\', _type=\'checkbox\', _value="10")),\n                      TR(\'Host and VMs\',INPUT(_name=\'testcase11\', _type=\'checkbox\', _value="11")),\n                      TR(\'Pending Tasks\',INPUT(_name=\'testcase12\', _type=\'checkbox\', _value="12")),\n                      TR(\'Completed Tasks\',INPUT(_name=\'testcase13\', _type=\'checkbox\', _value="13")),\n                      TR(\'Failed Tasks\',INPUT(_name=\'testcase14\', _type=\'checkbox\', _value="14")),\n                      TR(\'Configure System: Add Host\',INPUT(_name=\'testcase15\', _type=\'checkbox\', _value="15")),\n                      TR(\'Configure System: Add Template\',INPUT(_name=\'testcase16\', _type=\'checkbox\', _value="16")),\n                      TR(\'Configure System: Add Datastore\',INPUT(_name=\'testcase17\', _type=\'checkbox\', _value="17")),\n                      TR(\'Checking Setting\',INPUT(_name=\'testcase18\', _type=\'checkbox\', _value="18")),\n                      TR(\'Configure System: Host Setting\',INPUT(_name=\'testcase19\', _type=\'checkbox\', _value="19")),\n                      TR(\'Configure System: Host table\',INPUT(_name=\'testcase20\', _type=\'checkbox\', _value="20")),\n                      \n                      BR(),\n                      TR(INPUT(_type=\'submit\',_value=\'submit\'))\n                  )\n              )\n              \n    if form.process().accepted:\n        for i in xrange(1,17):\n            arg=request.vars[\'testcase\'+str(i)]\n            if arg!=None:\n                \'\'\'b=commands.getoutput("python /home/monika/Desktop/test_copy2.py "+arg)\n                print b\'\'\'\n                ts(arg)\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill the form\'\n    return dict(form=form)\n\nresponse._vars=response._caller(display_form)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/monika/Desktop/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/monika/Desktop/web2py/applications/todo/controllers/default.py", line 127, in <module>\n  File "/home/monika/Desktop/web2py/gluon/globals.py", line 194, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/monika/Desktop/web2py/applications/todo/controllers/default.py", line 120, in display_form\n    ts(arg)\n  File "/home/monika/Desktop/web2py/applications/todo/models/test.py", line 46, in ts\n    isSubmit(driver, xml_parent,xml_child,xml_subchild,user_name)\n  File "/home/monika/Desktop/web2py/applications/todo/models/test.py", line 215, in isSubmit\n    cursor1=baadal_db.executesql(\'SELECT id FROM user where username=%s\'+ user_name,as_dict=True)\n  File "/home/monika/Desktop/web2py/gluon/dal.py", line 8001, in executesql\n    adapter.execute(query)\n  File "/home/monika/Desktop/web2py/gluon/dal.py", line 1784, in execute\n    return self.log_execute(*a, **b)\n  File "/home/monika/Desktop/web2py/gluon/dal.py", line 1778, in log_execute\n    ret = self.cursor.execute(command, *a[1:], **b)\n  File "/usr/lib/python2.7/dist-packages/MySQLdb/cursors.py", line 174, in execute\n    self.errorhandler(self, exc, value)\n  File "/usr/lib/python2.7/dist-packages/MySQLdb/connections.py", line 36, in defaulterrorhandler\n    raise errorclass, errorvalue\nProgrammingError: (1064, "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'%s\' at line 1")\n'
p11
s.