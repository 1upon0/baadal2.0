(dp1
S'output'
p2
S"<type 'exceptions.NameError'> name 'conn_host' is not defined"
p3
sS'layer'
p4
S'/home/monika/Desktop/web2py/applications/testapp/models/test.py'
p5
sS'code'
p6
S'# coding: utf8\nimport os\nimport thread\nimport logging\nimport datetime\nimport logging.config\nfrom selenium import webdriver\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\nfrom helper import xml_connect\nfrom helper import db_connection\nfrom selenium.webdriver.common.keys import Keys\nimport sys\nimport time\n\n#creating a logger for logging the records\nlogger = logging.getLogger("web2py.app.testapp")\n\n#creating connection to remote database\nbaadal_db=db_connection() \n\n\n\n#################################################################################################################\n#                             The main test function for stress\n                                           #\n#################################################################################################################\ndef stress_script(m):\n    \n    \n    logging.debug("inside thread: "+str(m))\n    \n    root = xml_connect()\n    i=m\n    for j in xrange(0,len(root[i])): \n        driver = webdriver.Remote(\n       command_executor=\'http://127.0.0.1:4444/wd/hub\',\n       desired_capabilities=DesiredCapabilities.FIREFOX)#connect to selenium server\n        driver.implicitly_wait(10)\n        driver.get(root.get("url")) #url of the page to be hit \n        driver.find_element_by_link_text(root.get("href")).click()\n        image=0\n        for k in xrange(0,len(root[i][j])):\n            field_type=root[i][j][k].get("type")\n            xml_parent=root[i]\n            xml_child=root[i][j]\n            xml_sub_child=root[i][j][k]\n\t\t\t\t\t\n            if field_type=="input": #checking for text fields\n                vm_name1=isInput(driver,xml_sub_child)\n                      \n            elif field_type=="read_only": #checking for submit button\n                isReadOnly(driver, xml_parent,xml_child,xml_sub_child)\n\t\t\t\t\t\t\n            elif field_type=="submit": #checking for submit button\n                isSubmit(driver, xml_parent,xml_child,xml_sub_child)\n                driver.implicitly_wait(10)\n\t\t\t\t\t\t\n            elif field_type=="button":#checking for button\n                time.sleep(3)\n                isButton(driver,xml_sub_child)\n\t\t\t\t\t\n            elif field_type=="scroll":#scrolling the page up/down\n                isScroll(driver,xml_sub_child)\n\t\t\t\t \t\t\n            elif field_type=="href":\n                isHref(driver,xml_sub_child)#clicking on the hyper link\n                        \n            elif field_type=="select":\n                isSelect(driver,xml_sub_child)# selecting from dropdown menu\n\t\t\t \t\n            elif field_type=="table":\n                isTable(driver,xml_parent,xml_child,xml_sub_child)#checking for data in table\n                         \n            elif field_type=="img":#checking for sett\n                table_path=xml_sub_child.get("path")\n                isImage(driver,xml_child,xml_sub_child,table_path,image)\n                 \n\t\t\t\t\t\t\t\t\n            elif field_type=="check_tables":#cheking for host table\n                isCheckTable(driver,xml_parent,xml_child,xml_sub_child)\n                \n            elif field_type=="wait":\n                isWait(driver,xml_parent,xml_child,xml_sub_child)#checking for data in table\n                    \n            elif field_type=="check_data":\n                isCheckdata(driver,vm_name,xml_parent,xml_child,xml_sub_child)#checking for data in table\n                        \t\t\t\t\n            else:\n                logging.debug("report problem") #logging the report\n                \n            if k==5:\n                vm_name=vm_name1\n        driver.close()#disconnect from server\n\n\ndef stress_test_script():\n    for m in range(0,5):\n        root = xml_connect()\n        total_scripts=root.get("total_scripts")\n        test_no=m%(int(total_scripts)-1)\n        thread.start_new_thread( stress_script,(test_no,) )\n        thread.start_new_thread( stress_script,(test_no,) )\n        thread.start_new_thread( stress_script,(test_no,) )\n        thread.start_new_thread( stress_script,(test_no,) )\n        thread.start_new_thread( stress_script,(test_no,) )\n        thread.start_new_thread( stress_script,(test_no,) )\n        thread.start_new_thread( stress_script,(test_no,) )\n        thread.start_new_thread( stress_script,(test_no,) )\n        \n        logging.debug("Thread: "+str(m))\n        \n    return\n\n\ndef graph_test(test_case_no):\n#Checking memory utilizations\n    print test_case_no\n    import paramiko\n    import datetime\n    import os\n    import time\n    root = xml_connect()\n    i=int(test_case_no)\n    xml_sub_child=root[i-1][0][0]\n    xml_child=root[i-1][0]   \n    ssh = paramiko.SSHClient()\n    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n    ssh.connect(xml_child.get("ip_add"), username=xml_child.get("usrnam"), password=xml_child.get("password"))   \n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_init_data"))\n    initial_data=stdout.readlines()\n    print initial_data\n    current_time=datetime.datetime.now()\n    print current_time\n    ini_data=str(initial_data[2])\n    init_data=ini_data.split()\n    print init_data[0]\n    ssh.connect("10.208.21.113", username="root", password="baadal_test")   \n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_run_prgrm"))\n    data=stdout.readlines()\n    for line in data:\n        print lines  \n    time.sleep(600)    \n    ssh.connect(xml_child.get("ip_add"), username=xml_child.get("usrnam"), password=xml_child.get("password"))  \n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_finl_data"))\n    final_data=stdout.readlines()\n    fin_data=str(final_data[2])\n    finl_data=fin_data.split()\n    print_graph_result(finl_data,init_data,xml_child)\n    \ndef print_graph_result(finl_data,init_data,xml_child):\n    print finl_data\n    print init_data\n   \n    for i in range(1,7):\n        if init_data[i]=="-nan":\n            i_data=0\n        else:\n            i_data=init_data[i]  \n            print float(finl_data[i])\n            print float(i_data)\n        diff=float(finl_data[i])-float(i_data)\n        print diff\n        if finl_data[i]=="-nan":\n            logger.debug(xml_child.get("value") +\':  \'+"Incorrect Data")\n        else :\n            if diff<=0:\n                logger.debug(xml_child.get("value") +\':  \'+"Incorrect Data") \n            else:\n                logger.debug(xml_child.get("value") +\':  \'+"Correct Data")   \n\n#################################################################################################################\n#                                       The main test function  for unit testing                                            #\n#################################################################################################################\n\t\t\ndef test_script(test_case_no):\n    print test_case_no\n    root = xml_connect()\n    num=int(test_case_no)\n    if root[num-1].get("id")==test_case_no:\n        i=num-1\n        vm_name=""\n        \n        for j in xrange(0,len(root[i])):\n            driver = webdriver.Firefox()#connect to selenium server\n            driver.implicitly_wait(10)\n            driver.get(root.get("url")) #url of the page to be hit \n            driver.find_element_by_link_text(root.get("href")).click()\n            image=0\n            for k in xrange(0,len(root[i][j])):\n                field_type=root[i][j][k].get("type")\n                xml_parent=root[i]\n                xml_child=root[i][j]\n                xml_sub_child=root[i][j][k]\n\t\t\t\t\t\n                if field_type=="input": #checking for text fields\n                    vm_name1=isInput(driver,xml_sub_child)\n                      \n                elif field_type=="read_only": #checking for submit button\n                    isReadOnly(driver, xml_parent,xml_child,xml_sub_child)\n\t\t\t\t\t\t\n                elif field_type=="submit": #checking for submit button\n                    isSubmit(driver, xml_parent,xml_child,xml_sub_child)\n\t\t\t\t\t\t\n                elif field_type=="button":#checking for button\n                    time.sleep(3)\n                    isButton(driver,xml_sub_child)\n                elif field_type=="sanity_table":#checking for button\n                    isSanityCheck(driver, xml_parent, xml_child, xml_sub_child)\t\n                    \n                elif field_type=="scroll":#scrolling the page up/down\n                    isScroll(driver,xml_sub_child)\n\t\t\t\t \t\t\n                elif field_type=="href":\n                    isHref(driver,xml_sub_child)#clicking on the hyper link\n                    \n                elif field_type=="select":\n                    isSelect(driver,xml_sub_child)# selecting from dropdown menu\n\t\t\t \t\n                elif field_type=="table":\n                    isTable(driver,xml_parent,xml_child,xml_sub_child)#checking for data in table\n                         \n                elif field_type=="img":#checking for setting image\n                    table_path=xml_sub_child.get("path")\n                    vm_name2=isImage(driver,xml_child,xml_sub_child,table_path)\n\t\t\t\t\n                elif field_type=="check_tables":#cheking for host table\n                    isCheckTable(driver,xml_parent,xml_child,xml_sub_child)\n                \n                elif field_type=="wait":\n                    isWait(driver,xml_parent,xml_child,xml_sub_child)#checking for data in table\n                    \n                elif field_type=="check_data":\n                    isCheckdata(driver,vm_name,xml_parent,xml_child,xml_sub_child)#checking for data in table\n                        \t\t\t\t\n                else:\n                    logging.debug("report problem") #logging the report\n                \n                if k==5:\n                    vm_name=vm_name1\n            driver.close()#disconnect from server\n\n#################################################################################################################\n#                                        Function  for Network testing                                            #\n#################################################################################################################           \ndef packages_install_test(test_case_no): \n    import paramiko\n    root = xml_connect()\n    xml_sub_child=root[test_case_no-1][0][0]\n    xml_child=root[test_case_no-1][0]    \n    ssh = paramiko.SSHClient()\n    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n    ssh.connect(xml_child.get("ip_add"), username=xml_child.get("usrnam"), password=xml_child.get("password"))    \n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_flush"))\n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_pkg"))\n    pkg_list=xml_sub_child.get("pkg_lst").split()\n    for pkg in  pkg_list:\n        cmd=xml_sub_child.get("cmd_srch") + " " +str(pkg)\n        stdin, stdout, stderr =ssh.exec_command(cmd)\t\n        data=stdout.readlines()\n        if data:\n            logger.debug(xml_child.get("value") +\': \'+pkg +" :software has installed properly") \n            \n        else:\n            logger.debug(xml_child.get("value") +\': \'+pkg +" :software has not installed properly") \n \n                                                                                          \ndef packages_install_host(test_case_no): \n    import paramiko\n    root = xml_connect()\n    xml_sub_child=root[test_case_no-1][0][0]\n    xml_child=root[test_case_no-1][0]    \n    ssh = paramiko.SSHClient()\n    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n    ssh.connect(xml_child.get("ip_add"), username=xml_child.get("usrnam"), password=xml_child.get("password"))    \n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_flush"))\n    stdin, stdout, stderr =ssh.exec_command(xml_sub_child.get("cmd_pkg"))\n    data =stdout.readlines()\n    pkg_list=xml_sub_child.get("pkg_lst").split()\n    for pkg in  pkg_list:\n        cmd=xml_sub_child.get("cmd_srch") + " " +str(pkg)\n        stdin, stdout, stderr =ssh.exec_command(cmd)\t\n        data=stdout.readlines()\n        if data:\n            logger.debug(xml_child.get("value") +\': \'+pkg +" :software has installed properly") \n            \n        else:\n            logger.debug(xml_child.get("value") +\': \'+pkg +" :software has not installed properly")                                                                                \n\n                                         \ndef check_stat_on_host():\n    import libvirt\n    import commands\n    import MySQLdb as mdb\n    conn = libvirt.open("qemu+ssh://root@" + \'10.208.21.70\' + "/system")\n    vm =conn.lookupByName("baadal_testing_vm")\n    output=commands.getoutput(\'\')\n    db=mdb.connect("10.208.21.111","baadaltesting","test_baadal","baadal")\n    cursor1=db.cursor()\n    cursor1.execute("select vm_name,vm_data.status,host_id from vm_data join host where host.id=vm_data.host_id and host_ip=\'10.208.21.70\'")\n    output=cursor1.fetchall()\n    datas=str(output)\n    lists=datas.split("), (")\n    col_count=len(lists)\n    print lists\n    print col_count\n    for i in range(0,col_count):\n        datass=lists[i].split(",")\n        newstr = datass[0].replace("\'", "")\n        if i==0:\n            newstr=newstr.replace("((","")\n        for id in conn.listDomainsID():\n            dom = conn.lookupByID(id)\n            infos = dom.info()\n            if newstr==dom.name():\n                print newstr\n                print \'Name =  %s\' % dom.name()\n                print \'State = %d\' % infos[0]\n                print datass[1]\n                if (((datass[1]==" 5L") & (infos[0]==1)) | ((datass[1]==" 6L") & (infos[0]==3))):\n                    print "yes"                                           \n \n#################################################################################################################\n#                         Functions for mailing\n                                           #\n#################################################################################################################    \ndef send_mail():\n                                          \n    from gluon.tools import Mail\n    mail = Mail()\n    mail.settings.server = \'smtp.iitd.ernet.in:25\'\n    mail.settings.sender = \'monika28@cse.iitd.ernet.in\'\n    mail.settings.login = \'jyoti11@cse.iitd.ernet.in:jyoti_saini\'\n    mail.send(to=[\'monika71990@gmail.com\'],\n          subject=\'hello\',\n          # If reply_to is omitted, then mail.settings.sender is used\n          message=\'hi there\')\n###############################################################################################################\n#                             Functions used by the input field functions                                     #\n###############################################################################################################\t\t\n\n# checking whether an element is present on the webpage\ndef isElementPresent(driver,xml_child,xpath):\n    try:\n        driver.find_element_by_xpath(xpath)\n        return 1\n    except:\n        logger.debug(xml_child.get("value") +\': Result:no table exists\')\n        return 0\t\n   \n\n\t\t\t\t\n#checking whether front end data and daatabase entries are equal and printing the result \t\t\ndef print_result(field_text,result,xml_child):\n\tquery_result=str(result)\n        logger.debug("screen=  "+str(field_text) )\n        logger.debug("db=      "+query_result)\n\tif field_text ==query_result:\n\t\tlogger.debug(xml_child.get("value") +\': Result:correct input\') \n\t\tsend_mail()\n\telse:\n\t\tlogger.debug(xml_child.get("value") +\': Result:Incorrect input\')\n\treturn \n\n\t\n\t\t\t\ndef open_error_page(driver,xml_parent,text,row_count):#open error link on differnet page\n\t(driver.find_elements_by_link_text(text))[row_count].click()\n\tfield=driver.find_element_by_xpath(xml_parent.get("error_page"))\n\terror_message=field.text\n\tdriver.find_element_by_link_text(xml_parent.get("error_page_close_text")).click()\n\treturn error_message\n\n\t\n\t\t\t\ndef admin_vm_status(status):#converting vm status bits into status text\n    logger.debug("in")\n    vm_status=["Running","Paused","Shutdown"]\n    if status==5:\n        result=vm_status[0]\n    if status==6:\n        result=vm_status[1]\n    if status==7:\n        result=vm_status[2]\n    return result \n\n    \t\n    \t    \t    \t\ndef host_status(status):#converting host status bits into status text\n\thost_status={0:"Down",1:"Up",2:"Maintenance"}\t\n\tif status==0:\n\t\tresult=host_status[0]\n\tif status==1:\n\t\tresult=host_status[1]\n\tif status==2:\n\t\tresult=host_status[2]\n\treturn result\n\n\t\t\n\t\ndef org_task_status(status,name):#converting  status bits into status text\n    print status\n    task_status={0:"Approve  |  Reject",1:"Installation In Progress",2:"Remind Faculty"}\n    if (status==0) | (status==2):\n        result=task_status[0]\n    if name=="org_admin_pending_tasks":\n        result=task_status[0]\n    if (status==3) & (name=="org_admin_pending_tasks"):\n        result=task_status[1]\n    if (status==0) & (name=="faculty_pending_tasks"):\n        result=task_status[2]\n    return result\n\ndef approval_status(status,user_name,org_admin_name,xml_sub_child):\n    \n    query_result=execute_query( xml_sub_child.get("query_group_id"),(str(user_name))).fetchone()\n    group_id=query_result[0]\n    if group_id==3:\n        if status==3:\n            results=user_name + " " + "green" + "/n" +  org_admin_name + " "+ "Admin"+ "green"\n        if status==2:\n            results=user_name + " " + "green" + "/n" +  org_admin_name + " "+ "Admin"+ "red"\n        if status==0:\n            results=user_name + " " + "red" + "/n" +  org_admin_name + " "+ "Admin"+ "red"\n    if group_id==4:\n        if status==3:\n            results="pendingvm[\'organisation\']"+ " " +"Admin "+ "green"\n        if status==2:\n            results="pendingvm[\'organisation\']"+ " " +"Admin "+ "red"\n    if group_id==2 & group_id==1:\n        result="Pre-Approved"\n    return results\n    \n\n        \n    \n\t\t\t\ndef execute_query(sql_query,arg=None):\n    cursor=baadal_db.cursor()\n    if arg==None:\n        cursor.execute(sql_query)\n    else:\n        cursor.execute(sql_query,arg)\n    return cursor\n\n\n\ndef click_on_setting(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    id=xml_sub_child.get("id")\n    driver.find_element_by_xpath("//*[@href=\'/user/"+ str(id) +"/"+ str(vm_id) +"\']").click()\n    logger.debug(xml_child.get("value") +\': Result:Setting button works properly\') \n    return\n    \n            \ndef click_on_dialogbox(driver):\n    alert = driver.switch_to_alert()\n    alert.accept()\n    return\n\ndef add_extra_disk(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    isInput_add(driver, xml_sub_child)\n    value=xml_sub_child.get("add_button")\n    isButton_add(driver, xml_sub_child,value)\n    logger.debug(xml_sub_child.get("print"))\n    return\n\ndef add_user(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    check_user(driver,xml_child,xml_sub_child,vm_name)\n    isInput_add(driver, xml_sub_child)\n    value=xml_sub_child.get("add_submit")\n    isButton_add(driver, xml_sub_child,value)\n    val=xml_sub_child.get("add_button")\n    isButton_add(driver, xml_sub_child,val) \n    return\n\n        \n                \n                                \ndef check_operation(driver,xml_child,xml_sub_child,vm_name,vm_id):\n    if xml_sub_child.get("op")=="snapshot":\n        max_snap(driver,xml_sub_child,xml_child,vm_name)   \n        click_on_operation(driver,xml_sub_child,xml_child,vm_name,vm_id)\n        \n    else:\n        click_on_operation(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    return\n\n\n\n\ndef get_snapshot_id(driver,xml_sub_child,xml_child,vm_name):\n    query_result=execute_query( xml_sub_child.get("query_snap_id"),(str(vm_name))).fetchone()\n    field=driver.find_elements_by_xpath(xml_sub_child.get("xpath_snap"))\n    for t in field:\n        if str(query_result[1]) in t.text:\n            snap_id=query_result[0]\n            logger.debug("snapshot_id :" + " " + str(snap_id))\n    return snap_id\n\n\n\n\ndef action_on_snapshot(driver,xml_sub_child,xml_child,vm_name,vm_id,op_name):\n    path=xml_sub_child.get("xpath_snap")\n    if isElementPresent(driver,xml_child,path):  \n        count_snap=max_snap(driver,xml_sub_child,xml_child,vm_name)\n        if (count_snap==xml_sub_child.get("max")) & (op_name=="revert_to_snapshot"): \n            logger.debug("Snaphot limit reached.Delete previous snapshots to take new snapshot")\n        snapshot_id=get_snapshot_id(driver,xml_sub_child,xml_child,vm_name) \n        driver.find_element_by_xpath("//*[@href=\'/baadal/user/"+ str(op_name) +"/"+ str(vm_id) +"/"+ str(snapshot_id) + "\']").click()\n\n        \n    \ndef action_on_add_user(driver,xml_sub_child,xml_child,vm_name,vm_id,op_name):\n     path=xml_sub_child.get("xpath_user")\n     if isElementPresent(driver,xml_child,path):  \n        user_id=get_user_id(driver,xml_sub_child,xml_child,vm_name) \n        driver.find_element_by_xpath("//*[@href=\'/baadal/admin/"+ str(op_name) +"/"+ str(vm_id) +"/"+ str(user_id) + "\']").click()\n        \n\n        \n                        \ndef get_user_id(driver,xml_sub_child,xml_child,vm_name):\n    query_result=execute_query( xml_sub_child.get("query_user_id"),(str(vm_name))).fetchone()\n    field=driver.find_elements_by_xpath(xml_sub_child.get("xpath_user"))\n    for t in field:\n        if str(query_result[1]) in t.text:\n            user_id=query_result[0]\n            logger.debug("user_id :" + " " + str(user_id))\n    return user_id\n\ndef check_user_table(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    username=xml_sub_child.get("user_id_data")\n    print username\n    query_length=execute_query( xml_sub_child.get("query5"),(str(vm_name))).fetchone()\n    length=len(query_length)\n    print length\n    query_result=execute_query( xml_sub_child.get("query_user_table"),(str(username))).fetchone()\n    path=xml_sub_child.get("xpath_user")\n    field=driver.find_elements_by_xpath(path)\n    count=0\n    for data in field:\n        if query_result[0] in data.text:\n            print query_result[0]\n            print data.text\n            logger.debug("User name is added to VM")\n\n    return\n\ndef check_attach_disk(driver,xml_sub_child,xml_child,vm_name,vm_id,operation_name):  \n    print "Action"  \n    print vm_id\n    driver.find_element_by_partial_link_text("Pending VM Requests").click()\n    field=driver.find_elements_by_xpath("//table[@id=\'sortTable\']/tbody/tr")\n    vm_nam=str(vm_name)+"%"\n    print vm_nam\n    time.sleep(300)\n    query_result=execute_query(\'select id,vm_name from vm_data where status=3 and vm_name LIKE %s order by start_time desc\',((vm_nam))).fetchone()\n    vm_ids= query_result[0]\n    print vm_ids\n    if xml_sub_child.get("action")=="approve_request":    \n        driver.find_element_by_xpath("//*[@href=\'/baadal/admin/approve_request/"+ str(vm_ids) +"\']").click()\n        vm_names=query_result[1]\n        check_vm_task(driver,xml_sub_child,xml_child,vm_names,operation_name)\n    else:\n        print "reject"\n        print vm_ids\n        driver.find_element_by_xpath("//*a[@href=\'/baadal/admin/reject_request/"+ str(vm_ids) +"\']").click()\n        print "done Yehhh"\n    return\n    \n    \ndef click_on_operation(driver,xml_sub_child,xml_child,vm_name,vm_id):\n    op_list={\'revert_to_snapshot\':0,\'delete_snapshot\':1,\'snapshot\':\'Snapshot VM\',\'pause_machine\':\'Suspend VM\',\'Delete\':\'Delete VM\',\'shutdown_machine\':\'Stop VM\',\'destroy_machine\':\'Destroy VM\',\'start_machine\':\'Start VM\',\'user_details\':\'Add User\',\'attach_extra_disk\':"Attach Disk",\'clone_vm\':\'Clone \',\'delete_user_vm\':\'Delete User\',\'adjrunlevel\':\'Adjust Run Level\',\'edit_vmconfig\':\'Edit VM Config\',\'resume_machine\':\'Resume VM\'}\n    vm_mode=[\'vm_running_Setting_intgrtn\',\'vm_paused_Setting_integrtn\',\'vm_shutdown_Setting_integrtn\']\n    op_name=xml_sub_child.get("op")\n    operation_name=op_list[op_name]\n    if op_name=="user_details":\n        driver.find_element_by_xpath("//*[@href=\'/baadal/admin/"+ str(op_name) +"/"+ str(vm_id) +"\']").click()\n        add_user(driver,xml_sub_child,xml_child,vm_name,vm_id)\n        if xml_sub_child.get("name") in vm_mode:\n            check_user_table(driver,xml_sub_child,xml_child,vm_name,vm_id)\n    elif op_name=="Delete":\n        driver.find_element_by_xpath(xml_sub_child.get("title")).click()\n        click_on_dialogbox(driver)\n        click_on_dialogbox(driver)\n        if xml_sub_child.get("name") in vm_mode:\n            check_vm_task(driver,xml_sub_child,xml_child,vm_name,operation_name)\n    elif op_name in {"revert_to_snapshot","delete_snapshot"}: \n        action_on_snapshot(driver,xml_sub_child,xml_child,vm_name,vm_id,op_name)\n        if xml_sub_child.get("name") in vm_mode:\n            check_vm_task(driver,xml_sub_child,xml_child,vm_name,operation_name)\n    elif op_name=="delete_user_vm": \n        action_on_add_user(driver,xml_sub_child,xml_child,vm_name,vm_id,op_name)\n        if xml_sub_child.get("name") in vm_mode:\n            check_vm_task(driver,xml_sub_child,xml_child,vm_name,operation_name)\n    elif op_name in {"attach_extra_disk","clone_vm"}:\n        driver.find_element_by_xpath("//*[@href=\'/baadal/user/"+ str(op_name) +"/"+ str(vm_id) +"\']").click()\n        add_extra_disk(driver,xml_sub_child,xml_child,vm_name,vm_id)\n        if xml_sub_child.get("name")in [ \'vm_running_Setting_intgrtn\',\'vm_paused_Setting_integrtn\',\'vm_shutdown_Setting_integrtn\']:\n            check_attach_disk(driver,xml_sub_child,xml_child,vm_name,vm_id,operation_name)\n    elif op_name=="edit_vmconfig":\n        driver.find_element_by_xpath("//*[@href=\'/baadal/admin/"+ str(op_name) +"/"+ str(vm_id) +"\']").click()\n    else:\n        driver.find_element_by_xpath("//*[@href=\'/user/"+ str(op_name) +"/"+ str(vm_id) +"\']").click()\n        if xml_sub_child.get("name") in vm_mode:\n            \n            check_vm_task(driver,xml_sub_child,xml_child,vm_name,operation_name)\n    return \n\n\ndef max_snap(driver,xml_sub_child,xml_child,vm_name):\n    query_result=execute_query( xml_sub_child.get("query4"),(str(vm_name))).fetchall()\n    length_snap=len(query_result)\n    if str(length_snap)==xml_sub_child.get("max"):\n        logger.debug("Snaphot limit reached.Delete previous snapshots to take new snapshot")\n    else :\n        logger.debug("Your VM snapshotting request has been queued")\n    return length_snap\n\n\ndef vm_running(xml_child,xml_sub_child,driver):\n    query_result=execute_query( xml_sub_child.get("query3")).fetchall()\n    print query_result\n    col_count=len(query_result[0])\n    row_count=len(query_result)\n    count=0\n    for length in range(0,(row_count)):\n        vm_id=query_result[length][1]\n        vm_name=query_result[length][0]\n        status=query_result[length][col_count-1]\n        if status==5:\n            print length\n            click_on_setting(driver,xml_sub_child,xml_child,vm_name,vm_id)\n            check_snapshot(vm_name,driver,xml_child,xml_sub_child)\n            check_user(driver,xml_child,xml_sub_child,vm_name)\n            check_vm_configuration(driver,xml_child,xml_sub_child,vm_name) \n            check_operation(driver,xml_child,xml_sub_child,vm_name,vm_id)\n            break\n        if (status==7) | (status==6):\n            print row_count\n            print count\n            if (row_count-1)==count: \n                logger.debug("No VM exist which is in running state,So Please Run a VM before doing this testing")\n                break \n            count+=1\n            continue\n    return\n    \n     \ndef vm_paused(xml_child,xml_sub_child,driver):\n    query_result=execute_query( xml_sub_child.get("query3")).fetchall()\n    print query_result\n    count=0\n    col_count=len(query_result[0])\n    row_count=len(query_result)\n    for length in range(0,(row_count)):\n        \n        status=query_result[length][col_count-1]\n        if status==6:\n            \n            id=xml_sub_child.get("id")\n            vm_id=query_result[length][1]\n            driver.find_element_by_xpath("//*[@href=\'/baadal/user/"+ str(id) +"/"+ str(vm_id) +"\']").click()\n            vm_name=query_result[length][0]\n            logger.debug(xml_child.get("value") +\': Result:Setting button works properly\')\n            check_operation(driver,xml_child,xml_sub_child,vm_name,vm_id)\n            break\n        if (status==5) | (status==7):\n\n            if (row_count-1)==count: \n                logger.debug("No VM exist which is in paused mode,So Please Paused a VM before doing this testing")\n                break\n            count+=1\n            continue\n       \ndef vm_shutdown(xml_child,xml_sub_child,driver):\n    query_result=execute_query( xml_sub_child.get("query3")).fetchall()\n    print query_result\n    count=0\n    col_count=len(query_result[0])\n    row_count=len(query_result)\n    for length in range(0,(row_count)): \n        status=query_result[length][col_count-1]\n        if status==7:\n            id=xml_sub_child.get("id")\n            vm_name=query_result[length][0]\n            vm_id=query_result[length][1]\n            driver.find_element_by_xpath("//*[@href=\'/baadal/user/"+ str(id) +"/"+ str(vm_id) +"\']").click()\n            logger.debug(xml_child.get("value") +\': Result:Setting button works properly\')\n            check_operation(driver,xml_child,xml_sub_child,vm_name,vm_id)\n            break\n        if (status==5) | (status==6):\n            if count==(row_count-1): \n                logger.debug("No VM exist which is in shutdown mode,So Please Shutdown a VM before doing this testing")\n                break\n            count+=1\n            continue\n            \n\n                        \ndef result_setting_page(field,query_result,driver,xml_child,xml_sub_child):\n    i=0\n    for t in field:\n        print "screen=" + str(t.text)\n        print "db=" + str(query_result[i][0])\n        if str(query_result[i][0]) in t.text:\n            logger.debug("correct inputs")\n        else :\n            logger.debug("Incorrect inputs")\n        i+=1 \n    return\n\n                        \ndef check_snapshot(vm_name,driver,xml_child,xml_sub_child):\n    logger.debug("Checking for entries in current snapshot table")\n    path=xml_sub_child.get("xpath_snap")\n    if isElementPresent(driver,xml_child,path):\n        query_result=execute_query(xml_sub_child.get("query4"),(str(vm_name))).fetchall()\n        total_snap=len(query_result)\n        field=driver.find_elements_by_xpath(path)\n        result_setting_page(field,query_result,driver,xml_child,xml_sub_child)\n        return total_snap\n    else :\n        total_snap=""\n        return total_snap\n        \n \n       \ndef check_user(driver,xml_child,xml_sub_child,vm_name):\n    logger.debug("Checking for entries in user table")\n    path=xml_sub_child.get("xpath_user")\n    if isElementPresent(driver,xml_child,path):\n        query_result=execute_query( xml_sub_child.get("query5"),(str(vm_name))).fetchall()\n        print query_result\n        field=driver.find_elements_by_xpath(path)\n        logger.debug("Checking for entries in Additional user table")\n        result_setting_page(field,query_result,driver,xml_child,xml_sub_child)\n    return\n\n \n \ndef check_vm_configuration(driver,xml_child,xml_sub_child,vm_name):\n    logger.debug("Checking for entries in  configuration table")\n    path=xml_sub_child.get("xpath_conf")\n    if isElementPresent(driver,xml_child,path):\n        query_result=execute_query( xml_sub_child.get("query6"),(str(vm_name))).fetchall()\n        field=driver.find_elements_by_xpath(path)\n        logger.debug("Checking for entries in VM Configuration table")\n        i=0\n        for t in field:\n            print "screen=" + str(t.text)\n            print "db=" + str(query_result[0][i])\n            if str(query_result[0][i]) in t.text:\n                logger.debug("correct inputs")\n            else :\n                logger.debug("Incorrect inputs")\n            i+=1\n    return\n\ndef check_vm_task(driver,xml_sub_child,xml_child,vm_name,operation_name):\n    current_time=datetime.datetime.now()\n    break_pt_time=current_time + datetime.timedelta(seconds=660)  \n    time.sleep(300)\n    count=1\n    while(count):\n        if(datetime.datetime.now()<=break_pt_time):\n            print datetime.datetime.now()\n            print break_pt_time\n            datas=check_vm_in_pending_task(driver,xml_sub_child,xml_child,vm_name,operation_name)\n            print datas\n            vm_in_pending=datas[0]\n            task_start_time=datas[2:]\n            print task_start_time\n            if vm_in_pending=="1":\n                print "Pending"\n                print vm_in_pending \n            else:\n                vm_in_complted=check_vm_in_completed_task(driver,xml_sub_child,vm_name,operation_name,task_start_time)\n                print "Completed"\n                print vm_in_complted\n                if vm_in_complted==1:\n                    logger.debug("VM is in Completed Task Table!!!")\n                    count=0\n                else:\n                    vm_in_failed=check_vm_in_failed_task(driver,xml_sub_child,vm_name,operation_name,task_start_time)\n                    print "failed"\n                    print vm_in_failed\n                    if vm_in_failed==1:\n                        logger.debug("VM is in Failed Task Table!!!")\n                        count=0\n                    else:\n                        logger.debug("VM does not exist in any table,please check it!!!")\n        else:\n            count=0\n    print "Done"\n    if (vm_in_pending=="1"):\n        logger.debug("VM is in Pending Task Table!!!")    \n    return\n    \n    \n    \ndef check_vm_in_pending_task(driver,xml_sub_child,xml_child,vm_name,operation_name):\n    driver.find_element_by_partial_link_text("Tasks").click()\n    path="//table[@id=\'pendingtasks\']/tbody/tr"\n    if isElementPresent(driver,xml_child,path):\n        vm_in_pending=0\n        vm_nam=str(vm_name)\n        vm_oprtn=str(operation_name)\n        field=driver.find_elements_by_xpath(path)\n        query_result=execute_query(xml_sub_child.get("task_query"),(vm_nam,vm_oprtn)).fetchone()\n        task_start_time=query_result[1]  \n        for x in field:            \n            if (vm_name in x.text) & (operation_name in x.text)  & (str(task_start_time) in x.text):\n                print x.text\n                print task_start_time                   \n                vm_in_pending=1\n            datas=str(vm_in_pending)+ " " +str(task_start_time) \n    return datas\n         \ndef check_vm_in_completed_task(driver,xml_sub_child,vm_name,operation_name,task_start_time):\n    driver.find_element_by_partial_link_text("Completed Tasks").click()\n    print "comp"\n    field=driver.find_elements_by_xpath("//table[@id=\'completedtasks\']/tbody/tr")\n    vm_in_complted=0\n    vm_nam=str(vm_name)\n    for x in field:\n        if (vm_name in x.text) & (operation_name in x.text)  & (str(task_start_time) in x.text):\n            print x.text\n            print task_start_time           \n            logger.debug("Your request is Completed!!!!")\n            vm_in_complted=1\n    return vm_in_complted\n                \n                \ndef check_collaborator(driver,xml_sub_child):\n    if xml_sub_child.get("data")=="wrong_data":\n        logger.debug("Collaborator Username is not valid")\n    else:\n        logger.debug("Collaborator added")\n\n\t\t\ndef check_vm_in_failed_task(driver,xml_sub_child,vm_name,operation_name,task_start_time):\n    driver.find_element_by_partial_link_text("Failed Tasks").click()\n    field=driver.find_elements_by_xpath("//table[@id=\'failedtasks\']/tbody/tr")\n    print "faild"\n    vm_in_failed=0\n    for x in field:\n        if (vm_name in x.text) & (operation_name in x.text)  & (str(task_start_time) in x.text):\n            print "yes3"\n            logger.debug("Your request is Failed!!!!")\n            vm_in_failed=1       \n    return vm_in_failed\n\n                                                              \t\t\t                                                                    \t\t\t                                                                    \t\t\t                                                                    \n##############################################################################################################\n#  \t\t\t\t\t           functions for various types of input fields  \t\t\t\t          \t     #\n##############################################################################################################\n\t\t\ndef isInput(driver, xml_sub_child):\n    current_time=datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")\n    field = driver.find_element_by_id(xml_sub_child.get("id"))\n    if xml_sub_child.text!=None:\n        field.send_keys(xml_sub_child.text) # sending the user name/password/vm name/purpose etc\n    else:\n        if not (xml_sub_child.get("id") in ["user_password","user_username"]):\n            field.send_keys(str(current_time))\t\n    return current_time\n\ndef\tisInput_add(driver, xml_sub_child):\n    field = driver.find_element_by_id(xml_sub_child.get("user_id"))\n    field.send_keys(xml_sub_child.get("user_id_data"))\n    return\n\ndef isReadOnly(driver, xml_parent,xml_child,xml_sub_child):\n    current_time=datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")\n    field = driver.find_element_by_id(xml_sub_child.get("id"))\n    if field.get_attribute("value")!=\'\':\n        field.send_keys(xml_sub_child.text) # sending the user name/password/vm name/purpose etc\n        if field.get_attribute("value")==xml_sub_child.text:\n            logger.debug(xml_child.get("value")  +\': Result:error\') #logging the report\n        else:\n            logger.debug(xml_child.get("value")  +\': Result:no error\') #logging the report\n    else:\n        logger.debug(xml_child.get("value")  +\': Result:empty\') #logging the report\n    return \n\ndef isWait( driver, xml_parent, xml_child, xml_sub_child):\n    time.sleep(3)\n    return\n\ndef isSubmit( driver, xml_parent, xml_child, xml_sub_child):\n    current_time=datetime.datetime.now()\n    user_name=xml_child.find(\'user_name\').text\n    driver.find_element_by_xpath(xml_sub_child.text).click()\n    xpath=xml_parent.get("xpath")\n    status=isElementPresent(driver,xml_child,xpath)\n    field=driver.find_element_by_xpath(xpath)\n    if status==1:\n        if ("Logout" in field.get_attribute("innerHTML")):\n             logger.debug(xml_child.get("value")  +\': Result:Valid Login\') #logging the report\n        else:\n            logger.debug(xml_child.get("value")  +\': Result:Invalid Login\') #logging the report \n    else:\n        logger.debug(xml_child.get("value") +\': Result:error\') #logging the report\n    return\n\t\ndef isButton(driver, xml_sub_child):\n\tdriver.find_element_by_xpath(xml_sub_child.text).click()\n\treturn\n\t\t\t\ndef isButton_add(driver, xml_sub_child,value):\n    driver.find_element_by_xpath(value).click()\n    return\n\t\ndef isScroll(driver, xml_sub_child):\n\tfield=driver.find_element_by_tag_name("html")\n\tfield.send_keys(xml_sub_child.text)\n\tdriver.execute_script("window.scrollBy(0,200)", "")\n\treturn\n\t\ndef isHref(driver, xml_sub_child):\n    driver.find_element_by_partial_link_text(xml_sub_child.text).click()\n    if xml_sub_child.get("id")=="collaborator":\n        check_collaborator(driver, xml_sub_child)\n\treturn\n\ndef isSelect(driver, xml_sub_child):\n\tdriver.find_element_by_xpath(xml_sub_child.text).click()\n\treturn\n\ndef isImage(driver,xml_child,xml_sub_child,a):\t\n    if isElementPresent(driver,xml_child,a):\n        if xml_sub_child.get("name") in {"vm_running_Setting","vm_running_Setting_intgrtn"}:\n            vm_running(xml_child,xml_sub_child,driver)\n        elif xml_sub_child.get("name") in {"vm_paused_Setting","vm_paused_Setting_integrtn"}:\n            vm_paused(xml_child,xml_sub_child,driver)\n        elif xml_sub_child.get("name") in {"vm_shutdown_Setting","vm_shutdown_Setting_integrtn"}:\n            print "in"\n            vm_shutdown(xml_child,xml_sub_child,driver)\n        else :\n            logger.debug("Error")\n    return \n    \ndef isTable(driver,xml_parent,xml_child,xml_sub_child):\n    status_list={0:"Error",1:"failed_tasks",2:"TRY AGAIN | IGNORE",3:"my_pending_vm",4:"Waiting for admin approval",5:"faculty_pending_tasks",6:"Add_host",7:"org_admin_pending_tasks",8:"org_admin_all_tasks",9:"list_all_vm",10:"pending_request_vm"}\n    table_path=xml_sub_child.text\n    if isElementPresent(driver,xml_child,table_path):\n        \n        query_result=execute_query( xml_parent.get("query3")).fetchall()\n        length=len(query_result[0])#calculate number of columns of query\n        row_count=0 #number of rows in the table\n        col_count=0 #number of columns in the table\n        field=driver.find_elements_by_xpath(xml_sub_child.text)#data from gui\n        for col in field:\n            field_text=col.text\n            if field_text!="":\n            \n                if field_text==status_list[0]:\n                    text=open_error_page(driver,xml_parent,field_text,row_count)\n                    result=query_result[row_count][col_count]#data form query\n                    print_result(text,result,xml_child)\n                    \n                elif (query_result[row_count][col_count]==4) & (xml_parent.get("name")==status_list[1]):\n                    result=status_list[2]\n                    print_result(field_text,result,xml_child)\n                \n                elif (col_count%int(length)==6) & (xml_parent.get("name")==status_list[9]):\n                    status=query_result[row_count][col_count]\n                    print status\n                    result=admin_vm_status(status)\n                    print_result(field_text,result,xml_child)\n               \n                elif (col_count%int(length)==0) & (xml_parent.get("name")==status_list[10]):\n                     if query_result[row_count][col_count]==4:\n                         result=["Attach Disk","Clone VM"]\n                         print_result(field_text,result,xml_child)\n                     else:\n                         result=["Attach Disk","Clone","Install"]\n                         print_result(field_text,result,xml_child)\n                         \n                elif ((col_count%int(length)==8) | (col_count%int(length)==9) )& (xml_parent.get("name")==status_list[10]):\n                    logger.debug(xml_child.get("value") +\': Result:correct input\')\n                elif (col_count%int(length)==2) & (xml_parent.get("name")==status_list[10]):\n                    vm_name=query_result[row_count][4]\n                    query_results=execute_query( xml_sub_child.get("query_collbtr"),(str(vm_name))).fetchall()\n                   \n                    len_query=len(query_results)\n                    \n                    if query_results!="None":\n                        for m in range(0,len_query):\n                            result=query_results[m][0]\n                            print_result(field_text,result,xml_child)\n                    else:\n                        logger.debug(xml_child.get("value") +\': Result:correct input\')\n                    \n                              \n                elif (query_result[row_count][col_count]==2) & (xml_parent.get("name")==status_list[3]):\n                    result=status_list[4]\n                    print_result(field_text,result,xml_child)\n\n                elif (col_count%int(length)==6) & ((xml_parent.get("name")==status_list[5]) | (xml_parent.get("name")==status_list[7]) | (xml_parent.get("name")==status_list[8])):\n                    status=query_result[row_count][col_count]\n                    result=org_task_status(status,xml_parent.get("name"))\n                    print_result(field_text,result,xml_child)\n\n                elif (col_count%int(length)==2) & (xml_parent.get("name")==status_list[6]):\n                    status=query_result[row_count][col_count]\n                    result=host_status(status)\n                    print_result(field_text,result,xml_child)\n\t\t\t\t\t\t\n                else:\n                    result=query_result[row_count][col_count]\n                    print_result(field_text,result,xml_child)\n                col_count+=1\n                if col_count%int(length)==0:\n                    row_count+=1\n                    col_count=0\t\n    return\n\ndef isCheckTable(driver, xml_parent, xml_child, xml_sub_child):\n    field=driver.find_elements_by_xpath(xml_sub_child.get("path"))\n    query_result=execute_query(xml_parent.get("query3")).fetchall()\n    table=0\n    for header in field:\n        if query_result[table][0] in header.text:\n            table_path=xml_sub_child.text\n            if isElementPresent(driver,xml_child,table_path):\n                result_fetch=execute_query(xml_parent.get("query4")).fetchall()\n                no_of_cols=len(result_fetch[0])#calculate number of columns of query\n                field=driver.find_elements_by_xpath(xml_sub_child.text)\n                #print field.text\n                row_count=0\n                col_count=0\n                for col in field:\n                    field_text=col.text\n                    if field_text!="":\n                        result=result_fetch[row_count][col_count]\n                        print_result(field_text,result,xml_child)\n                        col_count+=1\n                        if col_count%int(no_of_cols)==0:\n                            row_count+=1\n                            col_count=0\t\t\n        table=table+1\n    return\n\n   \ndef isCheckdata(driver,vm_name,xml_parent, xml_child, xml_sub_child):\n    print vm_name\n    table_path=xml_sub_child.text\n    if isElementPresent(driver,xml_child,table_path):\n        print "in"\n        driver.refresh()\n        field=driver.find_elements_by_xpath(xml_sub_child.text)#data from gui\n        query_result=execute_query( xml_sub_child.get("query3")).fetchone()\n        result=query_result[1]\n        for a in field:\n            row=a.text\n            if (str(vm_name) in row) | (str(query_result[0]) in row):\n                logger.debug("report"  +\': Result:Correct Flow\') #logging the report\n                id=xml_sub_child.get("id")\n                if id=="settings":\n                     driver.find_element_by_xpath("//*[@href=\'/baadal/user/"+ str(id) +"/"+ str(result) +"\']").click()\n                if "Approve  |  Reject" in row:\n                    if xml_sub_child.get("click")=="Approve":\n                        print "in1"\n                        print result\n                        print id\n                        driver.find_element_by_xpath("//*[@href=\'/baadal/"+ str(id) +"/approve_request/"+ str(result) +"\']").click()\n                    else:\n                        driver.find_element_by_xpath("//*[@href=\'/baadal/"+ str(id) +"/reject_request/"+ str(result) +"\']").click()\n    return\n\n\n\n\n\n\ndef isSanityCheck(driver, xml_parent, xml_child, xml_sub_child):\n  \n    field=driver.find_elements_by_xpath("//div[@id=\'sanity_check_table\']/table/tbody/tr/td")\n#print field.text\n    row_count=0\n    col_count=0\n    host_name=[]\n    vm_status=[]\n    vm_name=[]\n    message=[]\n    operation=[]\n    for col in field:\n        field_text=col.text\n        if col_count%5==0:\n            host_name.insert(row_count,field_text)\n           \n        if col_count%5==1:\n            vm_status.insert(row_count,field_text)\n           \n        if col_count%5==2:\n            vm_name.insert(row_count,field_text)\n           \n        if col_count%5==3:\n            message.insert(row_count,field_text)\n           \n        if col_count%5==4:\n            operation.insert(row_count,field_text)\n           \n        if col_count%5==0:\n            \n            row_count+=1\n            col_count=0\t\n        col_count+=1\n       \n    total_vm=len(vm_name)  \n    for i in range(0,total_vm):\n        print host_name[i]\n        print vm_status[i]\n        print vm_name[i]\n        print message[i]\n        print operation[i]\nconn_host(host_name,vm_status,vm_name,message,total_vm)\n\n\ndef conn_host(host_name,vm_status,vm_name,message,total_vm):\n    import libvirt\n    import commands\n    query_result=execute_query("select host_name,host_ip from host").fetchall()\n    no_of_cols=len(query_result)#calculate number of columns of query\n    for host in range(0,no_of_cols):\n        host_nam=query_result[host][0]\n        host_ip=query_result[host][1]\n        print host_nam\n        print host_ip\n        print "12345"\n        print "qemu+ssh://root@" + str(host_ip) + "/system"\n        conn = libvirt.open("qemu+ssh://root@" +str(host_ip)+ "/system")\n        print "in"\n        for id in conn.listDomainsID():\n            dom = conn.lookupByID(id)\n            infos = dom.info()\n            status=infos[0]\n            status_vm=check_vm_status(status)\n            print_sanity_result(status_vm,host_name,vm_status,vm_name,message,total_vm,host_ip,host_nam)\n        for vm in conn.listDefinedDomains():\n            print vm\n            status_vm="off"\n            print_sanity_result(status_vm,host_name,vm_status,vm_name,message,total_vm,host_ip,host_nam)\t   \n\n\n\ndef print_sanity_result(status_vm,host_name,vm_status,vm_name,message,total_vm,host_ip,host_nam):\n    for i in range(0,total_vm):\n        vm_nm=vm_name[i]\n        if ((vm_nm==vm_name[i]) & (host_nam==host_name[i])):\n            messg=check_messg_in_db(vm_nm,host_ip,host_nam)\n            if vm_nm==vm_name[i]:\n                logger.debug(\'host=\'+vm_nm)\n                logger.debug(\'screen=\'+vm_name[i])\n                logger.debug(\'Result:correct input\')\n            else:\n                logger.debug(\'host=\'+vm_nm)\n                logger.debug(\'screen=\'+vm_name[i])\n                logger.debug(\'Result:Incorrect input\')\n                \n            if status_vm==vm_status[i]:\n                logger.debug(\'host=\'+status_vm)\n                logger.debug(\'screen=\'+vm_status[i])\n                logger.debug(\'Result:correct input\')\n            else:\n                logger.debug(\'host=\'+status_vm)\n                logger.debug(\'screen=\'+vm_status[i])\n                logger.debug(\'Result:Incorrect input\')\n                \t\n            if messg==message[i]:\n                logger.debug(\'host=\'+messg)\n                logger.debug(\'screen=\'+message[i])\n                logger.debug(\'Result:correct input\')\n            else:\n                logger.debug(\'host=\'+messg)\n                logger.debug(\'screen=\'+message[i])\n                logger.debug(\'Result:Incorrect input\')\n                \n            if host_nam==host_name[i]:\n                logger.debug(\'host=\'+host_nam)\n                logger.debug(\'screen=\'+host_name[i])\n                logger.debug(\'Result:correct input\')\n            else:\n                logger.debug(\'host=\'+host_nam)\n                logger.debug(\'screen=\'+host_name[i])\n                logger.debug(\'Result:Incorrect input\')\n\n\n\n\t\t\t\ndef check_vm_status(status):\n\tif status==1:\n\t\tstatus_vm="Running"\n\tif status==3:\n\t\tstatus_vm="Paused"\n\treturn status_vm\n\n\t\n    \ndef check_messg_in_db(vm_nm,host_ip,host_nam):    \n    fetch_result=execute_query(" select vm_name,vm_data.status from vm_data,host where vm_data.host_id=host.id and host_ip=%s",(str(host_ip))).fetchall()\n    print fetch_result\n    no_vm_in_db=len(fetch_result)\n    if fetch_result!=():\n        for j in range(0,no_vm_in_db):\n            if vm_nm==fetch_result[j][0]:\n                vm_in_db="True"\n                messg="VM is on expected host "+host_nam\n            else:\n                vm_in_db="False"\n                messg="Orphan, VM is not in database"\n       \n    else:\n        messg="Orphan, VM is not in database"                \n    return messg\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of exceptions.NameError object>"
p13
sS'__setattr__'
p14
S"<method-wrapper '__setattr__' of exceptions.NameError object>"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of exceptions.NameError object>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of exceptions.NameError object>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of exceptions.NameError object>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of exceptions.NameError object>'
p23
sS'args'
p24
S'("name \'conn_host\' is not defined",)'
p25
sS'__reduce__'
p26
S'<built-in method __reduce__ of exceptions.NameError object>'
p27
sS'__str__'
p28
S"<method-wrapper '__str__' of exceptions.NameError object>"
p29
sS'__format__'
p30
S'<built-in method __format__ of exceptions.NameError object>'
p31
sS'__getattribute__'
p32
S"<method-wrapper '__getattribute__' of exceptions.NameError object>"
p33
sS'__class__'
p34
S"<type 'exceptions.NameError'>"
p35
sS'__unicode__'
p36
S'<built-in method __unicode__ of exceptions.NameError object>'
p37
sS'__delattr__'
p38
S"<method-wrapper '__delattr__' of exceptions.NameError object>"
p39
sS'__subclasshook__'
p40
S'<built-in method __subclasshook__ of type object>'
p41
sS'__repr__'
p42
S"<method-wrapper '__repr__' of exceptions.NameError object>"
p43
sS'__dict__'
p44
S'{}'
p45
sS'__sizeof__'
p46
S'<built-in method __sizeof__ of exceptions.NameError object>'
p47
sS'__doc__'
p48
S"'Name not found globally.'"
p49
sS'__init__'
p50
S"<method-wrapper '__init__' of exceptions.NameError object>"
p51
sS'__new__'
p52
S'<built-in method __new__ of type object>'
p53
ssS'evalue'
p54
S"name 'conn_host' is not defined"
p55
sS'request'
p56
cgluon.html
XML_unpickle
p57
(S's\xffT\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top">ajax</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">application</td><td valign="top">:</td><td><div>testapp</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">args</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">body</td><td valign="top">:</td><td><div>&lt;open file &#x27;&lt;fdopen&gt;&#x27;, mode &#x27;w+b&#x27; at 0x21a28a0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cid</td><td valign="top">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">client</td><td valign="top">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">controller</td><td valign="top">:</td><td><div>default</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cookies</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">session_id_admin</td><td valign="top">:</td><td><div>127.0.0.1-0afb8bb5-c83f-4a16-a7d7-28aec27bbeae<table><tr><td style="font-weight:bold;vertical-align:top">comment</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">domain</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">expires</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">httponly</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">max-age</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">path</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">secure</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">version</td><td valign="top">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_id_testapp</td><td valign="top">:</td><td><div>127.0.0.1-6eb6d854-ccb5-41b3-8c2d-56e5ed92ac25<table><tr><td style="font-weight:bold;vertical-align:top">comment</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">domain</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">expires</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">httponly</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">max-age</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">path</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">secure</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">version</td><td valign="top">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">env</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">app_folders</td><td valign="top">:</td><td><div>set([&#x27;/home/monika/Desktop/web2py/applications/admin/&#x27;, &#x27;/home/monika/Desktop/web2py/applications/testapp/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">applications_parent</td><td valign="top">:</td><td><div>/home/monika/Desktop/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cmd_args</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cmd_options</td><td valign="top">:</td><td><div>&lt;Values at 0x218bfc8: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;with_scheduler&#x27;: False, &#x27;ips&#x27;: [], &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;port&#x27;: 8000, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;dell-OptiPlex-7010&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;/home/monika/Desktop/web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;winservice&#x27;: &#x27;&#x27;, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;profiler_filename&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;scheduler_groups&#x27;: None, &#x27;password&#x27;: &#x27;&lt;ask&gt;&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;interfaces&#x27;: None, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">content_length</td><td valign="top">:</td><td><div>449</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">content_type</td><td valign="top">:</td><td><div>multipart/form-data; boundary=---------------------------19392159816093289261454394084</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">db_sessions</td><td valign="top">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">debugging</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">gluon_parent</td><td valign="top">:</td><td><div>/home/monika/Desktop/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_accept</td><td valign="top">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_accept_encoding</td><td valign="top">:</td><td><div>gzip, deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_accept_language</td><td valign="top">:</td><td><div>en-US,en;q=0.5</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_connection</td><td valign="top">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_content_length</td><td valign="top">:</td><td><div>449</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_content_type</td><td valign="top">:</td><td><div>multipart/form-data; boundary=---------------------------19392159816093289261454394084</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_cookie</td><td valign="top">:</td><td><div>session_id_admin=127.0.0.1-0afb8bb5-c83f-4a16-a7d7-28aec27bbeae; session_id_testapp=127.0.0.1-6eb6d854-ccb5-41b3-8c2d-56e5ed92ac25</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_host</td><td valign="top">:</td><td><div>127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_referer</td><td valign="top">:</td><td><div>http://127.0.0.1:8000/testapp/default/unit_testing</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_user_agent</td><td valign="top">:</td><td><div>Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:21.0) Gecko/20100101 Firefox/21.0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_jython</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_pypy</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">local_hosts</td><td valign="top">:</td><td><div><table><tr><td><div>127.0.1.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>dell-OptiPlex-7010</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">path_info</td><td valign="top">:</td><td><div>/testapp/default/unit_testing</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">query_string</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">remote_addr</td><td valign="top">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">remote_port</td><td valign="top">:</td><td><div>49705</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">request_method</td><td valign="top">:</td><td><div>POST</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">request_uri</td><td valign="top">:</td><td><div>/testapp/default/unit_testing</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">script_name</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">server_name</td><td valign="top">:</td><td><div>dell-OptiPlex-7010</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">server_port</td><td valign="top">:</td><td><div>8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">server_protocol</td><td valign="top">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">server_software</td><td valign="top">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_path</td><td valign="top">:</td><td><div>/home/monika/Desktop/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_version</td><td valign="top">:</td><td><div>2.4.4-stable+timestamp.2013.03.11.20.32.00</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_errors</td><td valign="top">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x7f4e48213270&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_file_wrapper</td><td valign="top">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x20fdce8&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_input</td><td valign="top">:</td><td><div>&lt;socket._fileobject object at 0x7f4e2827de50&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_multiprocess</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_multithread</td><td valign="top">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_run_once</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_url_scheme</td><td valign="top">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_version</td><td valign="top">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">extension</td><td valign="top">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">folder</td><td valign="top">:</td><td><div>/home/monika/Desktop/web2py/applications/testapp/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">function</td><td valign="top">:</td><td><div>unit_testing</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">get_vars</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">global_settings</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">app_folders</td><td valign="top">:</td><td><div>set([&#x27;/home/monika/Desktop/web2py/applications/admin/&#x27;, &#x27;/home/monika/Desktop/web2py/applications/testapp/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">applications_parent</td><td valign="top">:</td><td><div>/home/monika/Desktop/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cmd_args</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cmd_options</td><td valign="top">:</td><td><div>&lt;Values at 0x218bfc8: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;with_scheduler&#x27;: False, &#x27;ips&#x27;: [], &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;port&#x27;: 8000, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;dell-OptiPlex-7010&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;/home/monika/Desktop/web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;winservice&#x27;: &#x27;&#x27;, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;profiler_filename&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;scheduler_groups&#x27;: None, &#x27;password&#x27;: &#x27;&lt;ask&gt;&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;interfaces&#x27;: None, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">db_sessions</td><td valign="top">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">debugging</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">gluon_parent</td><td valign="top">:</td><td><div>/home/monika/Desktop/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_jython</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_pypy</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">local_hosts</td><td valign="top">:</td><td><div><table><tr><td><div>127.0.1.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>dell-OptiPlex-7010</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_version</td><td valign="top">:</td><td><div>2.4.4-stable+timestamp.2013.03.11.20.32.00</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_https</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_local</td><td valign="top">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_restful</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">now</td><td valign="top">:</td><td><div>datetime.datetime(2013, 11, 11, 16, 59, 26, 839381)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">post_vars</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">testcase34</td><td valign="top">:</td><td><div>34</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">raw_args</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">raw_extension</td><td valign="top">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">url</td><td valign="top">:</td><td><div>/testapp/default/unit_testing</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">utcnow</td><td valign="top">:</td><td><div>datetime.datetime(2013, 11, 11, 11, 29, 26, 839401)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">uuid</td><td valign="top">:</td><td><div>testapp/127.0.0.1.2013-11-11.16-59-26.2e2c68d7-7cfe-44c2-b224-b3c21babca64</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">vars</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">testcase34</td><td valign="top">:</td><td><div>34</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">environ</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">CONTENT_LENGTH</td><td valign="top">:</td><td><div>449</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">CONTENT_TYPE</td><td valign="top">:</td><td><div>multipart/form-data; boundary=---------------------------19392159816093289261454394084</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_ACCEPT</td><td valign="top">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_ACCEPT_ENCODING</td><td valign="top">:</td><td><div>gzip, deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_ACCEPT_LANGUAGE</td><td valign="top">:</td><td><div>en-US,en;q=0.5</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_CONNECTION</td><td valign="top">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_CONTENT_LENGTH</td><td valign="top">:</td><td><div>449</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_CONTENT_TYPE</td><td valign="top">:</td><td><div>multipart/form-data; boundary=---------------------------19392159816093289261454394084</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_COOKIE</td><td valign="top">:</td><td><div>session_id_admin=127.0.0.1-0afb8bb5-c83f-4a16-a7d7-28aec27bbeae; session_id_testapp=127.0.0.1-6eb6d854-ccb5-41b3-8c2d-56e5ed92ac25</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_HOST</td><td valign="top">:</td><td><div>127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_REFERER</td><td valign="top">:</td><td><div>http://127.0.0.1:8000/testapp/default/unit_testing</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_USER_AGENT</td><td valign="top">:</td><td><div>Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:21.0) Gecko/20100101 Firefox/21.0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">PATH_INFO</td><td valign="top">:</td><td><div>/testapp/default/unit_testing</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">QUERY_STRING</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">REMOTE_ADDR</td><td valign="top">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">REMOTE_PORT</td><td valign="top">:</td><td><div>49705</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">REQUEST_METHOD</td><td valign="top">:</td><td><div>POST</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">REQUEST_URI</td><td valign="top">:</td><td><div>/testapp/default/unit_testing</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SCRIPT_NAME</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SERVER_NAME</td><td valign="top">:</td><td><div>dell-OptiPlex-7010</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SERVER_PORT</td><td valign="top">:</td><td><div>8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SERVER_PROTOCOL</td><td valign="top">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SERVER_SOFTWARE</td><td valign="top">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.errors</td><td valign="top">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x7f4e48213270&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.file_wrapper</td><td valign="top">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x20fdce8&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.input</td><td valign="top">:</td><td><div>&lt;open file &#x27;&lt;fdopen&gt;&#x27;, mode &#x27;w+b&#x27; at 0x21a28a0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.multiprocess</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.multithread</td><td valign="top">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.run_once</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.url_scheme</td><td valign="top">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.version</td><td valign="top">:</td><td><div>1</div></td></tr></table></div></td></tr></table></div></td></tr></table></div>'
tRp58
sS'frames'
p59
(lp60
(dp61
S'file'
p62
S'/home/monika/Desktop/web2py/gluon/restricted.py'
p63
sS'dump'
p64
(dp65
S'environment'
p66
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, ...}"
p67
sS'ccode'
p68
S'<code object <module> at 0x7f4e04177c30, file "/...2py/applications/testapp/models/test.py", line 2>'
p69
ssS'lnum'
p70
I212
sS'lines'
p71
(dp72
I207
S'    try:'
p73
sI208
S'        if isinstance(code, types.CodeType):'
p74
sI209
S'            ccode = code'
p75
sI210
S'        else:'
p76
sI211
S'            ccode = compile2(code, layer)'
p77
sI212
S'        exec ccode in environment'
p78
sI213
S'    except HTTP:'
p79
sI214
S'        raise'
p80
sI215
S'    except RestrictedError:'
p81
sI216
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p82
ssS'call'
p83
S'(code=\'# coding: utf8\\nimport os\\nimport thread\\nimport lo...ot in database"                \\n    return messg\\n\', environment={\'A\': <class \'gluon.html.A\'>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, \'CAT\': <class \'gluon.html.CAT\'>, \'CENTER\': <class \'gluon.html.CENTER\'>, \'CLEANUP\': <class \'gluon.validators.CLEANUP\'>, ...}, layer=\'/home/monika/Desktop/web2py/applications/testapp/models/test.py\')'
p84
sS'func'
p85
S'restricted'
p86
sa(dp87
g62
S'/home/monika/Desktop/web2py/applications/testapp/models/test.py'
p88
sg64
(dp89
S'vm_name'
p90
S'undefined'
p91
sS'conn_host'
p92
g91
sS'total_vm'
p93
g91
sS'vm_status'
p94
g91
sS'host_name'
p95
g91
sS'message'
p96
g91
ssg70
I1119
sg71
(dp97
I1120
S''
sI1121
S''
sI1122
S'def conn_host(host_name,vm_status,vm_name,message,total_vm):'
p98
sI1123
S'    import libvirt'
p99
sI1114
S'        print host_name[i]'
p100
sI1115
S'        print vm_status[i]'
p101
sI1116
S'        print vm_name[i]'
p102
sI1117
S'        print message[i]'
p103
sI1118
S'        print operation[i]'
p104
sI1119
S'conn_host(host_name,vm_status,vm_name,message,total_vm)'
p105
ssg83
S'()'
p106
sg85
S'<module>'
p107
sasS'pyver'
p108
S'Python 2.7.3: /usr/bin/python (prefix: /usr)'
p109
sS'session'
p110
g57
(S's\x1a\x00\x00\x00<div><table></table></div>'
tRp111
sS'etype'
p112
S"<type 'exceptions.NameError'>"
p113
sS'date'
p114
S'Mon Nov 11 16:59:26 2013'
p115
sS'response'
p116
g57
(S's\xa0,\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top">body</td><td valign="top">:</td><td><div>&lt;cStringIO.StringO object at 0x7f4e1c35fa08&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cookies</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">session_id_testapp</td><td valign="top">:</td><td><div>127.0.0.1-6eb6d854-ccb5-41b3-8c2d-56e5ed92ac25<table><tr><td style="font-weight:bold;vertical-align:top">comment</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">domain</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">expires</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">httponly</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">max-age</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">path</td><td valign="top">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">secure</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">version</td><td valign="top">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">delimiters</td><td valign="top">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">files</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">flash</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">generic_patterns</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">google_analytics_id</td><td valign="top">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">headers</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">X-Powered-By</td><td valign="top">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">logo</td><td valign="top">:</td><td><div><a class="brand" href="http://www.web2py.com/"><b>web<span>2</span>py</b>&trade;&nbsp;</a></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">menu</td><td valign="top">:</td><td><div><table><tr><td><div><table><tr><td><div>Home</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/testapp/default/index</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div><span class="highlighted">web2py</span></div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>My Sites</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/site</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>This App</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/design/testapp</div></td></tr><tr><td><div>[(&lt;lazyT &#x27;Controller&#x27;&gt;, False, &#x27;/admin/default/edit/testapp/controllers/default.py&#x27;), (&lt;lazyT &#x27;View&#x27;&gt;, False, &#x27;/admin/default/edit/testapp/views/default/unit_testing.html&#x27;), (&lt;lazyT &#x27;Layout&#x27;&gt;, False, &#x27;/admin/default/edit/testapp/views/layout.html&#x27;), (&lt;lazyT &#x27;Stylesheet&#x27;&gt;, False, &#x27;/admin/default/edit/testapp/static/css/web2py.css&#x27;), (&lt;lazyT &#x27;DB Model&#x27;&gt;, False, &#x27;/admin/default/edit/testapp/models/db.py&#x27;), (&lt;lazyT &#x27;Menu Model&#x27;&gt;, False, &#x27;/admin/default/edit/testapp/models/menu.py&#x27;), (&lt;lazyT &#x27;Database&#x27;&gt;, False, &#x27;/testapp/appadmin/index&#x27;), (&lt;lazyT &#x27;Errors&#x27;&gt;, False, &#x27;/admin/default/errors/testapp&#x27;), (&lt;lazyT &#x27;About&#x27;&gt;, False, &#x27;/admin/default/about/testapp&#x27;)]</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>web2py.com</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com</div></td></tr><tr><td><div>[(&lt;lazyT &#x27;Download&#x27;&gt;, False, &#x27;http://www.web2py.com/examples/default/download&#x27;), (&lt;lazyT &#x27;Support&#x27;&gt;, False, &#x27;http://www.web2py.com/examples/default/support&#x27;), (&lt;lazyT &#x27;Demo&#x27;&gt;, False, &#x27;http://web2py.com/demo_admin&#x27;), (&lt;lazyT &#x27;Quick Examples&#x27;&gt;, False, &#x27;http://web2py.com/examples/default/examples&#x27;), (&lt;lazyT &#x27;FAQ&#x27;&gt;, False, &#x27;http://web2py.com/AlterEgo&#x27;), (&lt;lazyT &#x27;Videos&#x27;&gt;, False, &#x27;http://www.web2py.com/examples/default/videos/&#x27;), (&lt;lazyT &#x27;Free Applications&#x27;&gt;, False, &#x27;http://web2py.com/appliances&#x27;), (&lt;lazyT &#x27;Plugins&#x27;&gt;, False, &#x27;http://web2py.com/plugins&#x27;), (&lt;lazyT &#x27;Layouts&#x27;&gt;, False, &#x27;http://web2py.com/layouts&#x27;), (&lt;lazyT &#x27;Recipes&#x27;&gt;, False, &#x27;http://web2pyslices.com/&#x27;), (&lt;lazyT &#x27;Semantic&#x27;&gt;, False, &#x27;http://web2py.com/semantic&#x27;)]</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Documentation</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book</div></td></tr><tr><td><div>[(&lt;lazyT &#x27;Preface&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/00&#x27;), (&lt;lazyT &#x27;Introduction&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/01&#x27;), (&lt;lazyT &#x27;Python&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/02&#x27;), (&lt;lazyT &#x27;Overview&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/03&#x27;), (&lt;lazyT &#x27;The Core&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/04&#x27;), (&lt;lazyT &#x27;The Views&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/05&#x27;), (&lt;lazyT &#x27;Database&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/06&#x27;), (&lt;lazyT &#x27;Forms and Validators&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/07&#x27;), (&lt;lazyT &#x27;Email and SMS&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/08&#x27;), (&lt;lazyT &#x27;Access Control&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/09&#x27;), (&lt;lazyT &#x27;Services&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/10&#x27;), (&lt;lazyT &#x27;Ajax Recipes&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/11&#x27;), (&lt;lazyT &#x27;Components and Plugins&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/12&#x27;), (&lt;lazyT &#x27;Deployment Recipes&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/13&#x27;), (&lt;lazyT &#x27;Other Recipes&#x27;&gt;, False, &#x27;http://www.web2py.com/book/default/chapter/14&#x27;), (&lt;lazyT &#x27;Buy this book&#x27;&gt;, False, &#x27;http://stores.lulu.com/web2py&#x27;)]</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Community</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>None</div></td></tr><tr><td><div>[(&lt;lazyT &#x27;Groups&#x27;&gt;, False, &#x27;http://www.web2py.com/examples/default/usergroups&#x27;), (&lt;lazyT &#x27;Twitter&#x27;&gt;, False, &#x27;http://twitter.com/web2py&#x27;), (&lt;lazyT &#x27;Live Chat&#x27;&gt;, False, &#x27;http://webchat.freenode.net/?channels=web2py&#x27;)]</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Plugins</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>None</div></td></tr><tr><td><div>[(&#x27;plugin_wiki&#x27;, False, &#x27;http://web2py.com/examples/default/download&#x27;), (&lt;lazyT &#x27;Other Plugins&#x27;&gt;, False, &#x27;http://web2py.com/plugins&#x27;), (&lt;lazyT &#x27;Layout Plugins&#x27;&gt;, False, &#x27;http://web2py.com/layouts&#x27;)]</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">meta</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">author</td><td valign="top">:</td><td><div>Your Name &lt;you@example.com&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">description</td><td valign="top">:</td><td><div>a cool new app</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">generator</td><td valign="top">:</td><td><div>Web2py Web Framework</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">keywords</td><td valign="top">:</td><td><div>web2py, python, framework</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">models_to_run</td><td valign="top">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^default/\\w+\\.py$</div></td></tr><tr><td><div>^default/unit_testing/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">postprocessing</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_cookie_expires</td><td valign="top">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_data_name</td><td valign="top">:</td><td><div>session_data_testapp</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_file</td><td valign="top">:</td><td><div>&lt;open file &#x27;/home/monika/Desktop/web2py/applications/testapp/sessions/127.0.0.1-6eb6d854-ccb5-41b3-8c2d-56e5ed92ac25&#x27;, mode &#x27;rb+&#x27; at 0x7f4e2827cae0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_filename</td><td valign="top">:</td><td><div>/home/monika/Desktop/web2py/applications/testapp/sessions/127.0.0.1-6eb6d854-ccb5-41b3-8c2d-56e5ed92ac25</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_id</td><td valign="top">:</td><td><div>127.0.0.1-6eb6d854-ccb5-41b3-8c2d-56e5ed92ac25</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_id_name</td><td valign="top">:</td><td><div>session_id_testapp</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_locked</td><td valign="top">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_new</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_storage_type</td><td valign="top">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">status</td><td valign="top">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">subtitle</td><td valign="top">:</td><td><div>customize me!</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">title</td><td valign="top">:</td><td><div>Testapp</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">view</td><td valign="top">:</td><td><div>default/unit_testing.html</div></td></tr></table></div>'
tRp117
sS'locals'
p118
(dp119
S'Service'
p120
S"<class 'gluon.tools.Service'>"
p121
sS'get_snapshot_id'
p122
S'<function get_snapshot_id>'
p123
sS'OBJECT'
p124
S"<class 'gluon.html.OBJECT'>"
p125
sS'datetime'
p126
S"<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>"
p127
sS'click_on_setting'
p128
S'<function click_on_setting>'
p129
sg110
S"<Storage {'_formkey[default]': '7382cc42-5a79-46...ssion_hash': '1b5bfac85a823ba4bb1e94dd04dd46e8'}>"
p130
sS'LINK'
p131
S"<class 'gluon.html.LINK'>"
p132
sS'BR'
p133
S"<class 'gluon.html.BR'>"
p134
sS'local_import'
p135
S'<function <lambda>>'
p136
sS'OPTGROUP'
p137
S"<class 'gluon.html.OPTGROUP'>"
p138
sS'isElementPresent'
p139
S'<function isElementPresent>'
p140
sS'LI'
p141
S"<class 'gluon.html.LI'>"
p142
sS'check_user'
p143
S'<function check_user>'
p144
sS'stress_script'
p145
S'<function stress_script>'
p146
sS'redirect'
p147
S'<function redirect>'
p148
sS'IS_INT_IN_RANGE'
p149
S"<class 'gluon.validators.IS_INT_IN_RANGE'>"
p150
sS'isSanityCheck'
p151
S'<function isSanityCheck>'
p152
sS'IS_LOWER'
p153
S"<class 'gluon.validators.IS_LOWER'>"
p154
sS'IS_STRONG'
p155
S"<class 'gluon.validators.IS_STRONG'>"
p156
sS'xml_connect'
p157
S'<function xml_connect>'
p158
sS'IS_EQUAL_TO'
p159
S"<class 'gluon.validators.IS_EQUAL_TO'>"
p160
sS'IS_IN_DB'
p161
S"<class 'gluon.validators.IS_IN_DB'>"
p162
sS'TAG'
p163
S'<gluon.html.__TAG__ object>'
p164
sS'check_vm_in_failed_task'
p165
S'<function check_vm_in_failed_task>'
p166
sS'isHref'
p167
S'<function isHref>'
p168
sS'SQLField'
p169
S"<class 'gluon.dal.Field'>"
p170
sS'graph_test'
p171
S'<function graph_test>'
p172
sS'logger'
p173
S'<logging.Logger object>'
p174
sS'BODY'
p175
S"<class 'gluon.html.BODY'>"
p176
sS'IS_DATE_IN_RANGE'
p177
S"<class 'gluon.validators.IS_DATE_IN_RANGE'>"
p178
sS'TH'
p179
S"<class 'gluon.html.TH'>"
p180
sS'URL'
p181
S'<function URL>'
p182
sS'__file__'
p183
S"'/home/monika/Desktop/web2py/applications/testapp/models/test.py'"
p184
sS'db'
p185
S'<DAL uri="sqlite://storage.db">'
p186
sS'auth'
p187
S'<gluon.tools.Auth object>'
p188
sS'P'
S"<class 'gluon.html.P'>"
p189
sS'T'
S'<gluon.languages.translator object>'
p190
sS'isSubmit'
p191
S'<function isSubmit>'
p192
sS'org_task_status'
p193
S'<function org_task_status>'
p194
sS'XHTML'
p195
S"<class 'gluon.html.XHTML'>"
p196
sS'SQLDB'
p197
S"<class 'gluon.dal.DAL'>"
p198
sS'ON'
p199
S'True'
p200
sS'OL'
p201
S"<class 'gluon.html.OL'>"
p202
sS'TEXTAREA'
p203
S"<class 'gluon.html.TEXTAREA'>"
p204
sS'MENU'
p205
S"<class 'gluon.html.MENU'>"
p206
sS'host_status'
p207
S'<function host_status>'
p208
sS'isSelect'
p209
S'<function isSelect>'
p210
sS'isScroll'
p211
S'<function isScroll>'
p212
sS'EM'
p213
S"<class 'gluon.html.EM'>"
p214
sS'CODE'
p215
S"<class 'gluon.html.CODE'>"
p216
sS'HTTP'
p217
S"<class 'gluon.http.HTTP'>"
p218
sS'HR'
p219
S"<class 'gluon.html.HR'>"
p220
sS'IS_DATETIME'
p221
S"<class 'gluon.validators.IS_DATETIME'>"
p222
sS'add_extra_disk'
p223
S'<function add_extra_disk>'
p224
sS'HEAD'
p225
S"<class 'gluon.html.HEAD'>"
p226
sS'LABEL'
p227
S"<class 'gluon.html.LABEL'>"
p228
sS'CLEANUP'
p229
S"<class 'gluon.validators.CLEANUP'>"
p230
sS'open_error_page'
p231
S'<function open_error_page>'
p232
sS'vm_running'
p233
S'<function vm_running>'
p234
sS'SELECT'
p235
S"<class 'gluon.html.SELECT'>"
p236
sS'CENTER'
p237
S"<class 'gluon.html.CENTER'>"
p238
sS'prettydate'
p239
S'<function prettydate>'
p240
sS'Crud'
p241
S"<class 'gluon.tools.Crud'>"
p242
sS'Auth'
p243
S"<class 'gluon.tools.Auth'>"
p244
sS'DEVELOPMENT_MENU'
p245
g200
sS'I'
S"<class 'gluon.html.I'>"
p246
sS'HTML'
p247
S"<class 'gluon.html.HTML'>"
p248
sS'SQLFORM'
p249
S"<class 'gluon.sqlhtml.SQLFORM'>"
p250
sS'LOAD'
p251
S'<function LOAD>'
p252
sS'isCheckTable'
p253
S'<function isCheckTable>'
p254
sS'FIELDSET'
p255
S"<class 'gluon.html.FIELDSET'>"
p256
sS'__builtins__'
p257
S"{'ArithmeticError': <type 'exceptions.ArithmeticError'>, 'AssertionError': <type 'exceptions.AssertionError'>, 'AttributeError': <type 'exceptions.AttributeError'>, 'BaseException': <type 'exceptions.BaseException'>, 'BufferError': <type 'exceptions.BufferError'>, 'BytesWarning': <type 'exceptions.BytesWarning'>, 'DeprecationWarning': <type 'exceptions.DeprecationWarning'>, 'EOFError': <type 'exceptions.EOFError'>, 'Ellipsis': Ellipsis, 'EnvironmentError': <type 'exceptions.EnvironmentError'>, ...}"
p258
sS'check_collaborator'
p259
S'<function check_collaborator>'
p260
sS'check_stat_on_host'
p261
S'<function check_stat_on_host>'
p262
sS'vm_paused'
p263
S'<function vm_paused>'
p264
sS'embed64'
p265
S'<function embed64>'
p266
sS'IS_LIST_OF'
p267
S"<class 'gluon.validators.IS_LIST_OF'>"
p268
sS'INPUT'
p269
S"<class 'gluon.html.INPUT'>"
p270
sS'EMBED'
p271
S"<class 'gluon.html.EMBED'>"
p272
sS'check_operation'
p273
S'<function check_operation>'
p274
sS'_'
S'<function _>'
p275
sS'isImage'
p276
S'<function isImage>'
p277
sS'IS_IMAGE'
p278
S"<class 'gluon.validators.IS_IMAGE'>"
p279
sS'isCheckdata'
p280
S'<function isCheckdata>'
p281
sS'logging'
p282
S"<module 'logging' from '/usr/lib/python2.7/logging/__init__.pyc'>"
p283
sS'thread'
p284
S"<module 'thread' (built-in)>"
p285
sS'H2'
p286
S"<class 'gluon.html.H2'>"
p287
sS'max_snap'
p288
S'<function max_snap>'
p289
sS'BUTTON'
p290
S"<class 'gluon.html.BUTTON'>"
p291
sS'result_setting_page'
p292
S'<function result_setting_page>'
p293
sS'H6'
p294
S"<class 'gluon.html.H6'>"
p295
sS'H4'
p296
S"<class 'gluon.html.H4'>"
p297
sS'H5'
p298
S"<class 'gluon.html.H5'>"
p299
sS'Keys'
p300
S"<class 'selenium.webdriver.common.keys.Keys'>"
p301
sS'IS_UPPER'
p302
S"<class 'gluon.validators.IS_UPPER'>"
p303
sS'xmlescape'
p304
S'<function xmlescape>'
p305
sS'IS_TIME'
p306
S"<class 'gluon.validators.IS_TIME'>"
p307
sS'os'
p308
S"<module 'os' from '/usr/lib/python2.7/os.pyc'>"
p309
sS'cache'
p310
S'<gluon.cache.Cache object>'
p311
sS'OPTION'
p312
S"<class 'gluon.html.OPTION'>"
p313
sS'TITLE'
p314
S"<class 'gluon.html.TITLE'>"
p315
sS'CRYPT'
p316
S"<class 'gluon.validators.CRYPT'>"
p317
sS'IS_EMPTY_OR'
p318
S"<class 'gluon.validators.IS_EMPTY_OR'>"
p319
sS'MARKMIN'
p320
S"<class 'gluon.html.MARKMIN'>"
p321
sS'test_script'
p322
S'<function test_script>'
p323
sS'get_user_id'
p324
S'<function get_user_id>'
p325
sS'STRONG'
p326
S"<class 'gluon.html.STRONG'>"
p327
sS'COL'
p328
S"<class 'gluon.html.COL'>"
p329
sS'approval_status'
p330
S'<function approval_status>'
p331
sS'print_result'
p332
S'<function print_result>'
p333
sS'isReadOnly'
p334
S'<function isReadOnly>'
p335
sS'stress_test_script'
p336
S'<function stress_test_script>'
p337
sS'packages_install_test'
p338
S'<function packages_install_test>'
p339
sS'isInput'
p340
S'<function isInput>'
p341
sS'TABLE'
p342
S"<class 'gluon.html.TABLE'>"
p343
sS'isButton_add'
p344
S'<function isButton_add>'
p345
sg48
S"'from helper import get_config_file\\n\\nconfig = get...AL(conn_str) #connecting to remote db for testing'"
p346
sS'IS_LENGTH'
p347
S"<class 'gluon.validators.IS_LENGTH'>"
p348
sS'XML'
p349
S"<class 'gluon.html.XML'>"
p350
sS'B'
S"<class 'gluon.html.B'>"
p351
sS'IMG'
p352
S"<class 'gluon.html.IMG'>"
p353
sS'webdriver'
p354
S"<module 'selenium.webdriver' from '/usr/local/li...7/dist-packages/selenium/webdriver/__init__.pyc'>"
p355
sS'SQLTABLE'
p356
S"<class 'gluon.sqlhtml.SQLTABLE'>"
p357
sS'IS_MATCH'
p358
S"<class 'gluon.validators.IS_MATCH'>"
p359
sS'IS_ALPHANUMERIC'
p360
S"<class 'gluon.validators.IS_ALPHANUMERIC'>"
p361
sS'admin_vm_status'
p362
S'<function admin_vm_status>'
p363
sS'check_vm_in_completed_task'
p364
S'<function check_vm_in_completed_task>'
p365
sS'action_on_snapshot'
p366
S'<function action_on_snapshot>'
p367
sS'SPAN'
p368
S"<class 'gluon.html.SPAN'>"
p369
sS'IS_JSON'
p370
S"<class 'gluon.validators.IS_JSON'>"
p371
sS'IS_SLUG'
p372
S"<class 'gluon.validators.IS_SLUG'>"
p373
sS'IS_IPV4'
p374
S"<class 'gluon.validators.IS_IPV4'>"
p375
sS'BEAUTIFY'
p376
S"<class 'gluon.html.BEAUTIFY'>"
p377
sS'META'
p378
S"<class 'gluon.html.META'>"
p379
sS'H3'
p380
S"<class 'gluon.html.H3'>"
p381
sS'isInput_add'
p382
S'<function isInput_add>'
p383
sS'check_vm_in_pending_task'
p384
S'<function check_vm_in_pending_task>'
p385
sS'check_snapshot'
p386
S'<function check_snapshot>'
p387
sS'db_connection'
p388
S'<function db_connection>'
p389
sS'H1'
p390
S"<class 'gluon.html.H1'>"
p391
sS'IS_DATE'
p392
S"<class 'gluon.validators.IS_DATE'>"
p393
sS'IS_EMAIL'
p394
S"<class 'gluon.validators.IS_EMAIL'>"
p395
sS'IS_NOT_EMPTY'
p396
S"<class 'gluon.validators.IS_NOT_EMPTY'>"
p397
sS'IS_FLOAT_IN_RANGE'
p398
S"<class 'gluon.validators.IS_FLOAT_IN_RANGE'>"
p399
sS'TBODY'
p400
S"<class 'gluon.html.TBODY'>"
p401
sS'CAT'
p402
S"<class 'gluon.html.CAT'>"
p403
sS'Field'
p404
S"<class 'gluon.dal.Field'>"
p405
sS'isWait'
p406
S'<function isWait>'
p407
sS'DesiredCapabilities'
p408
S"<class 'selenium.webdriver.common.desired_capabilities.DesiredCapabilities'>"
p409
sS'check_attach_disk'
p410
S'<function check_attach_disk>'
p411
sS'DIV'
p412
S"<class 'gluon.html.DIV'>"
p413
sS'LEGEND'
p414
S"<class 'gluon.html.LEGEND'>"
p415
sS'isTable'
p416
S'<function isTable>'
p417
sS'UL'
p418
S"<class 'gluon.html.UL'>"
p419
sS'DAL'
p420
S"<class 'gluon.dal.DAL'>"
p421
sS'TT'
p422
S"<class 'gluon.html.TT'>"
p423
sS'TR'
p424
S"<class 'gluon.html.TR'>"
p425
sS'__package__'
p426
S'None'
p427
sS'check_vm_configuration'
p428
S'<function check_vm_configuration>'
p429
sS'check_vm_task'
p430
S'<function check_vm_task>'
p431
sS'IFRAME'
p432
S"<class 'gluon.html.IFRAME'>"
p433
sS'SCRIPT'
p434
S"<class 'gluon.html.SCRIPT'>"
p435
sS'TD'
p436
S"<class 'gluon.html.TD'>"
p437
sS'PluginManager'
p438
S"<class 'gluon.tools.PluginManager'>"
p439
sS'IS_URL'
p440
S"<class 'gluon.validators.IS_URL'>"
p441
sS'A'
S"<class 'gluon.html.A'>"
p442
sS'STYLE'
p443
S"<class 'gluon.html.STYLE'>"
p444
sS'IS_DATETIME_IN_RANGE'
p445
S"<class 'gluon.validators.IS_DATETIME_IN_RANGE'>"
p446
sS'action_on_add_user'
p447
S'<function action_on_add_user>'
p448
sS'FORM'
p449
S"<class 'gluon.html.FORM'>"
p450
sS'click_on_dialogbox'
p451
S'<function click_on_dialogbox>'
p452
sS'print_graph_result'
p453
S'<function print_graph_result>'
p454
sS'click_on_operation'
p455
S'<function click_on_operation>'
p456
sS'sys'
p457
S"<module 'sys' (built-in)>"
p458
sS'IS_NOT_IN_DB'
p459
S"<class 'gluon.validators.IS_NOT_IN_DB'>"
p460
sS'add_user'
p461
S'<function add_user>'
p462
sS'PRE'
p463
S"<class 'gluon.html.PRE'>"
p464
sS'packages_install_host'
p465
S'<function packages_install_host>'
p466
sg116
S"<Storage {'body': <cStringIO.StringO object at 0...e0c1c59b0>, 'view': 'default/unit_testing.html'}>"
p467
sS'THEAD'
p468
S"<class 'gluon.html.THEAD'>"
p469
sS'execute_query'
p470
S'<function execute_query>'
p471
sS'IS_NULL_OR'
p472
S"<class 'gluon.validators.IS_EMPTY_OR'>"
p473
sS'vm_shutdown'
p474
S'<function vm_shutdown>'
p475
sS'__name__'
p476
S"'__restricted__'"
p477
sS'COLGROUP'
p478
S"<class 'gluon.html.COLGROUP'>"
p479
sg56
S"<Storage {'function': 'unit_testing', 'body': <o...', '_formname': 'default', 'testcase34': '34'}>}>"
p480
sS'IS_EXPR'
p481
S"<class 'gluon.validators.IS_EXPR'>"
p482
sS'IS_IN_SET'
p483
S"<class 'gluon.validators.IS_IN_SET'>"
p484
sS'check_user_table'
p485
S'<function check_user_table>'
p486
sS'baadal_db'
p487
S"<_mysql.connection open to '10.208.21.111' at 7f4e2c01b6d0>"
p488
sS'IS_UPLOAD_FILENAME'
p489
S"<class 'gluon.validators.IS_UPLOAD_FILENAME'>"
p490
sS'time'
p491
S"<module 'time' (built-in)>"
p492
sS'IS_DECIMAL_IN_RANGE'
p493
S"<class 'gluon.validators.IS_DECIMAL_IN_RANGE'>"
p494
sS'isButton'
p495
S'<function isButton>'
p496
sS'send_mail'
p497
S'<function send_mail>'
p498
sS'TFOOT'
p499
S"<class 'gluon.html.TFOOT'>"
p500
sssS'traceback'
p501
S'Traceback (most recent call last):\n  File "/home/monika/Desktop/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/monika/Desktop/web2py/applications/testapp/models/test.py", line 1119, in <module>\n    conn_host(host_name,vm_status,vm_name,message,total_vm)\nNameError: name \'conn_host\' is not defined\n'
p502
s.